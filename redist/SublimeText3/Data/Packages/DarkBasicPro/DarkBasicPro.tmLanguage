<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>

	<key>fileTypes</key>
	<array>
		<string>dbx</string>
		<string>dba</string>
	</array>

	<key>name</key>
	<string>DarkBasicPro (Obsidian)</string>

	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#expression</string>
		</dict>
	</array>

	<key>repository</key>
	<dict>

		<key>library-function</key>
		<dict>
			<key>match</key>
			<string>@.*?(?=\()</string>
			<key>name</key>
			<string>support.function.dbx</string>
		</dict>

		<key>library-special</key>
		<dict>
			<key>match</key>
			<string>(\$.*?(?=[^a-zA-Z0-9]))|GLOBAL|#CONSTANT</string>
			<key>name</key>
			<string>entity.name.class.dbx</string>
		</dict>

		<key>access-modifier</key>
		<dict>
			<key>match</key>
			<string>(public|protected|private)</string>
			<key>name</key>
			<string>storage.modifier.dbx</string>
		</dict>

		<key>arithmetic-operator</key>
		<dict>
			<key>match</key>
			<string>\*|/|\-\-|\-|\+\+|\+|%</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.dbx</string>
		</dict>
		<key>array-literal</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.array.literal.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>assignment-operator</key>
		<dict>
			<key>match</key>
			<string>\bas\b|&lt;&lt;=|&gt;&gt;=|&gt;&gt;&gt;=|\*=|(?&lt;!\()/=|%=|\+=|\-=|&amp;=|\^=</string>
			<key>name</key>
			<string>keyword.operator.assignment.dbx</string>
		</dict>
		<key>block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.block.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-member</string>
				</dict>
			</array>
		</dict>
		<key>boolean-literal</key>
		<dict>
			<key>match</key>
			<string>\b(false|true)\b</string>
			<key>name</key>
			<string>constant.language.boolean.dbx</string>
		</dict>
		<key>cast</key>
		<dict>
			<key>begin</key>
			<string>(?:(?&lt;=return|throw|yield|[=(,:&gt;]))\s*(&lt;)(?!&lt;?\=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>&gt;</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>cast.expr.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>comment</key>
		<dict>
			<key>name</key>
			<string>comment.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment-block-doc</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment-line</string>
				</dict>
			</array>
		</dict>
		<key>comment-block</key>
		<dict>
			<key>begin</key>
			<string>\bremstart\b|/\*</string>
			<key>end</key>
			<string>\bremend\b|\*/</string>
			<key>name</key>
			<string>comment.block.dbx</string>
		</dict>
		<key>comment-block-doc</key>
		<dict>
			<key>begin</key>
			<string>/\*\*(?!/)</string>
			<key>end</key>
			<string>\*/</string>
			<key>name</key>
			<string>comment.block.documentation.dbx</string>
		</dict>
		<key>comment-line</key>
		<dict>
			<key>match</key>
			<string>(//|`|rem ).*$\n?</string>
			<key>name</key>
			<string>comment.line.dbx</string>
		</dict>
		<key>control-statement</key>
		<dict>
			<key>match</key>
			<string>(?&lt;!\.)\b(break|catch|continue|debugger|declare|do|else|finally|for|if|endif|return|switch|throw|try|with|super|case|default|while|endwhile|repeat|until|next|loop|select|endselect|endcase|exit|exitfunction|endfunction)\b</string>
			<key>name</key>
			<string>keyword.control.dbx</string>
		</dict>
		<key>decl-block</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.decl.block.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>declaration</key>
		<dict>
			<key>name</key>
			<string>meta.declaration.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#function-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#enum-declaration</string>
				</dict>
			</array>
		</dict>
		<key>enum-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\b(const)\s+)?\b(enum)\s+([a-zA-Z_$][\w$]*)</string>
			<key>name</key>
			<string>meta.enum.declaration.dbx</string>
		</dict>
		<key>expression</key>
		<dict>
			<key>name</key>
			<string>meta.expression.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#for-in-simple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#regex</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#template</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#var-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#cast</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#new-expr</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#block</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#relational-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#arithmetic-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#logic-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#assignment-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#library-function</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#library-special</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#storage-keyword</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-call</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#switch-case</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#control-statement</string>
				</dict>
			</array>
		</dict>
		<key>expression-operator</key>
		<dict>
			<key>match</key>
			<string>=&gt;|\b(export|import|in|instanceof|module|namespace|new|typeof|void)\b</string>
			<key>name</key>
			<string>keyword.operator.dbx</string>
		</dict>
		<key>field-declaration</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()\s*\b([a-zA-Z_$][\w$]*)\s*(\?\s*)?(?=(=|:))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.field.declaration.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>function-call</key>
		<dict>
			<key>name</key>
			<string>functioncall.expr.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#paren-expression</string>
				</dict>
			</array>
		</dict>
		<key>function-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(export|public|private)\s+)?(function\b)(?:\s+([a-zA-Z_$][\w$]*))?\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=;|\))|(?&lt;=\))</string>
			<key>name</key>
			<string>meta.function.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>function-overload-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.function.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?:(export)\s+)?(function\b)(?:\s+([a-zA-Z_$][\w$]*))?\s*</string>
			<key>name</key>
			<string>meta.function.overload.dbx</string>
		</dict>
		<key>function-type-parameters</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.round.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.function.type.parameter.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#parameter-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
			</array>
		</dict>
		<key>indexer-declaration</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(\])\s*(\?\s*)?|$</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.indexer.declaration.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-parameter</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>indexer-parameter</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>([a-zA-Z_$][\w$]*)(?=\:)</string>
			<key>name</key>
			<string>meta.indexer.parameter.dbx</string>
		</dict>
		<key>literal</key>
		<dict>
			<key>name</key>
			<string>literal.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#numeric-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#boolean-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#null-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#undefined-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#array-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#this-literal</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#token-literal</string>
				</dict>
			</array>
		</dict>
		<key>logic-operator</key>
		<dict>
			<key>match</key>
			<string>\!|&amp;|~|\||&amp;&amp;|\|\|</string>
			<key>name</key>
			<string>keyword.operator.arithmetic.dbx</string>
		</dict>
		<key>method-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(abstract)\s+)?\b(?:(public|private|protected)\s+)?(?:(get|set)\s+)?(?:(new)|(?:([a-zA-Z_$][\.\w$]*)\s*(\??)))?\s*(?=\(|\&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.property.dbx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
				<key>5</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dbx</string>
				</dict>
				<key>6</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\}|;|,)|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.method.declaration.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-overload-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#decl-block</string>
				</dict>
			</array>
		</dict>
		<key>method-overload-declaration</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>entity.name.function.dbx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(?:(public|private|protected)\s+)?(?:(new)|(?:([a-zA-Z_$][\.\w$]*)\s*(\??)))?\s*(?=\(|\&lt;)</string>
			<key>name</key>
			<string>meta.method.overload.declaration.dbx</string>
		</dict>
		<key>new-expr</key>
		<dict>
			<key>begin</key>
			<string>\b(new)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[(;]|$)</string>
			<key>name</key>
			<string>new.expr.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>null-literal</key>
		<dict>
			<key>match</key>
			<string>\b(null)\b</string>
			<key>name</key>
			<string>constant.language.null.dbx</string>
		</dict>
		<key>numeric-literal</key>
		<dict>
			<key>match</key>
			<string>\b(?&lt;=[^$])((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b</string>
			<key>name</key>
			<string>constant.numeric.dbx</string>
		</dict>
		<key>object-body</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.body.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#variable-initializer</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#access-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#static-modifier</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#property-accessor</string>
				</dict>
			</array>
		</dict>
		<key>object-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(?:(export)\s+)?\b(?:(abstract)\s+)?\b(class|interface)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?&lt;=\})</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.declaration.object.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-heritage</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-name</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-body</string>
				</dict>
			</array>
		</dict>
		<key>object-heritage</key>
		<dict>
			<key>begin</key>
			<string>(?:\b(extends|implements))</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\{)</string>
			<key>endCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.heritage.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#object-heritage-parent</string>
				</dict>
			</array>
		</dict>
		<key>object-heritage-parent</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\s*([a-zA-Z_$][\w$]*))</string>
			<key>name</key>
			<string>meta.object.heritage.parent.dbx</string>
		</dict>
		<key>object-member</key>
		<dict>
			<key>begin</key>
			<string>[a-zA-Z_$][\w$]*\s*:</string>
			<key>end</key>
			<string>(?=,|\})</string>
			<key>name</key>
			<string>meta.object.member.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>object-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>entity.name.class.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>[a-zA-Z_$][\w$]*</string>
			<key>name</key>
			<string>meta.object.name.dbx</string>
		</dict>
		<key>parameter-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.modifier.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
				<key>3</key>
				<dict>
					<key>name</key>
					<string>variable.parameter.dbx</string>
				</dict>
				<key>4</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>(?:\s*\b(public|private|protected)\b\s+)?(\.\.\.)?\s*([a-zA-Z_$][\w$]*)\s*(\??)</string>
			<key>name</key>
			<string>parameter.name.dbx</string>
		</dict>
		<key>paren-expression</key>
		<dict>
			<key>begin</key>
			<string>\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.paren.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.paren.dbx</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>property-accessor</key>
		<dict>
			<key>match</key>
			<string>\b(get|set)\b</string>
			<key>name</key>
			<string>storage.type.property.dbx</string>
		</dict>
		<key>qstring-double</key>
		<dict>
			<key>begin</key>
			<string>"</string>
			<key>end</key>
			<string>"|(?=$)</string>
			<key>name</key>
			<string>string.double.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>qstring-single</key>
		<dict>
			<key>begin</key>
			<string>'</string>
			<key>end</key>
			<string>'|(?=$)</string>
			<key>name</key>
			<string>string.single.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#string-character-escape</string>
				</dict>
			</array>
		</dict>
		<key>regex</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=[=(:,\[]|^|return|&amp;&amp;|\|\||!)\s*(/)(?![/*+{}?])</string>
			<key>end</key>
			<string>$|(/)[igm]*</string>
			<key>name</key>
			<string>string.regex.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\\.</string>
					<key>name</key>
					<string>constant.character.escape.dbx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\[(\\\]|[^\]])*\]</string>
					<key>name</key>
					<string>constant.character.class.dbx</string>
				</dict>
			</array>
		</dict>
		<key>relational-operator</key>
		<dict>
			<key>match</key>
			<string>===|==|=|!=|!==|&lt;=|&gt;=|&lt;&gt;|&lt;|&gt;</string>
			<key>name</key>
			<string>keyword.operator.comparison.dbx</string>
		</dict>
		<key>return-type</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;=\))\s*:</string>
			<key>end</key>
			<string>(?=$)|(?=\{|;|//)</string>
			<key>name</key>
			<string>meta.return.type.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>static-modifier</key>
		<dict>
			<key>match</key>
			<string>\b(static)\b</string>
			<key>name</key>
			<string>keyword.other.dbx</string>
		</dict>
		<key>storage-keyword</key>
		<dict>
			<key>match</key>
			<string><!--\b(float|boolean|string|integer|dword|function|const)\b--></string>
			<key>name</key>
			<string>storage.type.dbx</string>
		</dict>
		<key>string</key>
		<dict>
			<key>name</key>
			<string>string.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#qstring-single</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#qstring-double</string>
				</dict>
			</array>
		</dict>
		<key>string-character-escape</key>
		<dict>
			<key>match</key>
			<string>\\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.|$)</string>
			<key>name</key>
			<string>constant.character.escape</string>
		</dict>
		<key>switch-case</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\.)\b(case|default)\b</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>:</string>
			<key>name</key>
			<string>case.expr.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
		<key>this-literal</key>
		<dict>
			<key>match</key>
			<string>\b(this)\b</string>
			<key>name</key>
			<string>constant.language.this.dbx</string>
		</dict>
		<key>token-literal</key>
		<dict>
			<key>match</key>
			<string>\b(dim|include\#|constant\#|type)</string>
			<key>name</key>
			<string>constant.other.dbx</string>
		</dict>
	<key>type</key>
		<dict>
			<key>name</key>
			<string>meta.type.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-primitive</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-tuple</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-object</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-operator</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-paren-or-function-type-parameters</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-function-return-type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-name</string>
				</dict>
			</array>
		</dict>
		<key>type-annotation</key>
		<dict>
			<key>begin</key>
			<string>:</string>
			<key>end</key>
			<string>(?=$|[,);\}\]]|//)|(?==[^&gt;])|(?&lt;=[\}&gt;\]\)]|[a-zA-Z_$])\s*(?=\{)</string>
			<key>name</key>
			<string>meta.type.annotation.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>type-declaration</key>
		<dict>
			<key>begin</key>
			<string>\b(type)\b\s+([a-zA-Z_$][\w$]*)\s*=\s*</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=[,);&gt;]|var|type|function|class|interface)</string>
			<key>name</key>
			<string>meta.type.declaration.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-function-return-type</key>
		<dict>
			<key>begin</key>
			<string>=&gt;</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=\s*[,\)\{=;&gt;]|//|$)</string>
			<key>name</key>
			<string>meta.type.function.return.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-name</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string>[a-zA-Z_$][.\w$]*</string>
			<key>name</key>
			<string>meta.type.name.dbx</string>
		</dict>
		<key>type-object</key>
		<dict>
			<key>begin</key>
			<string>\{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.curly.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.object.type.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#field-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#method-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#indexer-declaration</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
			</array>
		</dict>
		<key>type-operator</key>
		<dict>
			<key>match</key>
			<string>[.|]</string>
			<key>name</key>
			<string>keyword.operator.type.dbx</string>
		</dict>
		<key>type-parameters</key>
		<dict>
			<key>begin</key>
			<string>([a-zA-Z_$][\w$]*)?(&lt;)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>entity.name.type.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$)|(&gt;)</string>
			<key>endCaptures</key>
			<dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>meta.brace.angle.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.parameters.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(extends)\b</string>
					<key>name</key>
					<string>keyword.other.dbx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
			</array>
		</dict>
		<key>type-paren-or-function-type-parameters</key>
		<dict>
			<key>begin</key>
			<string>(?:\b(new)\b)?\s*\(</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.control.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\)</string>
			<key>name</key>
			<string>meta.type.paren.cover.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#function-type-parameters</string>
				</dict>
			</array>
		</dict>
		<key>type-primitive</key>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
			</dict>
			<key>match</key>
			<string><!--\b(string|integer|float|dword|boolean)\b--></string>
			<key>name</key>
			<string>meta.type.primitive.dbx</string>
		</dict>
		<key>type-tuple</key>
		<dict>
			<key>begin</key>
			<string>\[</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>\]</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>meta.brace.square.dbx</string>
				</dict>
			</dict>
			<key>name</key>
			<string>meta.type.tuple.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>undefined-literal</key>
		<dict>
			<key>match</key>
			<string>\b(undefined)\b</string>
			<key>name</key>
			<string>constant.language.dbx</string>
		</dict>
		<key>var-expr</key>
		<dict>
			<key>begin</key>
			<string>(?&lt;!\()\s*\b(var|let|const(?!\s+enum))\s+([a-zA-Z_$][\w$]*)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>storage.type.dbx</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>variable.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[;=\}\{])|(?&lt;=\})</string>
			<key>name</key>
			<string>meta.var.expr.dbx</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#type-annotation</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#string</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#comment</string>
				</dict>
			</array>
		</dict>
		<key>variable-initializer</key>
		<dict>
			<key>begin</key>
			<string>(=)</string>
			<key>beginCaptures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.dbx</string>
				</dict>
			</dict>
			<key>end</key>
			<string>(?=$|[,);=])</string>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#expression</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.dbx</string>
	<key>uuid</key>
	<string>ef98eb90-bf9b-11e4-bb52-0800200c9a66</string>
</dict>
</plist>
