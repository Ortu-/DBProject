#CONSTANT ENV_TEXTUREFORMAT ".png"
type Application_type_configData
  screenWidth as integer
  screenHeight as integer
  screenCenterX as integer
  screenCenterY as integer
  isWindowed as boolean
  usePerfCap as boolean
  logLevel as integer
  musicVolume as integer
  soundVolume as integer
endtype
type Application_type_statusData
  debugModeIsActive as boolean 
  loadState as byte 
  loadStage as byte 
  loadType as byte 
  loadMusicMark as integer
  isRunning as boolean
endtype
type Application_type_updateHandlerData
  ignorePause as boolean
  functionName as string
  required as string
endtype
type Application_type_splashScreenData
  imgNum as integer
  pasteX as integer
  pasteY as integer
endtype
type STATIC_CLASS_Application
  config as Application_type_configData
  status as Application_type_statusData
  currentProfile as string
  debug as string
endtype
dim _App_updateQueue() as Application_type_updateHandlerData
dim _App_updateList() as Application_type_updateHandlerData
dim _App_splashScreenResource() as Application_type_splashScreenData
GLOBAL App as STATIC_CLASS_Application
_App_init()
UI_load("common")
UI_load("titleMenu")
  UI_controller_titleMenu_init()
System.timing.loopCount = 1
System_log("main.dbx", 2, "main", "All initialization is finished. Beginning main loop.")
App.status.loadStage = 3
App_updateSplashScreen("- Finishing")
cls
App.status.isRunning = TRUE
while App.status.isRunning
  System.timing.timer = timer()
  App.debug = ""
  if App.status.loadState > 1
    System_getHardwareInput()
    if App.status.loadState = 2
      System_updateIntervals()
      System_updateMetrics()
      UI_updatePageFlow()
      UI_getInterfaceInput()
      if App.status.loadState = 2 then sync
    endif
    if App.status.loadState = 3
      if abs(System.timing.timer - App.status.loadMusicMark) > 5000 / App.config.musicVolume
        App.status.loadMusicMark = System.timing.timer
        audio volume 1, get audio volume(1) - 1
        if get audio volume(1) < 1
          stop audio 1
          App.status.loadState = 4
          App.status.loadType = 0
        endif
      endif
    endif
    if App.status.loadState >= 3
      System_log("main.dbx", 2, "main", "  > Running update queue as main")
      for i = 0 to array count(_App_UpdateQueue())
        if System.status.gamePauseState <> 1 or _App_updateQueue(i).ignorePause
          result$ = App_callFunction(_App_updateQueue(i).functionName, "")
        endif
      next i
      System_log("main.dbx", 2, "main", "Begin Update: AdvLighting")
      updateMark as dword
      updateMark = hitimer()
      AdvLighting_Update()
      System.timing.alUpdate.last = hitimer() - updateMark
      inc System.timing.alUpdate.total, System.timing.alUpdate.last
      System_log("main.dbx", 2, "main", "End Update: AdvLighting," + str$(hitimer() - updateMark))
    endif
    if App.config.usePerfCap
      System_cpuSleep()
    endif
    if App.status.loadState >= 3
      text 30, 0, "fps: " + str$(screen fps()) + " loop: " + str$(System.timing.msPerLoop)
      text 30, 20, "loc: " + str$(MY_CHARACTER.baseData.posX, 2) + ", " + str$(MY_CHARACTER.baseData.posY, 2) + ", " + str$(MY_CHARACTER.baseData.posZ, 2)
      text 30, 40, ""
      text 30, 60, ""
      text 30, 80, ""
      text 30, 100, ""
      text 30, 120, ""
      text 30, 140, ""
      text 30, 160, ""
      text 30, 180, App.debug
    endif
    if App.status.loadState = 5
      App.status.loadState = 1
      App.status.loadType = 2
      App.status.loadStage = 0
      App_updateSplashScreen("- Initializing Level")
      d3d_box -10, -10, App.config.screenWidth + 10, App.config.screenHeight + 10, d3d_rgba(20, 20, 20, 255)
      tCount = array count(_App_splashScreenResource())
      for i = 0 to tCount
        paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
      next i
      pasteY = App.config.screenHeight
      if App.config.screenHeight > 1080
        pasteY = ((App.config.screenHeight - 1080) / 2) + 1080
      endif
      System_log("main.dbx", 1, "main", "splashResourceCount: " + str$(tCount))
      AdvLighting_Update()
      World_unloadScene()
      World_loadScene()
      App.status.loadStage = 3
      App_updateSplashScreen("- Finishing")
    endif
    inc System.timing.loopCount
    System.timing.delta = hitimer() - System.timing.loopMark
    System.timing.loopMark = hitimer()
    System_log("main.dbx", 2, "main", "End main loop.," + str$(System.timing.delta))
    System_log("main.dbx", 2, "main", "----------------------------")
  endif
endwhile
end
function _App_init()
  App.status.loadState = 1
  App.status.loadType = 1
  set bitmap format 21
  sync on
  sync rate 0
  hide mouse
  autocam off
  disable escapekey
  randomize timer()
  App.config.screenWidth = 0
  App.config.screenHeight = 0
  App.config.isWindowed = FALSE
  App.config.logLevel = 3
  App.status.debugModeIsActive = FALSE
  App.config.musicVolume = 30
  App.config.soundVolume = 60
  dim args() as keyValueData
  args$ = CL$()
  if args$ > ""
    array insert at bottom args()
    a$ = first token$(args$, " ")
    split string a$, "="
    args().key = get split word$(1)
    args().value = get split word$(2)
    repeat
      a$ = next token$(" ")
      if a$ > ""
        array insert at bottom args()
        split string a$, "="
        args().key = get split word$(1)
        args().value = get split word$(2)
      endif
    until a$ = ""
  endif
  for i = 0 to array count(args())
    select lower$(args(i).key)
      case "sw": App.config.screenWidth = intval(args(i).value) : endcase
      case "sh": App.config.screenHeight = intval(args(i).value) : endcase
      case "win": App.config.isWindowed = intval(args(i).value) : endcase
      case "log": App.config.logLevel = intval(args(i).value) : endcase
      case "cap": App.config.usePerfCap = intval(args(i).value) : endcase
    endselect
  next i
  if App.config.screenWidth = 0
    App.config.screenWidth = desktop width()
    App.config.screenHeight = desktop height()
  endif
  if App.config.screenWidth < 1024 then App.config.screenWidth = 1024
  if App.config.screenHeight < 768 then App.config.screenHeight = 768
  App.config.screenCenterX = App.config.screenWidth / 2
  App.config.screenCenterY = App.config.screenHeight / 2
  set display mode App.config.screenWidth, App.config.screenHeight, 32, 0, 2, 0
  if App.config.isWindowed
    set window on
    set window layout 0,0,4
    set window size App.config.screenWidth, App.config.screenHeight
    set window position (desktop width() - App.config.screenWidth) / 2, (desktop height() - App.config.screenHeight) / 2
  endif
  d3d_init
  d3d_color 255, 255, 255, 255
  d3d_font 1, "OpenSans-Regular", 40, 0, 0, 0 
  d3d_font 2, "OpenSans-Regular", 26, 0, 0, 0 
  d3d_font 3, "OpenSans-Regular", 14, 0, 0, 0 
  d3d_font 4, "OpenSans-Regular", 28, 1, 0, 0 
  d3d_font 5, "OpenSans-Regular", 15, 1, 0, 0 
  updateMark as dword
  updateMark = hitimer()
  gosub system_module_init
  gosub math_module_init
  gosub xml_module_init
  gosub sqlite_module_init
  gosub media_module_init
  gosub anim3d_module_init
  gosub fx_module_init
  gosub ui_module_init
    gosub dev_controls_module_init
  gosub controls_module_init
  gosub world_module_init
  gosub events_module_init
  gosub characters_module_init
  _App_sortUpdateQueue()
  System_log("main.dbx", 2, "main", "End module loading.," + str$(hitimer() - updateMark))
endfunction
function App_addUpdate(rName as string, rRequired as string, rPauseIgnore as boolean)
  array insert at bottom _App_updateList()
  _App_updateList().functionName = rName
  _App_updateList().required = rRequired
  _App_updateList().ignorePause = rPauseIgnore
  System_log("main.dbx", 2, "main", "Added "+ rName +" to update list. Requires: "+ rRequired)
endfunction
function App_addRequiredToUpdate(rName as string, rRequired as string)
  for i = 0 to array count(_App_updateList())
    if _App_updateList(i).functionName = rName
      if _App_updateList(i).required <> ""
        _App_updateList(i).required = _App_updateList(i).required + "," + rRequired
      else
        _App_updateList(i).required = rRequired
      endif
      exitfunction
    endif
  next i
endfunction
function _App_sortUpdateQueue()
  empty array _App_updateQueue()
  array index to top _App_updateList()
  while array index valid(_App_updateList())
    if _App_updateList().required = ""
      array insert at bottom _App_updateQueue()
      _App_updateQueue() = _App_updateList()
      array delete element _App_updateList()
      System_log("main.dbx", 2, "main", "Moved " + _App_UpdateQueue().functionName + " from list to queue.")
    else
      next array index _App_updateList()
    endif
  endwhile
  while array count(_App_updateList()) > -1
    array index to top _App_updateList()
    while array index valid(_App_updateList())
      split string _App_updateList().required, ","
      okCount = 0
      reqCount = split count()
      for r = 1 to reqCount
        req$ = get split word$(r)
        for c = 0 to array count(_App_updateQueue())
          if _App_updateQueue(c).functionName = req$
            inc okCount
          endif
        next c
      next r
      if okCount = reqCount
        array insert at bottom _App_UpdateQueue()
        _App_UpdateQueue() = _App_updateList()
        array delete element _App_updateList()
        System_log("main.dbx", 2, "main", "Moved " + _App_UpdateQueue().functionName + " from list to queue.")
      else
        next array index _App_updateList()
      endif
    endwhile
  endwhile
endfunction
function App_updateSplashScreen(rMessage as string)
  if App.status.loadStage > 0
    tCount = array count(_App_splashScreenResource())
    select App.status.loadType
      case 1: 
        fadeLoading as float
        tX as float
        if App.status.loadStage = 1
          fadeLoading = 255.0
          tMark = timer()
          while fadeLoading > 0.0
            d3d_box -10, -10, App.config.screenWidth, App.config.screenHeight, d3d_rgba(0, 0, 0, 255)
            for i = 0 to tCount
              paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
            next i
            fadeLoading = 255.0 - ((255.0 / 2000.0) * abs(timer() - tMark))
            d3d_box 0, 0, App.config.screenWidth, App.config.screenHeight, d3d_rgba(0, 0, 0, fadeLoading)
            if fadeLoading <= 0.0
              App.status.loadStage = 2
              exitfunction
            endif
            sync
          endwhile
        endif
        if App.status.loadStage = 2
          d3d_box -10, -10, App.config.screenWidth, App.config.screenHeight, d3d_rgba(0, 0, 0, 255)
          for i = 0 to tCount
            paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
          next i
          sync
        endif
        if App.status.loadStage = 3
          fadeLoading = 0.0
          tMark = timer()
          while fadeLoading < 255.0
            d3d_box -10, -10, App.config.screenWidth, App.config.screenHeight, d3d_rgba(0, 0, 0, 255)
            for i = 0 to tCount
              paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
            next i
            fadeLoading = 0.0 + ((255.0 / 2000.0) * abs(timer() - tMark))
            d3d_box 0, 0, App.config.screenWidth, App.config.screenHeight, d3d_rgba(0, 0, 0, fadeLoading)
            if fadeLoading >= 255.0
              App.status.loadStage = 0
              App.status.loadType = 0
              App.status.loadState = 2 
              exitfunction
            endif
            sync
          endwhile
        endif
      endcase
      case 2: 
        d3d_box -10, -10, App.config.screenWidth + 10, App.config.screenHeight + 10, d3d_rgba(20, 20, 20, 255)
        for i = 0 to tCount
          paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
        next i
        pasteY = App.config.screenHeight
        if App.config.screenHeight > 1080
          pasteY = ((App.config.screenHeight - 1080) / 2) + 1080
        endif
        if App.status.loadStage = 3
          App.status.loadStage = 0
          App.status.loadState = 3
          App.status.loadMusicMark = timer()
          exitfunction
        endif
      endcase
    endselect
  else
    empty array _App_splashScreenResource()
    tX = 0
    tY = 0
    tX2 = App.config.screenWidth
    tY2 = App.config.screenHeight
    select App.status.loadType
      case 1: 
        d3d_box tX, tY, tX2, tY2, d3d_rgba(0, 0, 0, 255)
        tImg = find free image()
        load image "resource/media/ui/banner-title-josh.png", tImg, 1
        array insert at bottom _App_splashScreenResource()
        _App_splashScreenResource().imgNum = tImg
        _App_splashScreenResource().pasteX = (tX2 / 2) - 246
        _App_splashScreenResource().pasteY = tY2 / 8
        paste image tImg, _App_splashScreenResource().pasteX, _App_splashScreenResource().pasteY, 1
        App.status.loadStage = 1
        sync
        sync
      endcase
      case 2:
        d3d_box tX - 10, tY - 10, tX2 + 10, tY2 + 10, d3d_rgba(20, 20, 20, 255)
        tImg = find free image()
        load image "resource/media/ui/bg-fs-loading.jpg", tImg, 1
        create bitmap 1, 1920, 1080
        paste image tImg, 0, 0
        create bitmap 2, App.config.screenWidth, App.config.screenHeight
        copy bitmap 1, 0, 0, 1920, 1080, 2 , 0, 0, App.config.screenWidth, App.config.screenHeight
        get image tImg, 0, 0, App.config.screenWidth, App.config.screenHeight
        set current bitmap 0
        delete bitmap 1
        delete bitmap 2
        if App.config.screenWidth > 1920
          tX = (App.config.screenWidth - 1920) / 2
          tX2 = tX + 1920
        endif
        if App.config.screenHeight > 1080
          tY = (App.config.screenHeight - 1080) / 2
          tY2 = tY + 1080
        endif
        array insert at bottom _App_splashScreenResource()
        _App_splashScreenResource().imgNum = tImg
        _App_splashScreenResource().pasteX = tX
        _App_splashScreenResource().pasteY = tY
        paste image tImg, _App_splashScreenResource().pasteX, _App_splashScreenResource().pasteY, 1
        load audio 1, "resource/media/audio/white_noise.ogg"
        play audio 1
        audio volume 1, App.config.musicVolume
        App.status.loadStage = 1
        sync
      endcase
    endselect
  endif
endfunction
function App_closeGame(rError as boolean)
  System_log("main.dbx", 255, "main", "Program end with code: " + str$(rError))
  if rError
    report error "Application has encountered an error. Check the log file for details. (Ignore reported line)", "Fatal Error"
  endif
  App.status.isRunning = FALSE
endfunction
type keyValueData
  key as string
  value as string
endtype
#CONSTANT TRUE 1
#CONSTANT FALSE 0
#CONSTANT NEWLINE chr$(13)+chr$(10)
#CONSTANT ENUM_KEY_ESC 1
#CONSTANT ENUM_KEY_F1 59
#CONSTANT ENUM_KEY_F2 60
#CONSTANT ENUM_KEY_F3 61
#CONSTANT ENUM_KEY_F4 62
#CONSTANT ENUM_KEY_F5 63
#CONSTANT ENUM_KEY_F6 64
#CONSTANT ENUM_KEY_F7 65
#CONSTANT ENUM_KEY_F8 66
#CONSTANT ENUM_KEY_F9 67
#CONSTANT ENUM_KEY_F10 68
#CONSTANT ENUM_KEY_F11 87
#CONSTANT ENUM_KEY_F12 88
#CONSTANT ENUM_KEY_PRINT 100
#CONSTANT ENUM_KEY_SCROLL 70
#CONSTANT ENUM_KEY_PAUSE 101
#CONSTANT ENUM_KEY_TILDE 41
#CONSTANT ENUM_KEY_1 2
#CONSTANT ENUM_KEY_2 3
#CONSTANT ENUM_KEY_3 4
#CONSTANT ENUM_KEY_4 5
#CONSTANT ENUM_KEY_5 6
#CONSTANT ENUM_KEY_6 7
#CONSTANT ENUM_KEY_7 8
#CONSTANT ENUM_KEY_8 9
#CONSTANT ENUM_KEY_9 10
#CONSTANT ENUM_KEY_0 11
#CONSTANT ENUM_KEY_DASH 12
#CONSTANT ENUM_KEY_EQUAL 13
#CONSTANT ENUM_KEY_BACKSPACE 14
#CONSTANT ENUM_KEY_TAB 15
#CONSTANT ENUM_KEY_Q 16
#CONSTANT ENUM_KEY_W 17
#CONSTANT ENUM_KEY_E 18
#CONSTANT ENUM_KEY_R 19
#CONSTANT ENUM_KEY_T 20
#CONSTANT ENUM_KEY_Y 21
#CONSTANT ENUM_KEY_U 22
#CONSTANT ENUM_KEY_I 23
#CONSTANT ENUM_KEY_O 24
#CONSTANT ENUM_KEY_P 25
#CONSTANT ENUM_KEY_BRACKETL 26
#CONSTANT ENUM_KEY_BRACKETR 27
#CONSTANT ENUM_KEY_BACKSLASH 43
#CONSTANT ENUM_KEY_CAPSLOCK 58
#CONSTANT ENUM_KEY_A 30
#CONSTANT ENUM_KEY_S 31
#CONSTANT ENUM_KEY_D 32
#CONSTANT ENUM_KEY_F 33
#CONSTANT ENUM_KEY_G 34
#CONSTANT ENUM_KEY_H 35
#CONSTANT ENUM_KEY_J 36
#CONSTANT ENUM_KEY_K 37
#CONSTANT ENUM_KEY_L 38
#CONSTANT ENUM_KEY_COLON 39
#CONSTANT ENUM_KEY_QUOTE 40
#CONSTANT ENUM_KEY_ENTER 28
#CONSTANT ENUM_KEY_SHIFTL 42
#CONSTANT ENUM_KEY_Z 44
#CONSTANT ENUM_KEY_X 45
#CONSTANT ENUM_KEY_C 46
#CONSTANT ENUM_KEY_V 47
#CONSTANT ENUM_KEY_B 48
#CONSTANT ENUM_KEY_N 49
#CONSTANT ENUM_KEY_M 50
#CONSTANT ENUM_KEY_COMMA 51
#CONSTANT ENUM_KEY_PERIOD 52
#CONSTANT ENUM_KEY_SLASH 53
#CONSTANT ENUM_KEY_SHIFTR 54
#CONSTANT ENUM_KEY_CTRLL 29
#CONSTANT ENUM_KEY_ALTL 56
#CONSTANT ENUM_KEY_SPACE 57
#CONSTANT ENUM_KEY_ALTR 102
#CONSTANT ENUM_KEY_CTRLR 103
#CONSTANT ENUM_KEY_INSERT 104
#CONSTANT ENUM_KEY_DELETE 105
#CONSTANT ENUM_KEY_HOME 106
#CONSTANT ENUM_KEY_END 107
#CONSTANT ENUM_KEY_PAGEUP 108
#CONSTANT ENUM_KEY_PAGEDOWN 109
#CONSTANT ENUM_KEY_ARROWUP 110
#CONSTANT ENUM_KEY_ARROWDOWN 111
#CONSTANT ENUM_KEY_ARROWLEFT 112
#CONSTANT ENUM_KEY_ARROWRIGHT 113
#CONSTANT ENUM_KEY_NUMLOCK 69
#CONSTANT ENUM_KEY_NUMDIV 114
#CONSTANT ENUM_KEY_NUMMUL 55
#CONSTANT ENUM_KEY_NUMSUB 74
#CONSTANT ENUM_KEY_NUMADD 78
#CONSTANT ENUM_KEY_NUMENTER 115
#CONSTANT ENUM_KEY_NUMDECIMAL 83
#CONSTANT ENUM_KEY_NUM0 82
#CONSTANT ENUM_KEY_NUM1 79
#CONSTANT ENUM_KEY_NUM2 80
#CONSTANT ENUM_KEY_NUM3 81
#CONSTANT ENUM_KEY_NUM4 75
#CONSTANT ENUM_KEY_NUM5 76
#CONSTANT ENUM_KEY_NUM6 77
#CONSTANT ENUM_KEY_NUM7 71
#CONSTANT ENUM_KEY_NUM8 72
#CONSTANT ENUM_KEY_NUM9 73
#CONSTANT ENUM_KEY_MOUSEL 116
#CONSTANT ENUM_KEY_MOUSER 117
function App_callFunction(rFunctionName as string, rArgs as string)
`NOTE: this is a workaround replacement for matrix1 call function name
`  there is an odd conflict between AdvLighting and the mat1 command which causes a graphical error.
  System_log("main.dbx", 2, "main", "Executing callback " + rFunctionName)
  err = TRUE
  returnStr$ = ""
  select rFunctionName
    case "Anim3d_updateActiveAnimations": Anim3d_updateActiveAnimations() : err = FALSE : endcase
    case "Anim3d_clearAppliedAnimationsDeferred": Anim3d_clearAppliedAnimationsDeferred(intval(rArgs)) : err = FALSE : endcase
    case "Characters_updateCharacterStates": Characters_updateCharacterStates() : err = FALSE : endcase
    case "CharacterEntity_addJump": CharacterEntity_addJump(rArgs) : err = FALSE : endcase
    case "CharacterEntity_resetLocomotion": CharacterEntity_resetLocomotion(intval(rArgs)) : err = FALSE : endcase
    case "CharacterEntity_setToDead" : CharacterEntity_setToDead(intval(rArgs)) : err = FALSE : endcase
`    `controls.dbx
    case "Camera_updatePhysicalState": Camera_updatePhysicalState() : err = FALSE : endcase
    case "Controls_getGameplayInput": Controls_getGameplayInput() : err = FALSE : endcase
    case "Controls_getDevInput": Controls_getDevInput() : err = FALSE : endcase
    `events
    case "Events_updateInteractableTarget": Events_updateInteractableTarget() : err = FALSE : endcase
    case "Events_setInteractableTargetState": Events_setInteractableTargetState(rArgs) : err = FALSE : endcase
    case "Events_setInteractableCollisionState": Events_setInteractableCollisionState(rArgs) : err = FALSE : endcase
    `math.dbx
    `TODO: add arc, remove arc
    case "Math3d_updateArcs": Math3d_updateArcs() : err = FALSE : endcase
    `media.dbx
    case "Media_updateBoundObjects": Media_updateBoundObjects() : err = FALSE : endcase
    `system.dbx
    case "System_updateIntervals": System_updateIntervals() : err = FALSE : endcase
    case "System_updateMetrics": System_updateMetrics() : err = FALSE : endcase
    case "System_cpuSleep": System_cpuSleep() : err = FALSE : endcase
    case "System_getHardwareInput": System_getHardwareInput() : err = FALSE : endcase
    case "System_getFileFromDialog": System_getFileFromDialog(rArgs) : err = FALSE : endcase
    `user_interface.dba
    case "UI_updatePageFlow": UI_updatePageFlow() : err = FALSE : endcase
    case "UI_getInterfaceInput": UI_getInterfaceInput() : err = FALSE : endcase
    case "UI_element_hide": UI_element_hide(rArgs) : err = FALSE : endcase
    `UI controllers
    case "UI_controller_common_doHoverByType": UI_controller_common_doHoverByType(rArgs) : err = FALSE : endcase
    case "UI_controller_common_doUnHoverByType": UI_controller_common_doUnHoverByType(rArgs) : err = FALSE : endcase
    case "UI_controller_common_doPressByType": UI_controller_common_doPressByType(rArgs) : err = FALSE : endcase
    case "UI_controller_common_doReleaseByType": UI_controller_common_doReleaseByType(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_resumeGame": UI_controller_titleMenu_resumeGame(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_newGame": UI_controller_titleMenu_newGame(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_newGameCreate": UI_controller_titleMenu_newGameCreate(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_newGameCancel": UI_controller_titleMenu_newGameCancel(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_loadGame": UI_controller_titleMenu_loadGame(rArgs) : err = FALSE : endcase
    case "UI_controller_titleMenu_quitGame": UI_controller_titleMenu_quitGame(rArgs) : err = FALSE : endcase
    `world.dbx
    case "World_updateEnvironment": World_updateEnvironment() : err = FALSE : endcase
    case "World_updateWeather": World_updateWeather(intval(rArgs)) : err = FALSE : endcase
  endselect
  if err = TRUE
    System_log("main.dbx", 4, "error", "ERROR: Callback function not registered: " + rFunctionName)
    App_closeGame(TRUE)
  endif
endfunction returnStr$
`==================================================================================================================================
system_module_init:
  if SYSTEM_MODULE_LOADED = FALSE
    `Declare System -----------------------------------------------------------
    type System_type_dllData
      gdi32 as integer
      urlmon as integer
      user32 as integer
      comdlg32 as integer
    endtype
    type System_type_resourceData
      dll as System_type_dllData
      hwnd as dword
    endtype
    type System_type_timingDetail
      last as integer
      total as integer
      avg as integer
    endtype
    type System_type_timingData
      started as integer
      timer as integer
      syncMark as dword
      loopMark as dword
      perSecondMark as integer
      delta as integer
      loopCount as integer
      loopsPerSec as integer
      msPerLoop as integer
      updateMark as dword
      pauseElapsed as integer
      pauseMark as integer
      pauseHold as byte 
      pauseHoldIdSystem as byte
      pauseHoldIdUI as byte
      aiUpdate as System_type_timingDetail
      charUpdate as System_type_timingDetail
      guiUpdate as System_type_timingDetail
      alUpdate as System_type_timingDetail
      animUpdate as System_type_timingDetail
    endtype
    type System_type_statusData
      gamePauseState as byte 
      sysTotalMemory as integer
      sysUsedMemory as integer
      gpuTotalMemory as integer
      gpuUsedMemory as integer
    endtype
    type System_Type_logData
      fileNumber as byte
      includeLevel as byte
      includeChannels as string
    endtype
    type System_type_inputData
      isDown as boolean
      wasDown as boolean
    endtype
    type System_type_mouseInputData
      leftBtn as System_type_inputData
      rightBtn as System_type_inputData
      moveX as float
      moveY as float
      moveZ as float
      posX as integer
      posY as integer
    endtype
    type System_type_intervalData
      id as string
      mark as integer
      interval as integer
      doneTicks as integer
      maxTicks as integer
      callback as string
      args as string
    endtype
    type STATIC_CLASS_System
      _log as System_Type_logData
      resource as System_type_resourceData
      timing as System_type_timingData
      status as System_type_statusData
      mouseInput as System_type_mouseInputData
      appRoot as string
    endtype
    `private data -----------------------------------------------------------------
    dim _System_timedIntervals() as System_type_intervalData
    `public data ------------------------------------------------------------------
    dim System_keyInput(117) as System_type_inputData
    `Init -------------------------------------------------------------------------
    `==================================
    GLOBAL System as STATIC_CLASS_System
    `==================================
    _System_init()
    SYSTEM_MODULE_LOADED = TRUE
    System_log("system.dbx", 2, "main", "End module load: system.")
  endif
return
`==================================================================================================================================
function _System_init()
  System_log("system.dbx", 2, "main", "Begin module load: system.")
  System.appRoot = dir exe()
  System.timing.started = timer()
  System.timing.pauseHoldIdSystem = 1
  System.timing.pauseHoldIdUI = 2
  `load system dlls
  System.resource.dll.user32 = find free dll()
  load dll "user32", System.resource.dll.user32
  System.resource.dll.gdi32 = find free dll()
  load dll "gdi32", System.resource.dll.gdi32
  System.resource.dll.urlmon = find free dll()
  load dll "urlmon", System.resource.dll.urlmon
  System.resource.dll.comdlg32 = find free dll()
  load dll "comdlg32", System.resource.dll.comdlg32
  System.resource.hwnd = call dll(System.resource.dll.user32, "GetActiveWindow")
  `install fonts
  System_installFont("OpenSans-Regular", "media/ui/fonts/open-sans/OpenSans-Regular.ttf")
  `init log file
  System._log.includeChannels = ",error,"
  System._log.includeLevel = App.config.logLevel
  System._log.fileNumber = find free file()
  if file exist("log/log.txt") then delete file "log/log.txt"
  open to write System._log.fileNumber, "log/log.txt"
  write string System._log.fileNumber, "Runtime   | Timestamp | File            | Level | Channel    | Log"
  write string System._log.fileNumber, "=================================================================="
  System.timing.perSecondMark = timer()
  System.timing.syncMark = hitimer()
  `register updates
  App_addUpdate("System_updateIntervals", "", FALSE)
  App_addUpdate("System_updateMetrics", "", TRUE)
endfunction
function System_updateMetrics()
  System_log("system.dbx", 2, "main", "Begin Update: System_updateMetrics")
  updateMark as dword
  updateMark = hitimer()
  `update timing metrics
  if abs(timer() - System.timing.perSecondMark) > 1000
    System_log("system.dbx", 1, "main", "update per second data")
    System.timing.loopsPerSec = System.timing.loopCount
    System.timing.msPerLoop = System.timing.delta
    if System.timing.loopCount > 0
      System.timing.aiUpdate.avg = System.timing.aiUpdate.total / System.timing.loopCount
      System.timing.aiUpdate.total = 0
      System.timing.alUpdate.avg = System.timing.alUpdate.total / System.timing.loopCount
      System.timing.alUpdate.total = 0
      System.timing.animUpdate.avg = System.timing.animUpdate.total / System.timing.loopCount
      System.timing.animUpdate.total = 0
      System.timing.charUpdate.avg = System.timing.charUpdate.total / System.timing.loopCount
      System.timing.charUpdate.total = 0
      System.timing.guiUpdate.avg = System.timing.guiUpdate.total / System.timing.loopCount
      System.timing.guiUpdate.total = 0
    endif
    System.timing.loopCount = 0
    System.timing.perSecondMark = timer()
    System.status.sysTotalMemory = system tmem available()
    System.status.sysUsedMemory = System.status.sysTotalMemory - system smem available()
  endif
  `update pause timing
  oldPauseState = System.status.gamePauseState
  System_log("system.dbx", 1, "main", "gamePauseState: " + str$(System.status.gamePauseState))
  System_log("system.dbx", 1, "main", "pauseHold: " + str$(System.timing.pauseHold))
  if System.timing.pauseHold = 0
    System.status.gamePauseState = 0
  else
    System.status.gamePauseState = 1
    if oldPauseState = 0
      `new pause - get start stamp
      System.timing.pauseMark = timer()
    else
      `continued pause - get elapsed
      System.timing.pauseElapsed = abs(timer() - System.timing.pauseMark)
    endif
  endif
  if oldPauseState = 2
    `pause ended and elapsed time has been applied, clear down
    System.status.gamePauseState = 0
    System.timing.pauseMark = 0
    System.timing.pauseElapsed = 0
  endif
  if System.status.gamePauseState = 0 and oldPauseState = 1
    `pause ended, resume all updates but keep the elapsed time available for paused updates to adjust against elapsed times.
    System.status.gamePauseState = 2
    System.mouseInput.moveX = 0.0
    System.mouseInput.moveY = 0.0
    System.mouseInput.moveZ = 0.0
  endif
  System_log("system.dbx", 2, "main", "End Update: System_updateMetrics," + str$(hitimer() - updateMark))
endfunction
function System_cpuSleep()
  System_log("system.dbx", 2, "main", "Begin Update: System_performanceSleep")
  updateMark as dword
  updateMark = hitimer()
  nice sleep 10
  System_log("system.dbx", 2, "main", "End Update: System_performanceSleep," + str$(hitimer() - updateMark))
endfunction
function System_log(sourceFile as string, logLevel as byte, channel as string, content as string)
  if logLevel >= System._log.includeLevel and file open(System._log.fileNumber)
    if System._log.includeChannels = "*" or instr(System._log.includeChannels, "," + channel + ",") > 0
      write string System._log.fileNumber, padright$(System_getRuntime(), 9) + " | " + padright$("", 9) + " | " + padright$(fast left$(sourceFile, 15), 15) + " | " + padright$(str$(logLevel), 5) + " | " + padright$(fast left$(channel, 10), 10) + " | " + content
    endif
  endif
endfunction
function System_getRuntime()
  e$ = ""
  h = 0
  m = 0
  s = 0
  t = timer() - System.timing.started
  e$ = str$(t)
endfunction e$
function System_getHardwareInput()
  System_log("system.dbx", 2, "main", "Begin Update: System_getHardwareInput")
  updateMark as dword
  updateMark = hitimer(1000000)
  `get keyboard
  for i = 1 to 115
    System_keyInput(i).wasDown = System_keyInput(i).isDown
    System_keyInput(i).isDown = keystate(i)
  next i
  System_keyInput(ENUM_KEY_PRINT).isDown = get key state(0x2C) < 0
  System_keyInput(ENUM_KEY_PAUSE).isDown = get key state(0x13) < 0
  System_keyInput(ENUM_KEY_ALTR).isDown = get key state(0xA5) < 0
  System_keyInput(ENUM_KEY_CTRLR).isDown = get key state(0xA3) < 0
  System_keyInput(ENUM_KEY_INSERT).isDown = get key state(0x2D) < 0
  System_keyInput(ENUM_KEY_DELETE).isDown = get key state(0x2E) < 0
  System_keyInput(ENUM_KEY_HOME).isDown = get key state(0x24) < 0
  System_keyInput(ENUM_KEY_END).isDown = get key state(0x23) < 0
  System_keyInput(ENUM_KEY_PAGEUP).isDown = get key state(0x21) < 0
  System_keyInput(ENUM_KEY_PAGEDOWN).isDown = get key state(0x22) < 0
  System_keyInput(ENUM_KEY_ARROWUP).isDown = get key state(0x26) < 0
  System_keyInput(ENUM_KEY_ARROWDOWN).isDown = get key state(0x28) < 0
  System_keyInput(ENUM_KEY_ARROWLEFT).isDown = get key state(0x25) < 0
  System_keyInput(ENUM_KEY_ARROWRIGHT).isDown = get key state(0x27) < 0
  System_keyInput(ENUM_KEY_NUMDIV).isDown = get key state(0x6F) < 0
  `get mouse
  System.mouseInput.leftBtn.wasDown = System.mouseInput.leftBtn.isDown
  System.mouseInput.leftBtn.isDown = 0
  System_keyInput(ENUM_KEY_MOUSEL).wasDown = System.mouseInput.leftBtn.wasDown
  System.mouseInput.rightBtn.wasDown = System.mouseInput.rightBtn.isDown
  System.mouseInput.rightBtn.isDown = 0
  System_keyInput(ENUM_KEY_MOUSER).wasDown = System.mouseInput.rightBtn.wasDown
  tMouseClick = mouseclick()
  if tMouseClick = 1 or tMouseClick = 3 then System.mouseInput.leftBtn.isDown = 1
  if tMouseClick = 2 or tMouseClick = 3 then System.mouseInput.rightBtn.isDown = 1
  System_keyInput(ENUM_KEY_MOUSEL).isDown = System.mouseInput.leftBtn.isDown
  System_keyInput(ENUM_KEY_MOUSER).isDown = System.mouseInput.rightBtn.isDown
  System.mouseInput.moveX = mouseMoveX()
  System.mouseInput.moveY = mouseMoveY()
  System.mouseInput.moveZ = mouseMoveZ()
  System.mouseInput.posX = mouseX()
  System.mouseInput.posY = mouseY()
  System_log("system.dbx", 2, "main", "End Update: System_getHardwareInput," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function System_setInterval(rCallback as string, rArgs as string, rTicks as integer, rInterval as integer)
  array insert at bottom _System_timedIntervals()
  _System_timedIntervals().id = generate guid$()
  _System_timedIntervals().mark = timer()
  _System_timedIntervals().interval = rInterval
  _System_timedIntervals().doneTicks = 0
  _System_timedIntervals().maxTicks = rTicks
  _System_timedIntervals().callback = rCallback
  _System_timedIntervals().args = rArgs
  tID$ = _System_timedIntervals().id
endfunction tID$
function System_clearInterval(rID as string)
  for i = 0 to array count(_System_timedIntervals())
    if _System_timedIntervals(i).id = rID
      array delete element _System_timedIntervals(), i
      exitfunction
    endif
  next i
endfunction
function System_clearAllIntervals()
  empty array _System_timedIntervals()
endfunction
function System_getIntervalByCallback(rCallback as string)
  for i = 0 to array count(_System_timedIntervals())
    if _System_timedIntervals(i).callback = rCallback
      exitfunction i
    endif
  next i
endfunction -1
function System_updateIntervals()
  System_log("system.dbx", 2, "main", "Begin Update: System_updateIntervals")
  updateMark as dword
  updateMark = hitimer(1000000)
  GCcount = 0
  GCindex = -1
  `process ticks
  tArrCount = array count(_System_timedIntervals())
  if tArrCount > -1
    for i = 0 to tArrCount
      now = timer()
      if now - (_System_timedIntervals(i).mark + System.timing.pauseElapsed) >= _System_timedIntervals(i).interval
        _System_timedIntervals(i).mark = now
        System_log("system.dbx", 1, "main", "Execute Interval: " + _System_timedIntervals(i).callback)
        App_callFunction(_System_timedIntervals(i).callback, _System_timedIntervals(i).args)
        if _System_timedIntervals(i).maxTicks > -1
          inc _System_timedIntervals(i).doneTicks
          if _System_timedIntervals(i).doneTicks >= _System_timedIntervals(i).maxTicks
            _System_timedIntervals(i).id = "GC_THIS"
            inc GCcount
            GCindex = i
          endif
        endif
      endif
    next i
    `garbage collect
    if GCcount > 0
      if GCcount > 1
        for c = 1 to GCcount
          for i = 0 to array count(_System_timedIntervals())
            if _System_timedIntervals(i).id = "GC_THIS"
              array delete element _System_timedIntervals(), i
              exit
            endif
          next i
        next c
      else
        array delete element _System_timedIntervals(), GCindex
      endif
    endif
  endif
  System_log("system.dbx", 2, "main", "End Update: System_updateTimedIntervals," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function System_installFont(rFont as string, rPath as string)
  perform checklist for fonts
  for i = 1 to checklist quantity()
    if fast lower$(checklist string$(i)) = fast lower$(rFont)
      exitfunction
    endif
  next i
  null = call dll(System.resource.dll.gdi32, "AddFontResourceA", rPath)
endfunction
function System_removeFont(rPath as string)
  null = call dll(System.resource.dll.gdi32, "RemoveFontResourceA", rPath)
endfunction
function System_getFileFromDialog(rArgs as string)
  show mouse
  System.status.gamePauseState = 1
  System.timing.pauseHold = System.timing.pauseHold || System.timing.pauseHoldIdSystem
  split string rArgs, ","
  rDir as string
  rTitle as string
  rExtension as string
  rMode as string
  rDir = get split word$(1)
  rTitle = get split word$(2)
  rExtension = get split word$(3)
  rMode = get split word$(4)
  filenameBlock as integer
  filenameBlock = find free memblock()
  make memblock filenameBlock, 76
  filenamePtr as dword
  filenamePtr = get memblock ptr(filenameBlock)
  tFilter as string
  tSize as integer
  tFileBuffer as string
  tFileBufferPtr as dword
  tFlags as dword
  tFilter = "Files|*"+ rExtension +"||"
  rDir = rDir + "|"
  rTitle = rTitle + "|"
  rExtension = rExtension + "|"
  tFileBuffer = "|" + space$(255) + "|"
  tFileBufferPtr = System_getStringPtr(tFileBuffer)
  tFlags = 0x00001000 || 0x00000004 || 0x00000002
  tSize = 0
  write memblock dword filenameBlock, 0, 76
  write memblock dword filenameBlock, 4, System.resource.hwnd
  write memblock dword filenameBlock, 12, System_getStringPtr(tFilter)
  write memblock dword filenameBlock, 24, 1
  write memblock dword filenameBlock, 28, tFileBufferPtr
  write memblock dword filenameBlock, 32, 256
  write memblock dword filenameBlock, 44, System_getStringPtr(rDir)
  write memblock dword filenameBlock, 48, System_getStringPtr(rTitle)
  write memblock dword filenameBlock, 52, tFlags
  write memblock dword filenameBlock, 60, System_getStringPtr(rExtension)
  res as dword
  res = call dll (System.resource.dll.comdlg32, "Get" + rMode + "FileNameA", filenamePtr)
  if res <> 0
    res$ = trim$(System_getString(tFileBufferPtr, 256))
  else
    res$ = call dll(System.resource.dll.comdlg32, "CommDlgExtendedError")
    select res
      case 0xFFFF : res$ = "Error: The dialog box could not be created. The common dialog box function's call to the DialogBox function failed. For example, this error occurs if the common dialog box call specifies an invalid window handle." : endcase
      case 0x0006 : res$ = "Error: The common dialog box function failed to find a specified resource." : endcase
      case 0x0004 : res$ = "Error: The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a corresponding instance handle." : endcase
      case 0x0002 : res$ = "Error: The common dialog box function failed during initialization. This error often occurs when sufficient memory is not available." : endcase
      case 0x000B : res$ = "Error: The ENABLEHOOK flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a pointer to a corresponding hook procedure." : endcase
      case 0x0008 : res$ = "Error: The common dialog box function failed to lock a specified resource." : endcase
      case 0x0003 : res$ = "Error: The ENABLETEMPLATE flag was set in the Flags member of the initialization structure for the corresponding common dialog box, but you failed to provide a corresponding template." : endcase
      case 0x0007 : res$ = "Error: The common dialog box function failed to load a specified string." : endcase
      case 0x0001 : res$ = "Error: The lStructSize member of the initialization structure for the corresponding common dialog box is invalid." : endcase
      case 0x0005 : res$ = "Error: The common dialog box function failed to load a specified string." : endcase
      case 0x3003 : res$ = "Error: The buffer pointed to by the lpstrFile member of the OPENFILENAME structure is too small for the file name specified by the user. The first two bytes of the lpstrFile buffer contain an integer value specifying the size, in TCHARs, required to receive the full name." : endcase
      case 0x0009 : res$ = "Error: The common dialog box function was unable to allocate memory for internal structures." : endcase
      case 0x3002 : res$ = "Error: A file name is invalid." : endcase
      case 0x000A : res$ = "Error: The common dialog box function was unable to lock the memory associated with a handle." : endcase
      case 0x3001 : res$ = "Error: An attempt to subclass a list box failed because sufficient memory was not available." : endcase
      case default : res$ = "Error: An unknown error occured." : endcase
    endselect
  endif
  delete memblock filenameBlock
  res$ = replace all$(res$, "\", "/")
  System.timing.pauseHold = System.timing.pauseHold ~~ System.timing.pauseHoldIdSystem
endfunction res$
function System_getStringPtr(rString as string)
  tBlock as integer
  tBlockPtr as dword
  tBlock = find free memblock()
  tLen = fast len(rString)
  make memblock tBlock, tLen
  tChar as byte
  for i = 1 to tLen
    if mid$(rString, i) = "|"
      tChar = 0
    else
      tChar = asc(mid$(rString, i))
    endif
    write memblock byte tBlock, (i - 1), tChar
  next i
  tBlockPtr = get memblock ptr(tBlock)
  resPtr as dword
  resPtr = make memory(tLen)
  copy memory resPtr, tBlockPtr, tLen
  delete memblock tBlock
endfunction resPtr
function System_getString(rPtr as dword, rSize as integer)
  tBlock as integer
  tBlockPtr as dword
  tBlock = find free memblock()
  make memblock tBlock, rSize
  tBlockPtr = get memblock ptr(tBlock)
  copy memory tBlockPtr, rPtr, rSize
  res as string
  for i = 1 to rSize
    res$ = res$ + Chr$(memblock byte(tBlock, i - 1))
  next i
  delete memblock tBlock
endfunction res$
math_module_init:
  System_log("math.dbx", 2, "main", "Begin module load: math.")
  App_updateSplashScreen("- Maths")
  `Declare Math3d -----------------------------------------------------------
  type Math3d_type_vector3Data
    vx as float
    vy as float
    vz as float
  endtype
  type Math3d_type_vector4Data
    vx as float
    vy as float
    vz as float
    vw as float
  endtype
  type Math3d_type_matrix3Data
    m00 as float
    m01 as float
    m02 as float
    m10 as float
    m11 as float
    m12 as float
    m20 as float
    m21 as float
    m22 as float
  endtype
  type Math3d_type_physicsData
    gravity as float
    arcMassRate as float
    arcAcceleration as float
  endtype
  type Math3d_type_arcData
    objectNumber as integer
    velocity as float
    tilt as float
    pan as float
    ix as float
    iy as float
    iz as float
    x as float
    y as float
    z as float
    relMass as float
    startTime as integer
  endtype
  type STATIC_CLASS_Math3d
    vectorLength as integer
    physics as Math3d_type_physicsData
    arcResult as Math3d_type_vector4Data
  endtype
  `private data -------------------------------------------------------------
  dim _Math3d_arcs() as Math3d_type_arcData
    #CONSTANT THIS_ARC3D _Math3d_arcs(this)
  `public data --------------------------------------------------------------
  `==========================================================================================================================
  `Declare Math2d -----------------------------------------------------------
  `private data -------------------------------------------------------------
  `public data --------------------------------------------------------------
  `Init ---------------------------------------------------------------------
  `==================================
  GLOBAL Math3d as STATIC_CLASS_Math3d
  `==================================
  Math3d.vectorLength = find free vector()
  null = make vector3(Math3d.vectorLength)
  Math3d.physics.gravity = 3.0
  Math3d.physics.arcMassRate = 0.005
  Math3d.physics.arcAcceleration = 600.0
  Math3d.arcResult.vw = -1.0
  App_addUpdate("Math3d_updateArcs", "", FALSE)
  `Finish ---------------------------------------------------------------------
  System_log("math.dbx", 2, "main", "End module load: math.")
return
function Math3d_addArc(rObjectNumber as integer, rVel as float, rTilt as float, rPan as float, rMass as float)
  array insert at top _Math3d_arcs()
  _Math3d_arcs().objectNumber = rObjectNumber
  _Math3d_arcs().velocity = rVel
  _Math3d_arcs().tilt = rTilt
  _Math3d_arcs().pan = rPan
  _Math3d_arcs().ix = object position x(rObjectNumber)
  _Math3d_arcs().iy = object position y(rObjectNumber)
  _Math3d_arcs().iz = object position z(rObjectNumber)
  _Math3d_arcs().x = _Math3d_arcs().ix
  _Math3d_arcs().y = _Math3d_arcs().iy
  _Math3d_arcs().z = _Math3d_arcs().iz
  _Math3d_arcs().relMass = rMass 
  _Math3d_arcs().startTime = timer()
  System_log("math.dbx", 2, "main", "> Created new arc: " + str$(rObjectNumber) + ", " + str$(rVel) + ", " + str$(rTilt) + ", " + str$(rPan) + ", "+ str$(rMass))
endfunction 
function Math3d_removeArc(rObjectNumber as integer)
  for this = 0 to array count(_Math3d_arcs())
    if THIS_ARC3D.objectNumber = rObjectNumber
      array delete element _Math3d_arcs(), this
      exitfunction
    endif
  next this
endfunction
function Math3d_removeAllArcs()
  empty array _Math3d_arcs()
endfunction
function Math3d_getArcPositionByObjectNumber(rObjectNumber as integer)
  Math3d.arcResult.vx = 0.0
  Math3d.arcResult.vy = 0.0
  Math3d.arcResult.vz = 0.0
  Math3d.arcResult.vw = -1
  for this = 0 to array count(_Math3d_arcs())
    if THIS_ARC3D.objectNumber = rObjectNumber
      Math3d.arcResult.vx = THIS_ARC3D.x
      Math3d.arcResult.vy = THIS_ARC3D.y
      Math3d.arcResult.vz = THIS_ARC3D.z
      Math3d.arcResult.vw = this
      exitfunction
    endif
  next this
  System_log("math.dbx", 3, "error", "WARN: Arc not found for requested object in Math3d_getArcPositionByObjectNumber("+str$(rObjectNumber)+")")
endfunction
function Math3d_updateArcs()
  System_log("math.dbx", 2, "main", "Begin Update: Math3d_updateArcs")
  updateMark as dword
  updateMark = hitimer()
  GCcount = 0
  GCindex = -1
  tArrCount = array count (_Math3d_arcs())
  System_log("math.dbx", 1, "main", "handling " + str$(tArrCount + 1) + " arcs")
  if tArrCount > -1
    for this = 0 to tArrCount
      if THIS_ARC3D.objectNumber > 0
        `get vectored velocity
        d# = THIS_ARC3D.velocity * cos(THIS_ARC3D.tilt)
        vy# = THIS_ARC3D.velocity * sin(THIS_ARC3D.tilt)
        vx# = d# * sin(THIS_ARC3D.pan)
        vz# = d# * cos(THIS_ARC3D.pan)
        `get elapsed time in seconds, adjust for pause
        inc THIS_ARC3D.startTime, System.timing.pauseElapsed
        elapsed# = abs(timer() - THIS_ARC3D.startTime) / 1000.0
        `get current position
        THIS_ARC3D.relMass = THIS_ARC3D.relMass + (Math3d.physics.arcMassRate * elapsed#)
        THIS_ARC3D.x = THIS_ARC3D.ix + vx# * elapsed# * THIS_ARC3D.relMass
        System_log("math.dbx", 1, "jump", "  THIS_ARC3D.x = THIS_ARC3D.ix + vx# * elapsed# * THIS_ARC3D.relMass")
        System_log("math.dbx", 1, "jump", "  " + str$(THIS_ARC3D.x) + " = " + str$(THIS_ARC3D.ix) + " + " + str$(vx#) + " * " + str$(elapsed#) + " * " + str$(THIS_ARC3D.relMass))
        THIS_ARC3D.y = THIS_ARC3D.iy + (vy# * elapsed#) - (0.5 * Math3d.physics.arcAcceleration * elapsed# * elapsed#) * Math3d.physics.gravity * THIS_ARC3D.relMass
        THIS_ARC3D.z = THIS_ARC3D.iz + vz# * elapsed# * THIS_ARC3D.relMass
        System_log("math.dbx", 1, "jump", "  new arc pos: " + str$(THIS_ARC3D.x, 2) +","+str$(THIS_ARC3D.y, 2)+","+str$(THIS_ARC3D.z, 2))
      else
        inc GCcount
        GCindex = this
      endif
    next this
    `garbage collect
    if GCcount > 0
      if GCcount > 1
        for c = 1 to GCcount
          for this = 0 to array count(_Math3d_arcs())
            if THIS_ARC3D.objectNumber < 1
              array delete element _Math3d_arcs(), this
              exit
            endif
          next this
        next c
      else
        array delete element _Math3d_arcs(), GCindex
      endif
    endif
  endif
  System_log("math.dbx", 2, "main", "End Update: Math3d_updateArcs," + str$(hitimer() - updateMark))
endfunction
function Math3d_getDistanceBetweenObjects(rObjectNum1 as integer, rObjectNum2 as integer)
  a# = abs(object position x(rObjectNum1) - object position x(rObjectNum2))
  b# = abs(object position y(rObjectNum1) - object position y(rObjectNum2))
  c# = abs(object position z(rObjectNum1) - object position z(rObjectNum2))
  tdist# = sqrt((a# * a#) + (b# * b#) + (c# * c#))
endfunction tdist#
function Math3d_getDistanceBetweenPoints(x1 as float, y1 as float, z1 as float, x2 as float, y2 as float, z2 as float)
  a# = abs(x1-x2)
  b# = abs(y1-y2)
  c# = abs(z1-z2)
  tdist# = sqrt((a#*a#)+(b#*b#)+(c#*c#))
endfunction tdist#
function Math3d_getVectorLength(x1 as float, y1 as float, z1 as float, x2 as float, y2 as float, z2 as float)
  set vector3 Math3d.vectorLength, x1 - x2, y1 - y2, z1 - z2
  tDist# = length vector3(Math3d.vectorLength)
endfunction tDist#
function Math3d_isObjectInBox(rObjectNum as integer, x1 as float, y1 as float, z1 as float, x2 as float, y2 as float, z2 as float)
  ox# = object position x(rObjectNum)
  oy# = object position y(rObjectNum)
  oz# = object position z(rObjectNum)
  if ox# >= x1
    if ox# <= x2
      if oy# >= y1
        if oy# <= y2
          if oz# >= z1
            if oz# <= z2
              exitfunction TRUE
            endif
          endif
        endif
      endif
    endif
  endif
endfunction FALSE
function Math3d_isPointInBox(ox as float, oy as float, oz as float, x1 as float, y1 as float, z1 as float, x2 as float, y2 as float, z2 as float)
  if ox >= x1
    if ox <= x2
      if oy >= y1
        if oy <= y2
          if oz >= z1
            if oz <= z2
              exitfunction TRUE
            endif
          endif
        endif
      endif
    endif
  endif
endfunction FALSE
`====================================================================================================================================================
function Math2d_getDistanceBetweenPoints(x1 as integer, y1 as integer, x2 as integer, y2 as integer)
  a# = abs(x1 - x2)
  b# = abs(y1 - y2)
  tdist# = sqrt((a# * a#) + (b# * b#))
endfunction tdist#
function Math2d_isPointInBox(px as integer, py as integer, x1 as integer, y1 as integer, x2 as integer, y2 as integer)
  if px >= x1
    if px <= x2
      if py >= y1
        if py <= y2
          exitfunction TRUE
        endif
      endif
    endif
  endif
endfunction FALSE
function Math2d_getCompassHeading(facing as float)
  if facing >= 337.5 or facing < 22.5 then exitfunction "N"
  if facing >= 22.5 or facing < 67.5 then exitfunction "NE"
  if facing >= 67.5 or facing < 112.5 then exitfunction "E"
  if facing >= 112.5 or facing < 157.5 then exitfunction "SE"
  if facing >= 157.5 or facing < 202.5 then exitfunction "S"
  if facing >= 202.5 or facing < 247.5 then exitfunction "SW"
  if facing >= 247.5 or facing < 292.5 then exitfunction "W"
  if facing >= 292.5 or facing < 337.5 then exitfunction "NW"
endfunction "ERR"
`====================================================================================================================================================
function Math_getByte(rByte as integer, rData as integer)
    byteVal = (rData >> (rByte * 8)) && 0xff
endfunction byteVal
function Math_setByte(rByte as integer, rData as integer, rVal as integer)
    rData = rData || (rVal << (rByte * 8))
endfunction rData
xml_module_init:
  if XML_MODULE_LOADED = FALSE
    System_log("xml.dbx", 2, "main", "Begin module load: xml.")
    `Declare XML -----------------------------------------------------------
    type XML_elementData
      tagName as string
      value as string
      isOpen as boolean
      parent as integer
    endtype
    type XML_attributeData
      elementIndex as integer
      attribute as string
      value as string
    endtype
    `private data -------------------------------------------------------------
    dim _XML_attributes() as XML_attributeData
    `public data --------------------------------------------------------------
    dim XML_elements() as XML_elementData
    `Init ---------------------------------------------------------------------
    `==================================
    `==================================
    _XML_init()
    XML_MODULE_LOADED = TRUE
    System_log("xml.dbx", 2, "main", "End module load: xml.")
  endif
return
function _XML_init()
endfunction
function XML_loadFile(rFilename as string)
  empty array XML_elements()
  empty array _XML_attributes()
  if file exist(rFilename)
    System_log("xml.dbx", 2, "xml", "Loading file: " + rFilename)
    tFileNum = find free file()
    open to read tFileNum, rFilename
    parseMode as string
    parseMode = "get tag"
    while file end(tFileNum) = FALSE
      `get a line
      tLine as string
      read string tFileNum, tLine
      tLine = trim$(tLine)
      System_log("xml.dbx", 1, "xml", "Parsing data: " + tLine)
      startPos = 1
      cPos = 0
      EOL = FALSE
      `parse the line
      while EOL = FALSE
        select parseMode
          case "get tag":
            System_log("xml.dbx", 1, "xml", "Look for tag open bracket")
            System_log("xml.dbx", 1, "xml", "startPos: " + str$(startPos))
            `tag opener may be at start of line, or mid line
            `tag me be start of a new element or may close an element
            tagName as string
            startPos = instr(tLine, "<", startPos)
            if startPos > 0
              System_log("xml.dbx", 1, "xml", "bracket found - startPos: " + str$(startPos)) 
              if mid$(tLine, startPos + 1, 1) = "?"
                 System_log("xml.dbx", 1, "xml", "found doc header - skip") 
                EOL = TRUE
              else
                if mid$(tLine, startPos + 1, 1) = "/"
                   System_log("xml.dbx", 1, "xml", "found element close tag") 
                  startPos = instr(tLine, ">", startPos)
                  `set last open tag to closed
                  ii = array count(XML_elements())
                  while ii > -1
                    if XML_elements(ii).isOpen = TRUE
                      XML_elements(ii).isOpen = FALSE
                      exit
                    endif
                    dec ii
                  endwhile
                   System_log("xml.dbx", 1, "xml", "bracket found - startPos: " + str$(startPos)) 
                else
                  `begin new element, check for space to delimit attribute parsing
                  cPos = instr(tLine, " ", startPos)
                  if cPos > 0
                     System_log("xml.dbx", 1, "xml", "found an attribute") 
                    span = cPos - (startPos + 1)
                    tagName as string
                    tagName = mid$(tLine, startPos + 1, span)
                    parseMode = "get attributes"
                     System_log("xml.dbx", 1, "xml", "tagName = " + tagName) 
                  else
                    `no attributes on this line, check for closing bracket
                    cPos = instr(tLine, ">", startPos)
                    if cPos > 0
                       System_log("xml.dbx", 1, "xml", "no attributes, found close bracket, get tag name") 
                      span = cPos - (startP + 1)
                      parseMode = "get content"
                       System_log("xml.dbx", 1, "xml", "tagName = " + tagName) 
                    else
                       System_log("xml.dbx", 1, "xml", "no attributes, no closing bracket, get tag name through EOL") 
                      tagName = mid$(tLine, startPos + 1, 0)
                      parseMode = "get attributes"
                      EOL = true
                       System_log("xml.dbx", 1, "xml", "tagName = " + tagName) 
                    endif
                  endif
                endif
              endif
            else
               System_log("xml.dbx", 1, "xml", "no tag found through EOL") 
              EOL = true
            endif
            `if element opener tag was found, add to element list, set as open
            if tagName <> ""
              `set parent as last index in open status
              p = -1
              ii = array count(XML_elements())
              while ii > -1
                if XML_elements(ii).isOpen = TRUE
                   System_log("xml.dbx", 1, "xml", "parent element found: " + str$(ii) + XML_elements(ii).tagName + XML_getAttributeValue(ii, "id")) 
                  p = ii
                  exit
                else
                  dec ii
                endif
              endwhile
              `add the new element
              array insert at bottom XML_elements()
              XML_elements().tagName = tagName
              XML_elements().isOpen = TRUE
              XML_elements().parent = p
              tElement = array count(XML_elements())
               System_log("xml.dbx", 1, "xml", "added element " + tagName) 
            endif
          endcase
          case "get attributes":
             System_log("xml.dbx", 1, "xml", "looking for attribute assignments") 
            `attributes may be inline with tag opener space delimited, or span multiple lines. continue until a closing bracket is found
            if cPos > 0
              startPos = cPos
            endif
            if fast len(tLine) <= startPos
              `no more text on this line, check next line
              EOL = TRUE
               System_log("xml.dbx", 1, "xml", "reached EOL, continue to next line for attribtues") 
            else
              cPos = instr(tLine, "=", startPos)
              if cPos > 0
                 System_log("xml.dbx", 1, "xml", "attribute assignement found at " + str$(cPos)) 
                attributeName as string
                if startPos = 1
                  span = cPos - startPos
                  attributeName = mid$(tLine, startPos, span)
                else
                  span = cPos - (startPos + 1)
                  attributeName = mid$(tLine, startPos + 1, span)
                endif
                 System_log("xml.dbx", 1, "xml", "attribute name: " + attributeName) 
                `get attribute value
                attributeVal as string
                startPos = cPos
                cPos = instr(tLine, chr$(34), startPos + 2)
                if cPos > 0
                  span = cPos - startPos - 2
                  attributeVal = mid$(tLine, startPos + 2, span)
                   System_log("xml.dbx", 1, "xml", "attribute val: " + attributeVal) 
                  `add to attribute list then contine checking this line
                  attributeName = trim$(attributeName)
                  array insert at bottom _XML_attributes()
                  _XML_attributes().elementIndex = tElement
                  _XML_attributes().attribute = attributeName
                  _XML_attributes().value = attributeVal
                   System_log("xml.dbx", 1, "xml", "added attribute " + attributeName + ":" + attributeVal) 
                  if fast len(tLine) <= cPos
                    `no more on this line, continue next
                     System_log("xml.dbx", 1, "xml", "reached EOL") 
                    EOL = TRUE
                  else
                     System_log("xml.dbx", 1, "xml", "continue to next line") 
                  endif
                endif
              else
                `no more attributes this line, check for closing bracket
                cPos = instr(tLine, ">", startPos)
                if cPos > 0
                   System_log("xml.dbx", 1, "xml", "closing bracket found no more attributes - continue line for content") 
                  parseMode = "get content"
                else
                   System_log("xml.dbx", 1, "xml", "reached EOL continue next for attributes") 
                  EOL = TRUE
                endif
              endif
            endif
          endcase
          case "get content":
             System_log("xml.dbx", 1, "xml", "looking for content") 
            content as string
            if cPos > 0
              startPos = cPos
            endif
            if fast len(tLine) <= startPos
              `no more content on this line, check next
               System_log("xml.dbx", 1, "xml", "reached EOL, continue next for content") 
              EOL = TRUE
            else
              `element content is on this line, check for closing tag.
              cPos = instr(tLine, "<", startPos)
              if cPos > 0
                 System_log("xml.dbx", 1, "xml", "found tag open bracket") 
                `found a tag is it closer or nested opener?
                if mid$(tLine, startPos + 1, 1) = "/"
                   System_log("xml.dbx", 1, "xml", "tag is closer") 
                  `grag content then continue to check for tags
                  span = cPos - (startPos + 1)
                  if span >= 0
                    content = mid$(tLine, startPos + 1, span)
                  endif
                   System_log("xml.dbx", 1, "xml", "content: " + content) 
                else
                   System_log("xml.dbx", 1, "xml", "tag is element opener proceed to get tag") 
                endif
                parseMode = "get tag"
              else
                 System_log("xml.dbx", 1, "xml", "no tag through EOL grab content to EOL") 
                content = mid$(tLine, startPos + 1, 0)
                parseMode = "get tag"
                EOL = TRUE
              endif
            endif
            `if content found, add to element list
            if content <> ""
              content = unquote$(content)
              XML_elements(tElement).value = content
               System_log("xml.dbx", 1, "xml", "set element " + str$(tElement) + " content to: " + content) 
            endif
          endcase
        endselect
      endwhile
    endwhile
    close file tFileNum
    total = array count(XML_elements())
     System_log("xml.dbx", 1, "xml", "XML document loaded. total elements parsed: " + str$(total)) 
  else
     System_log("xml.dbx", 4, "error", "ERROR: file not found. XML load file failed on requested file: " + rFilename) 
    App_closeGame(TRUE)
  endif
endfunction
function XML_unload()
  empty array XML_elements()
  empty array _XML_attributes()
endfunction
function XML_getAttributeValue(rElementIndex as integer, rAttributeName as string)
  System_log("xml.dbx", 1, "xml", "Get value for requested attribute: " + rAttributeName + " for xml element: " + str$(rElementIndex))
  returnVal as string
  for i = 0 to array count(_XML_attributes())
    if _XML_attributes(i).elementIndex = rElementIndex and _XML_attributes(i).attribute = rAttributeName
      returnVal = _XML_attributes(i).value
      System_log("xml.dbx", 1, "xml", "Returning attribute value: " + returnVal)
      exitfunction returnVal
    endif
  next i
  System_log("xml.dbx", 2, "xml", "INFO: could not locate attribute: " + rAttributeName + " : Return empty string")
endfunction returnVal
function XML_getAttributeCount(rElementIndex as integer)
  res = -1
  for i = 0 to array count(_XML_attributes())
    if _XML_attributes(i).elementIndex = rElementIndex
      inc res
    endif
  next i
endfunction res
function XML_getAttributeByIndex(rElementIndex as integer, rAttributeNum as integer)
  tAttribute as string
  tAttributeCount = -1
  for i = 0 to array count(_XML_attributes())
    if _XML_attributes(i).elementIndex = rElementIndex
      inc tAttributeCount
      if tAttributeCount = rAttributeNum
        tAttribute = _XML_attributes(i).attribute
        exitfunction tAttribute
      endif
    endif
  next i
endfunction tAttribute
sqlite_module_init:
  if SQLITE_MODULE_LOADED = FALSE
    System_log("sqlite.dbx", 2, "main", "Begin module load: sqlite.")
    #CONSTANT SQLITE_USERNAME ""
    #CONSTANT SQLITE_PASSWORD ""
    #CONSTANT SQLITE_MAX_CONNECTIONS 20
    #CONSTANT SQLITE_getRecordInt sqlite record row integer by column name
    #CONSTANT SQLITE_getRecordFloat sqlite record row float by column name
    #CONSTANT SQLITE_getRecordString sqlite record row string by column name$
    #CONSTANT SQLITE_getRecordFile sqlite record row file from blob by column name
    `Declare Sqlite -----------------------------------------------------------
    type Sqlite_type_connectionData
      name as string
      connectionID as integer
      isActive as boolean
    endtype
    type STATIC_CLASS_Sqlite
      connectionListHandle as integer
    endtype
    `private data -------------------------------------------------------------
    dim _Sqlite_connections(SQLITE_MAX_CONNECTIONS) as Sqlite_type_connectionData
    `public data --------------------------------------------------------------
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL Sqlite as STATIC_CLASS_Sqlite
    `==================================
    _Sqlite_init()
    SQLITE_MODULE_LOADED = TRUE
    System_log("sqlite.dbx", 2, "main", "End module load: sqlite.")
  endif
return
function _Sqlite_init()
  Sqlite.connectionListHandle = find free freelist()
  make freelist Sqlite.connectionListHandle, 1, SQLITE_MAX_CONNECTIONS, -1
endfunction
function _Sqlite_connect(rDBName as string, userName as string, password as string)
  tID = get from freelist(Sqlite.connectionListHandle)
  if tID > 0
    if sqlite open database(tID, rDBName, userName, password) > -1
      array insert at bottom _Sqlite_connections()
      _Sqlite_connections().name = rDBName
      _Sqlite_connections().connectionID = tID
      System_log("sqlite.dbx", 2, "data", "Connected to DB: " + rDBName + " on ID: " + str$(tID))
    else
      tID = -1
      System_log("sqlite.dbx", 4, "error", "ERROR: Failed to connect to DB: " + rDBName)
    endif
  else
      tID = -1
      System_log("sqlite.dbx", 4, "error", "ERROR: Failed to connect to DB: " + rDBName + ". Too many open connections.")
  endif
endfunction tID
function Sqlite_getConnection(rDBName as string)
  System_log("sqlite.dbx", 1, "data", "Requesting DB connection for: " + rDBName)
  tID = -1
  for i = 0 to array count(_Sqlite_connections())
    if _Sqlite_connections(i).name = rDBName
      if _Sqlite_connections(i).isActive = FALSE
        tID = _Sqlite_connections(i).connectionID
        _Sqlite_connections(i).isActive = TRUE
        System_log("sqlite.dbx", 1, "data", "Located inactive DB connection " + str$(tID) + " for " + rDBName + ". Returning.")
        exitfunction tID
      endif
    endif
  next i
  `no available connection, attempt to open a new connection
  tID = _Sqlite_connect(rDBName, SQLITE_USERNAME, SQLITE_PASSWORD)
endfunction tID
function Sqlite_restConnection(rConnectionID as integer)
  for i = 0 to array count(_Sqlite_connections())
    if _Sqlite_connections(i).connectionID = rConnectionID
      _Sqlite_connections(i).isActive = FALSE
      System_log("sqlite.dbx", 1, "data", "Resting DB connection " + str$(rConnectionID))
    endif
  next i
endfunction
function Sqlite_closeConnection(rConnectionID as integer)
  for i = 0 to array count(_Sqlite_connections())
    if _Sqlite_connections(i).connectionID = rConnectionID
      res = sqlite close database(_Sqlite_connections(i).connectionID)
      array delete element _Sqlite_connections(), i
      return to freelist Sqlite.connectionListHandle, rConnectionID
      System_log("sqlite.dbx", 2, "data", "Closed DB connection: " + str$(rConnectionID))
      exitfunction
    endif
  next i
endfunction
function Sqlitelite_closeAll()
  for i = 0 to array count(_Sqlite_connections())
    res = sqlite close database(_Sqlite_connections(i).connectionID)
    return to freelist Sqlite.connectionListHandle, _Sqlite_connections(i).connectionID
    System_log("sqlite.dbx", 2, "data", "Closed DB connection: " + str$(_Sqlite_connections(i).connectionID))
  next i
  empty array _Sqlite_connections()
endfunction
media_module_init:
  if MEDIA3D_MODULE_LOADED = FALSE
    System_log("media.dbx", 2, "main", "Begin module load: media.")
    type Media_type_assetData
      number as integer
      file as string
    endtype
    type Media_type_imageAssetData
      number as integer
      file as string
      mode as byte
      divide as byte
    endtype
    type Media_type_objectAssetData
      id as string
      number as integer
      file as string
      isInstance as boolean
    endtype
    type Media_type_assetResultData
      id as string
      number as integer
      text as string
    endtype
    type Media_type_objectBindingData
      objNum as integer
      parentObjNum as integer
      mode as integer 
    endtype
    type STATIC_CLASS_Media
      objectResult as Media_type_assetResultData
    endtype
    dim _Media_images() as Media_type_imageAssetData
    dim _Media_objects() as Media_type_objectAssetData
    dim _Media_sounds() as Media_type_assetData
    dim _Media_effects() as Media_type_assetData
    dim _Media_objectBindings() as Media_type_objectBindingData
    dim Media_boundObjectsResult() as integer
    GLOBAL Media as STATIC_CLASS_Media
    #CONSTANT MEDIA_ENUM_BIND_LOC 1 
    #CONSTANT MEDIA_ENUM_BIND_ROT 2 
    #CONSTANT MEDIA_ENUM_BIND_SCL 4 
    #CONSTANT MEDIA_ENUM_BIND_FRM 8 
    #CONSTANT MEDIA_ENUM_BIND_COL 16 
    _Media_init()
    MEDIA3D_MODULE_LOADED = TRUE
    System_log("media.dbx", 2, "main", "End module load: media.")
  endif
return
function _Media_init()
  App_addUpdate("Media_updateBoundObjects", "", FALSE)
endfunction
function Media_getImageNumber(rFilename as string, rTextureMode as byte, rTextureDivide as byte)
  System_log("media.dbx", 1, "media", "Requested image number for file: " + rFilename + " in mode: " + str$(rTextureMode))
  tImg = -1
  for i = 0 to array count(_Media_images())
    if _Media_images(i).file = rFilename
      if _Media_images(i).mode = rTextureMode and _Media_images(i).divide = rTextureDivide
        tImg = _Media_images(i).number
        System_log("media.dbx", 1, "media", "Located previously loaded image at _media_Images() index: " + str$(i) + "; number: " + str$(tImg))
        if image exist(tImg)
          exitfunction tImg
        else
          if file exist(rFilename)
            tImg = find free image()
            load image rFilename, tImg, rTextureMode, rTextureDivide
            _Media_images(i).number = tImg
            exitfunction tImg
          endif
        endif
      endif
    endif
  next i
  if file exist(rFilename)
    tImg = find free image()
    load image rFilename, tImg, rTextureMode, rTextureDivide
    array insert at bottom _Media_images()
    _Media_images().number = tImg
    _Media_images().file = rFilename
    _Media_images().mode = rTextureMode
    _Media_images().divide = rTextureDivide
    System_log("media.dbx", 1, "media", "Image had not previously been loaded, loaded to new index: " + str$(array count(_Media_images())) + "; number: " + str$(tImg))
    exitfunction   tImg
  else
    System_log("media.dbx", 4, "error", "ERROR: File not found: " + rFilename + " on Media_getImageNumber.")
    App_closeGame(TRUE)
  endif
endfunction tImg
function Media_unloadImage(rImageNumber as integer, rFilename as string, rTextureMode as byte, rTextureDivide as byte)
  if rImageNumber > 0
    for i = 0 to array count(_Media_images())
      if _Media_images(i).number = rImageNumber
        delete image rImageNumber
        array delete element _Media_images(), i
        exitfunction
      endif
    next i
  else
    for i = 0 to array count(_Media_images())
      if _Media_images(i).file = rFilename
        if _Media_images(i).mode = rTextureMode and _Media_images(i).divide = rTextureDivide
          delete image _Media_images(i).number
          array delete element _Media_images(), i
          exitfunction
        endif
      endif
    next i
  endif
endfunction
function Media_loadObject(rFilename as string, canInstance as boolean, rID as string)
  Media.objectResult.id = ""
  Media.objectResult.number = -1
  Media.objectResult.text = ""
  if file exist(rFilename + ".dbo")
    rFilename = rFilename + ".dbo"
  else
    rFilename = rFilename + ".x"
  endif
  System_log("media.dbx", 1, "media", "Requested load object for file: " + rFilename + "; allow instancing: " + str$(canInstance))
  if file exist(rFilename)
    tObj = find free object()
    sourceIndex = _Media_getSourceObjectIndex(rFilename)
    if sourceIndex > -1
      sourceObjNum = _Media_objects(sourceIndex).number
    else
      sourceObjNum = -1
    endif
    isInstance = FALSE
    System_log("media.dbx", 1, "media", "Source object for requested file: " + str$(sourceObjNum))
    if sourceObjNum > -1
      if object exist(sourceObjNum) = TRUE
        if canInstance = FALSE
          System_log("media.dbx", 1, "media", "Source object is valid. instancing not allowed. make cloned object " + str$(tObj))
          clone object tObj, sourceObjNum
          Media.objectResult.text = "cloned"
        else
          System_log("media.dbx", 1, "media", "Source object is valid. instancing is allowed. make instance object " + str$(tObj))
          instance object tObj, sourceObjNum
          isInstance = TRUE
          Media.objectResult.text = "instanced"
        endif
      else
        System_log("media.dbx", 1, "media", "Source object is not valid. load a new source object to existing source number" + str$(sourceObjNum))
        load object rFilename, sourceObjNum
        Media.objectResult.id = _Media_objects(sourceIndex).id
        Media.objectResult.number = sourceObjNum
        Media.objectResult.text = "source"
        exitfunction
      endif
    else
      System_log("media.dbx", 1, "media", "No source object found for requested file. load a new source object" + str$(tObj))
      load object rFilename, tObj
      Media.objectResult.text = "source"
    endif
    array insert at bottom _Media_objects()
    _Media_objects().id = rID
    _Media_objects().number = tObj
    _Media_objects().file = rFilename
    _Media_objects().isInstance = isInstance
    Media.objectResult.id = _Media_objects().id
    Media.objectResult.number = tObj
  else
    System_log("media.dbx", 4, "error", "ERROR: File not found: " + rFilename + " during Media_loadObject. Current Dir: " + get dir$())
    App_closeGame(TRUE)
  endif
endfunction
function Media_unloadObjectByNumber(rObjNum as integer)
  for i = 0 to array count(_Media_objects())
    if _Media_objects(i).number = rObjNum
      if object exist(rObjNum)
        set pixel shader off rObjNum
        set vertex shader off rObjNum
        Object_Remove(rObjNum)
        sc_setupObject rObjNum, 1, 0
        sc_removeObject rObjNum
        delete object rObjNum
      endif
      array delete element _Media_objects(), i
      exitfunction
    endif
  next i
endfunction
function Media_unloadAllObjects()
  for i = 0 to array count(_Media_objects())
    rObjNum = _Media_objects(i).number
    if object exist(rObjNum)
      set pixel shader off rObjNum
      set vertex shader off rObjNum
      Object_Remove(rObjNum)
      sc_setupObject rObjNum, 1, 0
      sc_removeObject rObjNum
      delete object rObjNum
    endif
  next i
  empty array _Media_objects()
  empty array _Media_objectBindings()
endfunction
function Media_replaceObject(rObjID as string, rFilename as string, canInstance as boolean)
  Media.objectResult.id = ""
  Media.objectResult.number = -1
  Media.objectResult.text = ""
  if file exist(rFilename + ".dbo")
    rFilename = rFilename + ".dbo"
  else
    rFilename = rFilename + ".x"
  endif
  System_log("media.dbx", 1, "media", "Requested replace object using file: " + rFilename + "; allow instancing: " + str$(canInstance))
  if file exist(rFilename)
    sourceIndex = _Media_getSourceObjectIndex(rFilename)
    if sourceIndex > -1
      sourceObjNum = _Media_objects(sourceIndex).number
    else
      sourceObjNum = -1
    endif
    isInstance = FALSE
    System_log("media.dbx", 1, "media", "Source object for requested file: " + str$(sourceObjNum))
    for i = 0 to array count(_Media_objects())
      if _Media_objects(i).id = rObjID
        tObj = _Media_objects(i).number
        System_log("media.dbx", 1, "media", "object to replace: " + str$(tObj))
        if object exist(tObj)
          set pixel shader off tObj
          set vertex shader off tObj
          Object_Remove(tObj)
          delete object tObj
        endif
        if sourceObjNum > -1
          if object exist(sourceObjNum) = TRUE
            if canInstance = FALSE
              System_log("media.dbx", 1, "media", "Source object is valid. instancing not allowed. make cloned object " + str$(tObj))
              clone object tObj, sourceObjNum
              _Media_objects(i).file = rFilename
              _Media_objects(i).isInstance = FALSE
              Media.objectResult.text = "cloned"
            else
              System_log("media.dbx", 1, "media", "Source object is valid. instancing is allowed. make instance object " + str$(tObj))
              instance object tObj, sourceObjNum
              _Media_objects(i).file = rFilename
              _Media_objects(i).isInstance = TRUE
              Media.objectResult.text = "instanced"
            endif
          else
            System_log("media.dbx", 1, "media", "Source object is not valid. load a new source object and remove existing source number" + str$(sourceObjNum))
            load object rFilename, tObj
            _Media_objects(i).file = rFilename
            _Media_objects(i).isInstance = FALSE
            Media.objectResult.text = "source"
            removeInvalidSource = TRUE
          endif
        else
          System_log("media.dbx", 1, "media", "No source object found for requested file. load a new source object" + str$(tObj))
          load object rFilename, tObj
          _Media_objects(i).file = rFilename
          _Media_objects(i).isInstance = FALSE
          Media.objectResult.text = "source"
        endif
        Media.objectResult.id = rObjID
        Media.objectResult.number = tObj
        if removeInvalidSource
          array delete element _Media_objects(), sourceIndex
        endif
        exitfunction
      endif
    next i
  else
    System_log("media.dbx", 4, "error", "ERROR: File not found: " + rFilename + " on Media_replaceObject.")
    App_closeGame(TRUE)
  endif
endfunction
function Media_getObjectRefByID(rObjID as string)
  Media.objectResult.id = ""
  Media.objectResult.number = -1
  Media.objectResult.text = ""
  for i = 0 to array count(_Media_objects())
    if _Media_objects(i).id = rObjID
      Media.objectResult.id = _Media_objects(i).id
      Media.objectResult.number = _Media_objects(i).number
      Media.objectResult.text = _Media_objects(i).file
      exitfunction
    endif
  next i
endfunction
function Media_getObjectRefByNumber(rObjNum as integer)
  Media.objectResult.id = ""
  Media.objectResult.number = -1
  Media.objectResult.text = ""
  System_log("media.dbx", 1, "media", "Requested object data for number " + str$(rObjNum))
  for i = 0 to array count(_Media_objects())
    System_log("media.dbx", 1, "media", "  check against " + str$(_Media_objects(i).number))
    if _Media_objects(i).number = rObjNum
      System_log("media.dbx", 1, "media", "    matched. file is: " + _Media_objects(i).file)
      Media.objectResult.id = _Media_objects(i).id
      Media.objectResult.number = _Media_objects(i).number
      Media.objectResult.text = _Media_objects(i).file
      exitfunction
    endif
  next i
endfunction
function _Media_getSourceObjectIndex(rFilename as string)
  for i = o to array count(_Media_objects())
    if _Media_objects(i).file = rFilename and _Media_objects(i).isInstance = 0
      exitfunction i
    endif
  next i
endfunction -1
function Media_getEffectNumber(rFilename as string, rDataMode as integer) 
  System_log("media.dbx", 1, "media", "Requested load effect for file: " + rFilename + "; data mode: " + str$(rDataMode))
  tEff = -1
  for i = 0 to array count(_Media_effects())
    if _Media_effects(i).file = rFilename
      tEff = _Media_effects(i).number
      System_log("media.dbx", 1, "media", "Located previously loaded effect at _Media_effects() index: " + str$(i) + "; number: " + str$(tEff))
      if effect exist(tEff)
        exitfunction tEff
      else
        if file exist(rFilename)
          tEff = find free effect()
          load effect rFilename, tEff, 0, rDataMode
          _Media_effects(i).number = tEff
          Effect_Add(tEff)
          exitfunction tEff
        endif
      endif
    endif
  next i
  if file exist(rFilename)
    tEff = find free effect()
    load effect rFilename, tEff, 0, rDataMode
    array insert at bottom _Media_effects()
    _Media_effects().file = rFilename
    _Media_effects().number = tEff
    Effect_Add(tEff)
    exitfunction tEff
  else
    System_log("media.dbx", 4, "error", "ERROR: File not found: " + rFilename + " on Media_getEffectNumber.")
    App_closeGame(TRUE)
  endif
endfunction tEff
function Media_bindObject(rChildObj as integer, rParentObj as integer, rMode as integer)
  array insert at bottom _Media_objectBindings()
  _Media_objectBindings().objNum = rChildObj
  _Media_objectBindings().parentObjNum = rParentObj
  _Media_objectBindings().mode = rMode
  System_log("media.dbx", 1, "media", " > Bound object " + str$(rChildObj) + " to " + str$(rParentObj) + " : " + str$(rMode))
endfunction
function Media_unbindObject(rObjNum as integer)
  GCcount = 0
  GCindex = -1
  for i = 0 to array count(_Media_objectBindings())
    if _Media_objectBindings(i).objNum = rObjNum
      _Media_objectBindings(i).objNum = -1
      GCindex = i
      inc GCcount
    endif
  next i
  `garbage collect
  if GCcount > 0
    if GCcount > 1
      for c = 1 to GCcount
        for i = 0 to array count(_Media_objectBindings())
          if _Media_objectBindings(i).objNum = -1
            array delete element _Media_objectBindings(), i
            exit
          endif
        next i
      next c
    else
      array delete element _Media_objectBindings(), GCindex
    endif
  endif
endfunction
function Media_getBoundObjectNumbersByParent(rParentObj as integer)
  empty array Media_boundObjectsResult()
  for i = 0 to array count(_Media_objectBindings())
    if _Media_objectBindings(i).parentObjNum = rParentObj
      array insert at bottom Media_boundObjectsResult()
      Media_boundObjectsResult() = _Media_objectBindings(i).objNum
    endif
  next i
endfunction
function Media_updateBoundObjects()
  System_log("media.dbx", 2, "main", "Begin Update: Media_updateBoundObjects")
  updateMark as dword
  updateMark = hitimer(1000000)
  for i = 0 to array count(_Media_objectBindings())
    if _Media_objectBindings(i).mode && MEDIA_ENUM_BIND_LOC
      position object _Media_objectBindings(i).objNum, object position x(_Media_objectBindings(i).parentObjNum), object position y(_Media_objectBindings(i).parentObjNum), object position z(_Media_objectBindings(i).parentObjNum)
    endif
    if _Media_objectBindings(i).mode && MEDIA_ENUM_BIND_ROT
      rotate object _Media_objectBindings(i).objNum, object angle x(_Media_objectBindings(i).parentObjNum), object angle y(_Media_objectBindings(i).parentObjNum), object angle z(_Media_objectBindings(i).parentObjNum)
    endif
    if _Media_objectBindings(i).mode && MEDIA_ENUM_BIND_COL
      sc_updateObject _Media_objectBindings(i).objNum
    endif
    if _Media_objectBindings(i).mode && MEDIA_ENUM_BIND_FRM
      set object frame _Media_objectBindings(i).objNum, object frame(_Media_objectBindings(i).parentObjNum)
    endif
  next i
  System_log("media.dbx", 2, "main", "End Update: Media_updateBoundObjects," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
anim3d_module_init:
  if ANIM3D_MODULE_LOADED = FALSE
    System_log("anim3d.dbx", 2, "main", "Begin module load: anim3d.")
    App_updateSplashScreen("- Animation")
    `Declare Anim3d -----------------------------------------------------------
    type Anim3d_type_animationSetData
      file as string
      animSetNum as integer
      keyName as string
      firstFrame as integer
      lastFrame as integer
      enableVariants as boolean
    endtype
    type Anim3d_type_variantData
      animSetNum as integer
      baseKeyName as string `name of variant 0 sans id# ie 'idle0' = 'idle'
      baseLen as integer `length of name sans id# ie 'idle0' = 4
      variantCount as integer
    endtype
    type Anim3d_type_activeAnimationData
      index as integer
      keyName as string
      animSetNum as integer
    endtype
    type STATIC_CLASS_Anim3d
      nextAnimSetNum as integer
      keyedFPS as integer
      minVariantDelay as integer
      maxVariantDelay as integer
      animResult as Anim3d_type_activeAnimationData
    endtype
    `private data -------------------------------------------------------------
    dim _Anim3d_animSets() as Anim3d_type_animationSetData
    dim _Anim3d_animVariants() as Anim3d_type_variantData
    dim _Anim3d_appliedAnimations() as CLASS_AppliedAnimation3d
    dim _Anim3d_processedObjects() as integer
    `public data --------------------------------------------------------------
    dim Anim3d_deferredAnimationFlush() as integer
    `Declare AppliedAnimation3d -----------------------------------------------------------
    type CLASS_AppliedAnimation3d
      objectNum as integer 
      animSetNum as integer 
      keyName as string 
      speedFactor as float 
      enableLoop as boolean 
      callback as string 
      callbackArgs as string 
      currentFrame as float 
      firstFrame as integer
      lastFrame as integer
      variantCount as integer
      variantMark as integer
      variantDelay as integer
    endtype
    `private data -------------------------------------------------------------
    `public data --------------------------------------------------------------
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL Anim3d as STATIC_CLASS_Anim3d
    `==================================
    _Anim3d_init()
    ANIM3D_MODULE_LOADED = TRUE
    System_log("anim3d.dbx", 2, "main", "End module load: anim3d.")
  endif
return
function _Anim3d_init()
  Anim3d.keyedFPS = 30 
  Anim3d.minVariantDelay = 15000
  Anim3d.maxVariantDelay = 65000
  `register updates
  App_addUpdate("Anim3d_updateActiveAnimations", "", FALSE)
  `inject new dependancies
  App_addRequiredToUpdate("Media_updateBoundObjects", "Anim3d_updateActiveAnimations")
endfunction
function Anim3d_unload()
  empty array _Anim3d_animSets()
  empty array _Anim3d_animVariants()
  empty array _Anim3d_appliedAnimations()
  empty array _Anim3d_processedObjects()
  empty array Anim3d_deferredAnimationFlush()
endfunction
function Anim3d_updateActiveAnimations()
  System_log("anim3d.dbx", 2, "main", "Begin Update: Anim3d_updateActiveAnimations")
  updateMark as dword
  updateMark = hitimer(1000000)
  empty array _Anim3d_processedObjects()
  for i = 0 to array count(_Anim3d_appliedAnimations())
    System_log("anim3d.dbx", 1, "anim3d", " > checking if object exists: " + str$(_Anim3d_appliedAnimations(i).objectNum) + " using key: " + _Anim3d_appliedAnimations(i).keyName + " with callback: " + _Anim3d_appliedAnimations(i).callback)
    if object exist(_Anim3d_appliedAnimations(i).objectNum)
      objHasProcessed = FALSE
      totalCountProcessed = array count(_Anim3d_processedObjects())
      if totalCountProcessed > -1
        for o = 0 to totalCountProcessed
          if _Anim3d_processedObjects(o) = _Anim3d_appliedAnimations(i).objectNum
            objHasProcessed = TRUE
            exit
          endif
        next o
      endif
      if objHasProcessed = FALSE
        appliedDelta# = System.timing.delta - System.timing.pauseElapsed
        newFrame# = _Anim3d_appliedAnimations(i).currentFrame + (Anim3d.keyedFPS * _Anim3d_appliedAnimations(i).speedFactor * 0.001 * appliedDelta#)
        if newFrame# < _Anim3d_appliedAnimations(i).firstFrame
          newFrame# = _Anim3d_appliedAnimations(i).firstFrame
        endif
        if newFrame# >= _Anim3d_appliedAnimations(i).lastFrame
          if _Anim3d_appliedAnimations(i).enableLoop
            newFrame# = _Anim3d_appliedAnimations(i).firstFrame
            _Anim3d_appliedAnimations(i).currentFrame = newFrame#
            set object frame _Anim3d_appliedAnimations(i).objectNum, newFrame#
            `check for variant switch
            for s = 0 to array count(_Anim3d_animSets())
              if _Anim3d_animSets(s).animSetNum = _Anim3d_appliedAnimations(i).animSetNum
                tSetIndex = s
                exit
              endif
            next s
            if _Anim3d_animSets(tSetIndex).enableVariants
              if abs(timer() - _Anim3d_appliedAnimations(i).variantMark) > _Anim3d_appliedAnimations(i).variantDelay
                newVariant = 1 + rnd(_Anim3d_appliedAnimations(i).variantCount - 1)
                for v = 0 to array count(_Anim3d_animVariants())
                  if _Anim3d_animVariants(v).animSetNum = _Anim3d_appliedAnimations(i).animSetNum
                    if _Anim3d_animVariants(v).baseKeyName + str$(newVariant) = _Anim3d_appliedAnimations(i).keyName
                      _Anim3d_appliedAnimations(i).firstFrame = _Anim3d_animSets(tSetIndex).firstFrame
                      _Anim3d_appliedAnimations(i).lastFrame = _Anim3d_animSets(tSetIndex).lastFrame
                      exit
                    endif
                  endif
                next v
                _Anim3d_appliedAnimations(i).variantMark = timer()
                _Anim3d_appliedAnimations(i).variantDelay = Anim3d.minVariantDelay + rnd(Anim3d.maxVariantDelay)
              endif
            endif
            array insert at bottom _Anim3d_processedObjects()
            _Anim3d_processedObjects() = _Anim3d_appliedAnimations(i).objectNum
            `handle loop callback
            System_log("anim3d.dbx", 1, "anim3d", " > checking loopIsDone callback")
            loopIsDone = FALSE
            if _Anim3d_appliedAnimations(i).callback > ""
              loopIsDone = intval(App_callFunction(_Anim3d_appliedAnimations(i).callback, _Anim3d_appliedAnimations(i).callbackArgs))
              System_log("anim3d.dbx", 1, "anim3d", "  loopIsDone: " + str$(loopIsDone))
              if loopIsDone
                System_log("anim3d.dbx", 1, "anim3d", "  > loop completed cycle, loop condition failed. flag applied animation for obj " + str$(_Anim3d_appliedAnimations(i).objectNum) + " to GC -1")
                _Anim3d_appliedAnimations(i).objectNum = -1
                inc GCcount
                GCindex = i
              endif
            endif
          else
            `played once, end the sequence and remove
            newFrame# = _Anim3d_appliedAnimations(i).lastFrame
            set object frame _Anim3d_appliedAnimations(i).objectNum, newFrame#
            array insert at bottom _Anim3d_processedObjects()
            _Anim3d_processedObjects() = _Anim3d_appliedAnimations(i).objectNum
            System_log("anim3d.dbx", 1, "anim3d", "  > played once and finished. flag applied animation for obj " + str$(_Anim3d_appliedAnimations(i).objectNum) + " to GC -1")
            if _Anim3d_appliedAnimations(i).callback > ""
              System_log("anim3d.dbx", 1, "anim3d", " > Executing callback play once finished: " + _Anim3d_appliedAnimations(i).callback + " " + _Anim3d_appliedAnimations(i).callbackArgs)
              App_callFunction(_Anim3d_appliedAnimations(i).callback, _Anim3d_appliedAnimations(i).callbackArgs)
            endif
            _Anim3d_appliedAnimations(i).objectNum = -1
            inc GCcount
            GCindex = i
          endif
        else
          `sequence is not complete, continue it
          _Anim3d_appliedAnimations(i).currentFrame = newFrame#
          set object frame _Anim3d_appliedAnimations(i).objectNum, newFrame#
          array insert at bottom _Anim3d_processedObjects()
          _Anim3d_processedObjects() = _Anim3d_appliedAnimations(i).objectNum
          `handle variable length animation callback
          System_log("anim3d.dbx", 1, "anim3d", " > checking loopIsDone callback")
          loopIsDone = FALSE
          if _Anim3d_appliedAnimations(i).enableLoop and _Anim3d_appliedAnimations(i).callback > ""
            loopIsDone = intval(App_callFunction(_Anim3d_appliedAnimations(i).callback, _Anim3d_appliedAnimations(i).callbackArgs))
            System_log("anim3d.dbx", 1, "anim3d", "  loopIsDone: " + str$(loopIsDone))
            if loopIsDone
              System_log("anim3d.dbx", 1, "anim3d", "  > loop not complete, loop condition failed. flag applied animation for obj " + str$(_Anim3d_appliedAnimations(i).objectNum) + " to GC -1")
              _Anim3d_appliedAnimations(i).objectNum = -1
              inc GCcount
              GCindex = i
            endif
          endif
        endif
      endif
    else
      _Anim3d_appliedAnimations(i).objectNum = -1
      inc GCcount
      GCindex = i
    endif
  next i
  `process deferred flush
  for i = 0 to array count(Anim3d_deferredAnimationFlush())
    for a = 0 to array count(_Anim3d_appliedAnimations())
      if _Anim3d_appliedAnimations(a).objectNum = Anim3d_deferredAnimationFlush(i)
        System_log("anim3d.dbx", 1, "anim3d", "  > process deferred flush. flagged " + _Anim3d_appliedAnimations(a).keyName + " on obj " + str$(_Anim3d_appliedAnimations(a).objectNum) + " to GC -1")
        _Anim3d_appliedAnimations(a).objectNum = -1
        inc GCcount
        GCindex = a
      endif
    next a
  next i
  empty array Anim3d_deferredAnimationFlush()
  `garbage collect
  System_log("anim3d.dbx", 1, "anim3d", " > garbage collect anim3d, total: " + str$(GCcount))
  if GCcount > 0
    if GCcount > 1
      for c = 1 to GCcount
        for i = 0 to array count(_Anim3d_appliedAnimations())
          if _Anim3d_appliedAnimations(i).objectNum = -1
            System_log("anim3d.dbx", 1, "anim3d", "  deleting: " + _Anim3d_appliedAnimations(i).keyName)
            array delete element _Anim3d_appliedAnimations(), i
            exit
          endif
        next i
      next c
    else
      System_log("anim3d.dbx", 1, "anim3d", "  deleting: " + _Anim3d_appliedAnimations(GCindex).keyName + " from object " + str$(_Anim3d_appliedAnimations(i).objectNum))
      array delete element _Anim3d_appliedAnimations(), GCindex
    endif
  endif
  System_log("anim3d.dbx", 2, "main", "End Update: Anim3d_updateActiveAnimations," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function _Anim3d_loadObjectAnimation(rFilename as string, rAnimSetNum as integer)
  System_log("anim3d.dbx", 2, "anim3d", "Loading animation config file: "+ rFilename +" to setNum: "+ str$(rAnimSetNum))
  fHandle = find free file()
  open to read fHandle, rFilename
  while file end(fHandle) = FALSE
    read string fHandle, inputData$
    tKeyName$ = fast lower$(first token$(inputData$, ","))
    tFirstFrame = intval(next token$(","))
    tLastFrame = intval(next token$(","))
    tHasVariants = intval(next token$(","))
    if tFirstFrame > 0
      System_log("anim3d.dbx", 1, "anim3d", "> adding key: " + tKeyName$)
      if tHasVariants
        System_log("anim3d.dbx", 1, "anim3d", "  key has variants")
        isNewKey = TRUE
        for i = 0 to array count(_Anim3d_animVariants())
          if _Anim3d_animVariants(i).baseKeyName = tKeyName$
            isNewKey = FALSE
            inc _Anim3d_animVariants(i).variantCount
            exit
          endif
        next i
        if isNewKey
          array insert at bottom _Anim3d_animVariants()
          _Anim3d_animVariants().animSetNum = rAnimSetNum
          _Anim3d_animVariants().baseKeyName = tKeyName$
          _Anim3d_animVariants().baseLen = fast len(tKeyName$)
          _Anim3d_animVariants().variantCount = 0
          tKeyName$ = tKeyName$ + str$(_Anim3d_animVariants().variantCount)
        endif
      endif
      array insert at bottom _Anim3d_animSets()
      _Anim3d_animSets().animSetNum = rAnimSetNum
      _Anim3d_animSets().keyName = tKeyName$
      _Anim3d_animSets().firstFrame = tFirstFrame
      _Anim3d_animSets().lastFrame = tLastFrame
      _Anim3d_animSets().enableVariants = tHasVariants
      System_log("anim3d.dbx", 1, "anim3d", "  " + tKeyName$ + " added")
    endif
  endwhile
  close file fHandle
endfunction TRUE
function Anim3d_addAppliedAnimation(rAnim as CLASS_AppliedAnimation3d)
  System_log("anim3d.dbx", 1, "anim3d", "Requested apply animation: " + rAnim.keyName + " to queue for objectNum: " + str$(rAnim.objectNum) + " speedFactor: " + str$(rAnim.speedFactor))
  rAnim.keyName = fast lower$(rAnim.keyName)
  `check for variants, default to base variant
  tVariantCount = -1
  for tVariantIndex = 0 to array count(_Anim3d_animVariants())
    if _Anim3d_animVariants(tVariantIndex).animSetNum = rAnim.animSetNum
      if _Anim3d_animVariants(tVariantIndex).baseKeyName = fast left$(rAnim.keyName, _Anim3d_animVariants(tVariantIndex).baseLen)
        rAnim.keyName = rAnim.keyName + "0"
        tVariantCount = _Anim3d_animVariants(tVariantIndex).variantCount
        exit
      endif
    endif
  next tVariantIndex
  `get animation data by set and key
  for i = 0 to array count(_Anim3d_animSets())
    if _Anim3d_animSets(i).animSetNum = rAnim.animSetNum
      if _Anim3d_animSets(i).keyName = rAnim.keyName
        array insert at bottom _Anim3d_appliedAnimations()
        _Anim3d_appliedAnimations().objectNum = rAnim.objectNum
        _Anim3d_appliedAnimations().animSetNum = rAnim.animSetNum
        _Anim3d_appliedAnimations().keyName = rAnim.keyName
        _Anim3d_appliedAnimations().enableLoop = rAnim.enableLoop
        _Anim3d_appliedAnimations().speedFactor = rAnim.speedFactor
        _Anim3d_appliedAnimations().callback = rAnim.callback
        _Anim3d_appliedAnimations().callbackArgs = rAnim.callbackArgs
        _Anim3d_appliedAnimations().currentFrame = _Anim3d_animSets(i).firstFrame
        _Anim3d_appliedAnimations().firstFrame = _Anim3d_animSets(i).firstFrame
        _Anim3d_appliedAnimations().lastFrame = _Anim3d_animSets(i).lastFrame
        if _Anim3d_animSets(i).enableVariants
          _Anim3d_appliedAnimations().variantCount = tVariantCount
          `set random variation change delay
          _Anim3d_appliedAnimations().variantMark = timer()
          _Anim3d_appliedAnimations().variantDelay = Anim3d.minVariantDelay + (rnd(Anim3d.maxVariantDelay - Anim3d.minVariantDelay))
        endif
        System_log("anim3d.dbx", 1, "anim3d", "> Applied. key: " + _Anim3d_appliedAnimations().keyName + " obj: " + str$(_Anim3d_appliedAnimations().objectNum) + " speed: " + str$(_Anim3d_appliedAnimations().speedFactor) + " loop: " + str$(_Anim3d_appliedAnimations().enableLoop))
        exitfunction
      endif
    endif
  next i
  System_log("anim3d.dbx", 3, "anim3d", "WARNING: Requested animation key "+ rAnim.keyName +" was not found. Did not add to queue.")
endfunction
function Anim3d_clearAppliedAnimations(rObjectNum as integer)
  System_log("anim3d.dbx", 1, "anim3d", "Begin flush applied animations for object number " + str$(rObjectNum))
  GCcount = 0
  GCindex = -1
  for i = 0 to array count(_Anim3d_appliedAnimations())
    if _Anim3d_appliedAnimations(i).objectNum = rObjectNum
      _Anim3d_appliedAnimations(i).objectNum = -1
      inc GCcount
      GCindex = i
    endif
  next i
  if GCcount > 0
    if GCcount > 1
      for c = 1 to GCcount
        for i = 0 to array count(_Anim3d_appliedAnimations())
          if _Anim3d_appliedAnimations(i).objectNum = -1
            array delete element _Anim3d_appliedAnimations(), i
          endif
        next i
      next c
    else
      array delete element _Anim3d_appliedAnimations(), GCindex
    endif
  endif
endfunction
function Anim3d_clearAppliedAnimationsDeferred(rObjectNum as integer)
  array insert at bottom Anim3d_deferredAnimationFlush()
  Anim3d_deferredAnimationFlush() = rObjectNum
endfunction
function Anim3d_getActiveAnimationByObjectNumber(rObjectNum as integer)
  Anim3d.animResult.index = -1
  Anim3d.animResult.keyName = ""
  Anim3d.animResult.animSetNum = -1
  for i = 0 to array count(_Anim3d_appliedAnimations())
    if _Anim3d_appliedAnimations(i).objectNum = rObjectNum
      Anim3d.animResult.index = i
      Anim3d.animResult.keyName = _Anim3d_appliedAnimations(i).keyName
      Anim3d.animResult.animSetNum = _Anim3d_appliedAnimations(i).animSetNum
      exitfunction
    endif
  next i
endfunction
function Anim3d_getAnimSetNumber(rFilename as string)
  rFilename = fast lower$(rFilename)
  tSet = -1
  System_log("anim3d.dbx", 1, "anim3d", "Requested animation set for file: " + rFilename)
  for i = 0 to array count(_Anim3d_animSets())
    if _Anim3d_animSets(i).file = rFilename
      tSet = _Anim3d_animSets(i).animSetNum
      exitfunction tSet
    endif
  next i
  `set has not been loaded, verify file and load
  if file exist(rFilename)
    tSet = Anim3d.nextAnimSetNum
    if _Anim3d_loadObjectAnimation(rFilename, tSet)
      array insert at bottom _Anim3d_animSets()
      _Anim3d_animSets().file = rFilename
      _Anim3d_animSets().animSetNum = tSet
      inc Anim3d.nextAnimSetNum
      exitfunction tSet
    else
      System_log("anim3d.dbx", 4, "error", "ERROR: Could not process requested animation file: " + rFilename)
      App_closeGame(TRUE)
    endif
  else
    System_log("anim3d.dbx", 4, "error", "ERROR: Requested animation file not found: " + rFilename)
    App_closeGame(TRUE)
  endif
endfunction tSet
fx_module_init:
  if FX_MODULE_LOADED = FALSE
    System_log("fx.dbx", 2, "main", "Begin module load: fx.")
    `private data -------------------------------------------------------------
    `public data --------------------------------------------------------------
    `==========================================================================================================================
    `Declare FX -----------------------------------------------------------
    type FX_type_advLightingConfigData
      enableSpecular as boolean
      enableRefract as boolean
      enableDistort as boolean
      enableSSAO as boolean
      enableScatter as boolean
      enableAA as boolean
      enableBloom as boolean
      enableDOF as boolean
      enableBlur as boolean
      enableLensflare as boolean
      shadowRes as integer 
      postProcessPercent as byte
      cameraRangeMax as integer 
    endtype
    type STATIC_CLASS_FX
      configAL as FX_type_advLightingConfigData
    endtype
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL FX as STATIC_CLASS_FX
    `==================================
    _FX_init()
    FX_MODULE_LOADED = TRUE
    System_log("fx.dbx", 2, "main", "End module load: fx.")
  endif
return
function _FX_init()
  FX.configAL.enableSpecular = TRUE
  FX.configAL.enableRefract = TRUE
  FX.configAL.enableDistort = TRUE
  FX.configAL.enableSSAO = TRUE
  FX.configAL.enableScatter = TRUE
  FX.configAL.enableAA = TRUE
  FX.configAL.enableBloom = FALSE
  FX.configAL.enableDOF = TRUE
  FX.configAL.enableBlur = FALSE
  FX.configAL.enableLensflare = FALSE
  FX.configAL.shadowRes = 512
  FX.configAL.postProcessPercent = 100
  FX.configAL.cameraRangeMax = 64000
  `require AL
  `init AL
  AdvLighting_Setup(App.config.screenWidth, App.config.screenHeight, (App.config.screenWidth * (FX.configAL.postProcessPercent / 100)), (App.config.screenHeight * (FX.configAL.postProcessPercent / 100)), FX.configAL.enableBlur)
  PostProcessing_SetUp(FX.configAL.enableRefract, FX.configAL.enableDistort, FX.configAL.enableSSAO, FX.configAL.enableScatter, FX.configAL.enableAA, FX.configAL.enableBloom, FX.configAL.enableDOF)
  AdvLighting_SetCamera(1, FX.configAL.cameraRangeMax, 50, 1.77)
  `fog
  AdvLighting_SetFog(FX.configAL.cameraRangeMax, 2, 0, 0, 0, 0, 0, 0) 
  AdvLighting_SetHeightFog(1000, 10000, 6, 25000, 1, 0, 0, 0, 128) 
  `ambient light
  tImg = Media_getImageNumber("resource/Advanced Lighting/Textures/Lighting/Ambient.dds", 2, 0)
  AdvLighting_SetAmbientTexture(tImg)
  `water
  Water_Create(1, 1, 1, 1, 1, 1)
  Water_SetScale(15, 600, 25)
  `sky
  imgStars = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Stars.dds", 2, 0)
  imgSun = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Sun.dds", 0, 0)
  imgMoon = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Moon.dds", 0, 0) 
  imgClouds = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Clouds.dds", 0, 0)
  imgCloudNoise = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Cloud Noise.dds", 0, 0)
  imgClouds3d = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Clouds 3d.dds", 0, 0)
  Sky_Create()
  Sky_SetTexture(imgStars)
  Sky_SetSunTexture(imgSun)
  Sky_SetPlanetTexture(imgMoon)
  Sky_SetCloudsTexture(imgClouds, imgCloudNoise)
  Clouds_Setup()
  Clouds_SetTexture(imgClouds3d, imgCloudNoise)
  `light
  TimeOfDay_Setup()
  DirLight_Create(FX.configAL.enableSpecular, FX.configAL.enableSSAO, 2, FX.configAL.shadowRes) 
  DirLight_SetAngle(60, 90, 0)
  DirLight_SetPower(0.80)
  Sky_SetPlanetAngle(223.0, 90.0, 0.0, 0.125)
  Sky_SetSunAngle(67.0, 90.0, 0.0, 0.09)
  `lensflare
  if FX.configAL.enableLensflare
    Flare=LensFlare_Create(13)
    LensFlare_SetSubFlareAtlas(Flare,0,5):LensFlare_SetSubFlareScale(Flare,0,0.5,0.5,0.5):LensFlare_SetSubFlareOffset(Flare,0,0,0,0.5):LensFlare_SetSubFlareFalloff(Flare,0,0,0,0):LensFlare_SetSubFlareColor(Flare,0,250,250,250,0)
    LensFlare_SetSubFlareAtlas(Flare,1,10):LensFlare_SetSubFlareScale(Flare,1,0.06,0.06,1):LensFlare_SetSubFlareOffset(Flare,1,0.475,0,0):LensFlare_SetSubFlareFalloff(Flare,1,0,1,2):LensFlare_SetSubFlareColor(Flare,1,60,100,80,0)
    LensFlare_SetSubFlareAtlas(Flare,2,10):LensFlare_SetSubFlareScale(Flare,2,0.075,0.075,1):LensFlare_SetSubFlareOffset(Flare,2,0.5,0,0):LensFlare_SetSubFlareFalloff(Flare,2,0,1,2):LensFlare_SetSubFlareColor(Flare,2,40,100,60,0)
    LensFlare_SetSubFlareAtlas(Flare,3,12):LensFlare_SetSubFlareScale(Flare,3,0.02,0.02,1):LensFlare_SetSubFlareOffset(Flare,3,0.6,0,0):LensFlare_SetSubFlareFalloff(Flare,3,0,1,1):LensFlare_SetSubFlareColor(Flare,3,160,160,100,0)
    LensFlare_SetSubFlareAtlas(Flare,4,10):LensFlare_SetSubFlareScale(Flare,4,0.075,0.075,1):LensFlare_SetSubFlareOffset(Flare,4,0.79,0,0):LensFlare_SetSubFlareFalloff(Flare,4,0,1,2):LensFlare_SetSubFlareColor(Flare,4,130,100,40,0)
    LensFlare_SetSubFlareAtlas(Flare,5,10):LensFlare_SetSubFlareScale(Flare,5,0.1,0.1,1):LensFlare_SetSubFlareOffset(Flare,5,0.82,0,0):LensFlare_SetSubFlareFalloff(Flare,5,0,1,2):LensFlare_SetSubFlareColor(Flare,5,130,80,60,0)
    LensFlare_SetSubFlareAtlas(Flare,6,10):LensFlare_SetSubFlareScale(Flare,6,0.125,0.125,1):LensFlare_SetSubFlareOffset(Flare,6,0.85,0,0):LensFlare_SetSubFlareFalloff(Flare,6,0,1,2):LensFlare_SetSubFlareColor(Flare,6,120,60,80,0)
    LensFlare_SetSubFlareAtlas(Flare,7,12):LensFlare_SetSubFlareScale(Flare,7,0.02,0.02,1):LensFlare_SetSubFlareOffset(Flare,7,1,0,0):LensFlare_SetSubFlareFalloff(Flare,7,0,1,1):LensFlare_SetSubFlareColor(Flare,7,160,160,100,0)
    LensFlare_SetSubFlareAtlas(Flare,8,11):LensFlare_SetSubFlareScale(Flare,8,0.04,0.04,1):LensFlare_SetSubFlareOffset(Flare,8,1.1,0,0):LensFlare_SetSubFlareFalloff(Flare,8,0,1,1):LensFlare_SetSubFlareColor(Flare,8,160,160,100,0)
    LensFlare_SetSubFlareAtlas(Flare,9,10):LensFlare_SetSubFlareScale(Flare,9,0.2,0.2,1):LensFlare_SetSubFlareOffset(Flare,9,1.2,0,0):LensFlare_SetSubFlareFalloff(Flare,9,0,1,2):LensFlare_SetSubFlareColor(Flare,9,120,40,160,0)
    LensFlare_SetSubFlareAtlas(Flare,10,10):LensFlare_SetSubFlareScale(Flare,10,0.25,0.25,1):LensFlare_SetSubFlareOffset(Flare,10,1.3,0,0):LensFlare_SetSubFlareFalloff(Flare,10,0,1,2):LensFlare_SetSubFlareColor(Flare,10,80,60,160,0)
    LensFlare_SetSubFlareAtlas(Flare,11,10):LensFlare_SetSubFlareScale(Flare,11,0.3,0.3,1):LensFlare_SetSubFlareOffset(Flare,11,1.4,0,0):LensFlare_SetSubFlareFalloff(Flare,11,0,1,2):LensFlare_SetSubFlareColor(Flare,11,40,80,160,0)
    LensFlare_SetSubFlareAtlas(Flare,12,16):LensFlare_SetSubFlareScale(Flare,12,0.3,0.3,8):LensFlare_SetSubFlareOffset(Flare,12,0.25,0,0.5):LensFlare_SetSubFlareFalloff(Flare,12,0,0.25,10):LensFlare_SetSubFlareColor(Flare,12,40,40,40,0)
    LensFlare_SetToDirLight(Flare)
  endif
endfunction
ui_module_init:
  if UI_MODULE_LOADED = FALSE
    System_log("ui.dbx", 2, "main", "Begin module load: ui.")
    App_updateSplashScreen("- UI")
    `Declare UI -----------------------------------------------------------
    type UI_type_stylePropertyIdData
      positionAlignH as dword
      positionAlignV as dword
      position as dword
      top as dword
      left as dword
      paddingTop as dword
      paddingBottom as dword
      paddingLeft as dword
      paddingRight as dword
      width as dword
      height as dword
      borderTop as dword
      borderBottom as dword
      borderLeft as dword
      borderRight as dword
      borderImage as dword
      marginTop as dword
      marginBottom as dword
      marginRight as dword
      marginLeft as dword
      minWidth as dword
      maxWidth as dword
      minHeight as dword
      maxHeight as dword
      backgroundColor as dword
      backgroundOpacity as dword
      backgroundImage as dword
      backgroundRepeat as dword
      backgroundAlignH as dword
      backgroundAlignV as dword
      display as dword
      opacity as dword
      zIndex as dword
      cursor as dword
      color as dword
      font as dword
      fontSize as dword
      textDecoration as dword
      textTransform as dword
      textIndent as dword
      textAlignH as dword
      textAlignV as dword
      d3dFont as dword
    endtype
    type UI_type_borderData
      size as string 
      color as dword 
    endtype
    type UI_type_sizeData
      isPercent as boolean
      value as integer
    endtype
    type UI_type_stylePropertyData
      positionAlignH as string 
      positionAlignV as string 
      position as string 
      top as string 
      left as string 
      paddingTop as string 
      paddingBottom as string 
      paddingLeft as string 
      paddingRight as string 
      width as string 
      height as string 
      borderTop as UI_type_borderData
      borderBottom as UI_type_borderData
      borderLeft as UI_type_borderData
      borderRight as UI_type_borderData
      marginTop as string 
      marginBottom as string 
      marginRight as string 
      marginLeft as string 
      minWidth as string 
      maxWidth as string 
      minHeight as string 
      maxHeight as string 
      backgroundColor as dword
      backgroundOpacity as byte 
      backgroundImage as string 
      backgroundRepeat as string 
      backgroundAlignH as string 
      backgroundAlignV as string 
      display as string 
      opacity as byte 
      zIndex as dword 
      cursor as string 
      color as dword 
      font as string 
      fontSize as byte 
      d3dFont as dword 
      textDecoration as string 
      textTransform as string 
      textIndent as string 
      textAlignH as string 
      textAlignV as string 
      _finalX as integer 
      _finalY as integer 
      _finalW as integer
      _finalH as integer
      _innerX as integer
      _innerY as integer
      _innerW as integer
      _innerH as integer
      _isResolved as boolean
      _flowPropertyEnabled as dword
      _visualPropertyEnabled as dword
    endtype
    type UI_type_stylePropData
      id as UI_type_stylePropertyIdData
      default as UI_type_stylePropertyData
      lastColor as dword
      lastFont as string
      lastFontSize as integer
    endtype
    type UI_type_statusData
      mouseMode as string 
      keyMode as string 
      mouseModeForced as string
      keyModeForced as string
      inputMark as dword
      inputReady as boolean
      lastUpdate as integer
    endtype
    type UI_type_elementDragData
      isActive as boolean
      dragElementIndex as integer
      targetElementIndex as integer
      offsetX as integer
      offsetY as integer
    endtype
    type UI_type_transitionData
      elementIndex as integer
      prop as string
      initVal as string
      targetVal as string
      duration as integer
      start as integer
      callback as string
    endtype
    type STATIC_CLASS_UI
      styleProp as UI_type_stylePropData
      status as UI_type_statusData
      elementDrag as UI_type_elementDragData
      parsedSizeData as UI_type_sizeData
    endtype
    `Declare ElementUI -----------------------------------------------------------
    type CLASS_ElementUI
      id as string
      name as string
      tag as string
      parent as dword 
      parentID as string 
      styleClassIndex as integer 
      styleClass as string 
      style as UI_type_stylePropertyData
      resolvedStyle as UI_type_stylePropertyData
      value as string
      scrollX as integer
      scrollY as integer
      onPress as string 
      onRelease as string
      onMouseIn as string
      onMouseOut as string
      mouseIsOver as boolean 
      pressIsHeld as boolean 
      keyBind as dword 
      enableEvents as byte 
      holdPause as boolean 
      holdMouseFocus as boolean 
      holdKeyFocus as boolean 
      selectedIndex as integer
      enableMove as byte 
      enableSize as boolean 
    endtype
    `Declare StyleClassUI -----------------------------------------------------------
    type CLASS_StyleClassUI
      className as string
      style as UI_type_stylePropertyData
    endtype
    `private data -------------------------------------------------------------
    dim _UI_transitions() as UI_type_transitionData
    `setup holders for instances of ElementUI and StyleClassUI objects
    dim _UI_elements() as CLASS_ElementUI
    dim _UI_styleClasses() as CLASS_StyleClassUI
    `setup holder for select box options
    dim _UI_selectBoxes() as string
    `public data --------------------------------------------------------------
    `setup holder for returned element collections (getElementsByName, getElementsByTagName etc)
    dim UI_elementsGroup() as integer 
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL UI as STATIC_CLASS_UI
    `set id values
    UI.styleProp.id.positionAlignH = 1
    UI.styleProp.id.positionAlignV = 2
    UI.styleProp.id.position = 4
    UI.styleProp.id.top = 8
    UI.styleProp.id.left = 16
    UI.styleProp.id.paddingTop = 32
    UI.styleProp.id.paddingBottom = 64
    UI.styleProp.id.paddingLeft = 128
    UI.styleProp.id.paddingRight = 256
    UI.styleProp.id.width = 512
    UI.styleProp.id.height = 1024
    UI.styleProp.id.borderTop = 2048
    UI.styleProp.id.borderBottom = 4096
    UI.styleProp.id.borderLeft = 8192
    UI.styleProp.id.borderRight = 16384
    UI.styleProp.id.borderImage = 32768
    UI.styleProp.id.marginTop = 65536
    UI.styleProp.id.marginBottom = 131072
    UI.styleProp.id.marginRight = 262144
    UI.styleProp.id.marginLeft = 524288
    UI.styleProp.id.minWidth = 1048576
    UI.styleProp.id.maxWidth = 2097152
    UI.styleProp.id.minHeight = 4194304
    UI.styleProp.id.maxHeight = 8388608
    UI.styleProp.id.backgroundColor = 1
    UI.styleProp.id.backgroundOpacity = 2
    UI.styleProp.id.backgroundImage = 4
    UI.styleProp.id.backgroundRepeat = 8
    UI.styleProp.id.backgroundAlignH = 16
    UI.styleProp.id.backgroundAlignV = 32
    UI.styleProp.id.display = 64
    UI.styleProp.id.opacity = 128
    UI.styleProp.id.zIndex = 256
    UI.styleProp.id.cursor = 512
    UI.styleProp.id.color = 1024
    UI.styleProp.id.font = 2048
    UI.styleProp.id.fontSize = 4096
    UI.styleProp.id.textDecoration = 8192
    UI.styleProp.id.textTransform = 16384
    UI.styleProp.id.textIndent = 32768
    UI.styleProp.id.textAlignH = 65536
    UI.styleProp.id.textAlignV = 131072
    UI.styleProp.id.d3dFont = 262144
    `set style defaults
    UI.styleProp.default.positionAlignH = "left"
    UI.styleProp.default.positionAlignV = "top"
    UI.styleProp.default.position = "relative"
    UI.styleProp.default.top = "0px"
    UI.styleProp.default.left = "0px"
    UI.styleProp.default.paddingTop = "0px"
    UI.styleProp.default.paddingBottom = "0px"
    UI.styleProp.default.paddingLeft = "0px"
    UI.styleProp.default.paddingRight = "0px"
    UI.styleProp.default.width = "100%"
    UI.styleProp.default.height = "100%"
    UI.styleProp.default.borderTop.size = "0px"
    UI.styleProp.default.borderTop.color = 0x00000000
    UI.styleProp.default.borderBottom.size = "0px"
    UI.styleProp.default.borderBottom.color = 0x00000000
    UI.styleProp.default.borderRight.size = "0px"
    UI.styleProp.default.borderRight.color = 0x00000000
    UI.styleProp.default.borderLeft.size = "0px"
    UI.styleProp.default.borderLeft.color = 0x00000000
    UI.styleProp.default.marginTop = "0px"
    UI.styleProp.default.marginBottom = "0px"
    UI.styleProp.default.marginRight = "0px"
    UI.styleProp.default.marginLeft = "0px"
    UI.styleProp.default.minWidth = "0px"
    UI.styleProp.default.maxWidth = "100%"
    UI.styleProp.default.minHeight = "0px"
    UI.styleProp.default.maxHeight = "100%"
    UI.styleProp.default.backgroundColor = 0x00000000
    UI.styleProp.default.backgroundOpacity = 100
    UI.styleProp.default.backgroundImage = ""
    UI.styleProp.default.backgroundRepeat = "no-repeat"
    UI.styleProp.default.backgroundAlignH = "left"
    UI.styleProp.default.backgroundAlignV = "top"
    UI.styleProp.default.display = "visible"
    UI.styleProp.default.opacity = 100
    UI.styleProp.default.zIndex = 0
    UI.styleProp.default.cursor = "default"
    UI.styleProp.default.color = 0xffffffff
    UI.styleProp.default.font = "Arial"
    UI.styleProp.default.fontSize = 18
    UI.styleProp.default.d3dFont = 0
    UI.styleProp.default.textDecoration = "none"
    UI.styleProp.default.textTransform = "none"
    UI.styleProp.default.textIndent = "0px"
    UI.styleProp.default.textAlignH = "left"
    UI.styleProp.default.textAlignV = "top"
    `==================================
    _UI_init()
    UI_MODULE_LOADED = TRUE
    System_log("ui.dbx", 2, "main", "End module load: ui.")
  endif
return
function _UI_init()
tElement as CLASS_ElementUI
  tElement.styleClassIndex = -1
  tElement.selectedIndex = -1
  tElement.keyBind = -1
  tElement.style.positionAlignH = UI.styleProp.default.positionAlignH
  tElement.style.positionAlignV = UI.styleProp.default.positionAlignV
  tElement.style.position = UI.styleProp.default.position
  tElement.style.top = UI.styleProp.default.top
  tElement.style.left = UI.styleProp.default.left
  tElement.style.paddingTop = UI.styleProp.default.paddingTop
  tElement.style.paddingBottom = UI.styleProp.default.paddingBottom
  tElement.style.paddingLeft = UI.styleProp.default.paddingLeft
  tElement.style.paddingRight = UI.styleProp.default.paddingRight
  tElement.style.width = UI.styleProp.default.width
  tElement.style.height = UI.styleProp.default.height
  tElement.style.borderTop.size = UI.styleProp.default.borderTop.size
  tElement.style.borderTop.color = UI.styleProp.default.borderTop.color
  tElement.style.borderBottom.size = UI.styleProp.default.borderBottom.size
  tElement.style.borderBottom.color = UI.styleProp.default.borderBottom.color
  tElement.style.borderRight.size = UI.styleProp.default.borderRight.size
  tElement.style.borderRight.color = UI.styleProp.default.borderRight.color
  tElement.style.borderLeft.size = UI.styleProp.default.borderLeft.size
  tElement.style.borderLeft.color = UI.styleProp.default.borderLeft.color
  tElement.style.marginTop = UI.styleProp.default.marginTop
  tElement.style.marginBottom = UI.styleProp.default.marginBottom
  tElement.style.marginRight = UI.styleProp.default.marginRight
  tElement.style.marginLeft = UI.styleProp.default.marginLeft
  tElement.style.minWidth = UI.styleProp.default.minWidth
  tElement.style.maxWidth = UI.styleProp.default.maxWidth
  tElement.style.minHeight = UI.styleProp.default.minHeight
  tElement.style.maxHeight = UI.styleProp.default.maxHeight
  tElement.style.backgroundColor = UI.styleProp.default.backgroundColor
  tElement.style.backgroundOpacity = UI.styleProp.default.backgroundOpacity
  tElement.style.backgroundImage = UI.styleProp.default.backgroundImage
  tElement.style.backgroundRepeat = UI.styleProp.default.backgroundRepeat
  tElement.style.backgroundAlignH = UI.styleProp.default.backgroundAlignH
  tElement.style.backgroundAlignV = UI.styleProp.default.backgroundAlignV
  tElement.style.display = UI.styleProp.default.display
  tElement.style.opacity = UI.styleProp.default.opacity
  tElement.style.zIndex = UI.styleProp.default.zIndex
  tElement.style.cursor = UI.styleProp.default.cursor
  tElement.style.color = UI.styleProp.default.color
  tElement.style.font = UI.styleProp.default.font
  tElement.style.fontSize = UI.styleProp.default.fontSize
  tElement.style.d3dFont = UI.styleProp.default.d3dFont
  tElement.style.textDecoration = UI.styleProp.default.textDecoration
  tElement.style.textTransform = UI.styleProp.default.textTransform
  tElement.style.textIndent = UI.styleProp.default.textIndent
  tElement.style.textAlignH = UI.styleProp.default.textAlignH
  tElement.style.textAlignV = UI.styleProp.default.textAlignV

  tElement.id = "root"
  tElement.style.width = str$(App.config.screenWidth) + "px"
  tElement.style.height = str$(App.config.screenHeight) + "px"
  tElement.resolvedStyle = tElement.style
  e = _UI_addElement(tElement, "")
  UI.status.mouseMode = "gameplay"
  UI.status.keyMode = "gameplay"
  UI.status.inputMark = timer()
  UI.status.lastUpdate = timer()
  `register updates
  App_addUpdate("UI_updatePageFlow", "", TRUE)
  App_addUpdate("UI_getInterfaceInput", "UI_updatePageFlow", TRUE)
endfunction
function UI_updatePageFlow()
  System_log("ui.dbx", 2, "main", "Begin Update: UI_updatePageFlow")
  updateMark as dword
  updateMark = hitimer(1000000)
  totalElementCount = array count(_UI_elements())
  if totalElementCount = 0
    exitfunction
  endif
  `Resolve element style properties and page flow -----------------------------------------------------------
  System_log("ui.dbx", 1, "ui-update", "Begin resolve element properties")
  _UI_updateTransitions()
  _UI_elements_resetResolvedStyleProps()
  keepResolvingDeferred = TRUE
  while keepResolvingDeferred
    keepResolvingDeferred = FALSE
    for tElementIndex = 1 to totalElementCount
      System_log("ui.dbx", 1, "ui-update", "Check resolve for element " + str$(tElementIndex))
      resolveThis = TRUE
      `skip if already resolved
      if _UI_elements(tElementIndex).resolvedStyle._isResolved = TRUE
        System_log("ui.dbx", 1, "ui-update", "   already resolved")
        resolveThis = FALSE
      endif
      `defer if parent is not resolved
      if resolveThis = TRUE
        tParentIndex = _UI_elements(tElementIndex).parent
        System_log("ui.dbx", 1, "ui-update", "   parent is " + str$(tParentIndex))
        if _UI_elements(tParentIndex).resolvedStyle._isResolved = FALSE
          System_log("ui.dbx", 1, "ui-update", "   parent is not resolved, defer")
          resolveThis = FALSE
          keepResolvingDeferred = TRUE
        endif
      endif
      if resolveThis = TRUE
        System_log("ui.dbx", 1, "ui-update", "   ready to resolve -> resolve it")
        `apply inherited style props
        _UI_elements_applyInheritedStyleProps(tElementIndex, tParentIndex)
        `apply class style props
        if _UI_elements(tElementIndex).styleClassIndex > -1
          _UI_elements_applyClassStyleProps(tElementIndex, _UI_elements(tElementIndex).styleClassIndex)
        endif
        `apply self 'inline' style props
        _UI_elements_applyElementStyleProps(tElementIndex)
        `resolve flow values and finalize
        _UI_elements_resolveFlowValues(tElementIndex, tParentIndex)
      endif
    next tElementIndex
  endwhile
  System_log("ui.dbx", 1, "ui-update", "End resolve element properties," + str$(hitimer(1000000) - updateMark) + "us")
  `Render GUI ---------------------------------------------------------------------------------------------------------
  renderMark as dword
  renderMark = hitimer(1000000)
  System_log("ui.dbx", 1, "ui-update", "Begin gui render: " + str$(totalElementCount) + " elements")
  drawPass = 0
  drawCount = 0
  while drawCount < totalElementCount
    for tElementIndex = 1 to totalElementCount
      UI_updatePageFlow_nextElementRender:
      `check if drawable this pass
      if _UI_elements(tElementIndex).resolvedStyle.zIndex = drawPass
        System_log("ui.dbx", 1, "ui-update", "Drawing element " + str$(tElementIndex) + " on pass " + str$(drawPass))
        inc drawCount
        `stop further processing of this element if not visible
        if _UI_elements(tElementIndex).resolvedStyle.display = "hidden"
          inc tElementIndex
          if tElementIndex <= totalElementCount
            goto UI_updatePageFlow_nextElementRender
          else
            exit
          endif
        endif
        `get flow data
        borderSizeT = intval(_UI_elements(tElementIndex).resolvedStyle.borderTop.size)
        borderSizeB = intval(_UI_elements(tElementIndex).resolvedStyle.borderBottom.size)
        borderSizeR = intval(_UI_elements(tElementIndex).resolvedStyle.borderRight.size)
        borderSizeL = intval(_UI_elements(tElementIndex).resolvedStyle.borderLeft.size)
        finalX = _UI_elements(tElementIndex).resolvedStyle._finalX
        finalY = _UI_elements(tElementIndex).resolvedStyle._finalY
        finalW = _UI_elements(tElementIndex).resolvedStyle._finalW
        finalH = _UI_elements(tElementIndex).resolvedStyle._finalH
        contentX = _UI_elements(tElementIndex).resolvedStyle._innerX
        contentY = _UI_elements(tElementIndex).resolvedStyle._innerY
        contentW = _UI_elements(tElementIndex).resolvedStyle._innerW
        contentH = _UI_elements(tElementIndex).resolvedStyle._innerH
        `render background
        if _UI_elements(tElementIndex).resolvedStyle.backgroundOpacity > 0
          if _UI_elements(tElementIndex).resolvedStyle.backgroundImage <> ""
            tImgNum = Media_getImageNumber(_UI_elements(tElementIndex).resolvedStyle.backgroundImage, 1, 0)
            paste image tImgNum, contentX, contentY, 1
          else
            d3d_box finalX, finalY, (finalX + finalW), (finalY + finalH), _UI_elements(tElementIndex).resolvedStyle.backgroundColor
            System_log("ui.dbx", 1, "ui-update", "Draw d3d box: " + str$(contentX) + ". " + str$(contentY) + ". " + str$((contentX + contentW)) + ". " + str$((contentY + contentH)) + ". " + str$(_UI_elements(tElementIndex).resolvedStyle.backgroundColor))
            System_log("ui.dbx", 1, "ui-update", "Draw complete d3d box element background")
          endif
        endif
        `render borders
        if borderSizeT > 0 then d3d_box finalX, finalY, (finalX + finalW), (finalY + borderSizeT), _UI_elements(tElementIndex).resolvedStyle.borderTop.color
        if borderSizeB > 0 then d3d_box finalX, (finalY + finalH - borderSizeB), (finalX + finalW), (finalY + finalH), _UI_elements(tElementIndex).resolvedStyle.borderBottom.color
        if borderSizeR > 0 then d3d_box (finalX + finalW - borderSizeR), (finalY + borderSizeT), (finalX + finalW), (finalY + finalH - borderSizeB), _UI_elements(tElementIndex).resolvedStyle.borderRight.color
        if borderSizeL > 0 then d3d_box finalX, (finalY + borderSizeT), (finalX + borderSizeL), (finalY + finalH - borderSizeB), _UI_elements(tElementIndex).resolvedStyle.borderLeft.color
        `render text
        if _UI_elements(tElementIndex).value <> ""
          if _UI_elements(tElementIndex).resolvedStyle.d3dFont > 0
            `get alignment value
            textAlignH = 0
            textAlignV = 0
            select _UI_elements(tElementIndex).resolvedStyle.textAlignH
              case "left": textAlignH = 0 : endcase
              case "center": textAlignH = 1 : endcase
              case "right": textAlignH = 2 : endcase
            endselect
            select _UI_elements(tElementIndex).resolvedStyle.textAlignV
              case "top": textAlignV = 0 : endcase
              case "center": textAlignV = 1 : endcase
              case "bottom": textAlignV = 2 : endcase
            endselect
            d3d_color (_UI_elements(tElementIndex).resolvedStyle.color >> 16) && 0xff, (_UI_elements(tElementIndex).resolvedStyle.color >> 8) && 0xff, _UI_elements(tElementIndex).resolvedStyle.color && 0xff, 255
            d3d_startText
              d3d_boxText _UI_elements(tElementIndex).resolvedStyle.d3dFont, contentX, contentY, contentW, contentH, textAlignH, textAlignV, _UI_elements(tElementIndex).value
            d3d_endText
          else
            `old style, manually position and wrap
          endif
        endif
      endif
    next tElementIndex
    inc drawPass
  endwhile
  UI.status.lastUpdate = timer()
  System_log("ui.dbx", 1, "ui-update", "End gui render," + str$(hitimer(1000000) - renderMark) + "us")
  System_log("ui.dbx", 2, "main", "End Update: UI_updatePageFlow," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function UI_getInterfaceInput()
  System_log("ui.dbx", 2, "main", "Begin Update: UI_getInterfaceInput")
  updateMark as dword
  updateMark = hitimer(1000000)
  `check interface input lockout timer
  if abs(timer() - UI.status.inputMark) > 200
    UI.status.inputReady = TRUE
  else
    UI.status.inputReady = FALSE
  endif
  `check element holds
  System_log("ui.dbx", 1, "ui", "    pre ui clear pauseHold: " + str$(System.timing.pauseHold))
  if System.timing.pauseHold && System.timing.pauseHoldIdUI
    System.timing.pauseHold = System.timing.pauseHold ~~ System.timing.pauseHoldIdUI
  endif
  System_log("ui.dbx", 1, "ui", "    post ui clear pauseHold: " + str$(System.timing.pauseHold))
  UI.status.mouseMode = "gameplay"
  UI.status.keyMode = "gameplay"
  totalElementCount = array count(_UI_elements())
  if totalElementCount = 0
    exitfunction
  endif
  for i = 1 to totalElementCount
    if _UI_elements(i).resolvedStyle.display <> "hidden"
      if _UI_elements(i).holdPause
        System_log("ui.dbx", 1, "ui", "  > element " + _UI_elements(i).id + " is holding pause")
        System.timing.pauseHold = System.timing.pauseHold || System.timing.pauseHoldIdUI
      endif
      if _UI_elements(i).holdMouseFocus
        System_log("ui.dbx", 1, "ui", "  > element " + _UI_elements(i).id + " is holding mouse focus")
        UI.status.mouseMode = "ui"
      endif
      if _UI_elements(i).holdKeyFocus
        System_log("ui.dbx", 1, "ui", "  > element " + _UI_elements(i).id + " is holding key focus")
        UI.status.keyMode = "ui"
      endif
    endif
    `if each hold has been set, skip processing the rest
    if System.timing.pauseHold && System.timing.pauseHoldIdUI
      if UI.status.mouseMode = "ui" and UI.status.keyMode = "ui"
        exit
      endif
    endif
  next i
  System_log("ui.dbx", 1, "ui", "    post ui pause hold element check, pauseHold: " + str$(System.timing.pauseHold))
  if UI.status.mouseModeForced <> "" then UI.status.mouseMode = UI.status.mouseModeForced
  if UI.status.keyModeForced <> "" then UI.status.keyMode = UI.status.keyModeForced
  if UI.status.mouseMode = "ui"
    show mouse
  else
    hide mouse
  endif
  `handle input events. only process the first detected event and skip/discard the rest
  if UI.status.inputReady
    for i = 1 to totalElementCount
      System_log("ui.dbx", 1, "ui-update", "Get interface input for element: " + str$(i))
      `mouse events
      if UI.status.mouseMode = "ui"
        if _UI_elements(i).resolvedStyle.display <> "hidden"
          if _UI_elements(i).enableEvents = 1 or _UI_elements(i).enableEvents = 3 or (_UI_elements(i).enableEvents = 4 and UI.elementDrag.isActive)
            oldPressHold = _UI_elements(i).pressIsHeld
            _UI_elements(i).pressIsHeld = FALSE
            oldMouseOver = _UI_elements(i).mouseIsOver
            _UI_elements(i).mouseIsOver = FALSE
            `drag element
            if UI.elementDrag.dragElementIndex = i
              oldMouseOver = TRUE
              _UI_elements(i).mouseIsOver = TRUE
            endif
            `other elements - get content bounds
            x1 = _UI_elements(i).resolvedStyle._innerX
            x2 = x1 + _UI_elements(i).resolvedStyle._innerW
            y1 = _UI_elements(i).resolvedStyle._innerY
            y2 = y1 + _UI_elements(i).resolvedStyle._innerH
            `check mouse in / mouse press / mouse release
            if Math2d_isPointInBox(System.mouseInput.posX, System.mouseInput.posY, x1, y1, x2, y2)
              _UI_elements(i).mouseIsOver = TRUE
              `is this a move in event?
              if oldMouseOver = FALSE
                `mouse came in, trigger event
                if _UI_elements(i).onMouseIn <> ""
                  System_log("ui.dbx", 2, "ui-event", "Fire mouse onMouseIn: " + _UI_elements(i).onMouseIn + " for element " + str$(i))
                  App_callFunction(_UI_elements(i).onMouseIn, str$(i))
                  exitfunction
                endif
              endif
              `is there a press event?
              if System.mouseInput.leftBtn.isDown
                _UI_elements(i).pressIsHeld = TRUE
                if oldPressHold = FALSE
                  `new press, trigger event
                  UI.status.inputMark = timer()
                  if _UI_elements(i).onPress <> ""
                    System_log("ui.dbx", 2, "ui-event", "Fire mouse onPress: " + _UI_elements(i).onPress + " for element " + str$(i))
                    App_callFunction(_UI_elements(i).onPress, str$(i))
                    exitfunction
                  endif
                endif
              else
                if oldPressHold = TRUE
                  `new release, trigger event
                  if _UI_elements(i).onRelease <> ""
                    System_log("ui.dbx", 2, "ui-event", "Fire mouse onRelease: " + _UI_elements(i).onRelease + " for element " + str$(i))
                    App_callFunction(_UI_elements(i).onRelease, str$(i))
                    exitfunction
                  endif
                endif
              endif
            endif
            `check mouse out
            if oldMouseOver = TRUE and _UI_elements(i).mouseIsOver = FALSE
              `mouse went out, trigger event
              if _UI_elements(i).onMouseOut <> ""
                System_log("ui.dbx", 2, "ui-event", "Fire mouse onMouseOut: " + _UI_elements(i).onMouseOut + " for element " + str$(i))
                App_callFunction(_UI_elements(i).onMouseOut, str$(i))
                exitfunction
              endif
            endif
          endif
        else
          `element is hidden, if mouse was over, trigger onMouseOut
          if _UI_elements(i).mouseIsOver
            _UI_elements(i).mouseIsOver = FALSE
            _UI_elements(i).pressIsHeld = FALSE
            if _UI_elements(i).onMouseOut <> ""
              System_log("ui.dbx", 2, "ui-event", "Fire mouse onMouseOut: " + _UI_elements(i).onMouseOut + " for element " + str$(i))
              App_callFunction(_UI_elements(i).onMouseOut, str$(i))
              exitfunction
            endif
          endif
        endif
      else
        `mouse is bound to gameplay, if mouse was over, trigger onMouseOut
        if _UI_elements(i).mouseIsOver
          _UI_elements(i).mouseIsOver = FALSE
          _UI_elements(i).pressIsHeld = FALSE
          if _UI_elements(i).onMouseOut <> ""
            System_log("ui.dbx", 2, "ui-event", "Fire mouse onMouseOut: " + _UI_elements(i).onMouseOut + " for element " + str$(i))
            App_callFunction(_UI_elements(i).onMouseOut, str$(i))
            exitfunction
          endif
        endif
      endif
      `key events
      if UI.status.keyMode = "ui"
      else
        `check for keybind press /release events
        if _UI_elements(i).enableEvents = 2 or _UI_elements(i).enableEvents = 3
          System_log("ui.dbx", 1, "ui-event", "element " + str$(i) + " is key event enabled for key " + str$(_UI_elements(i).keyBind))
          oldPressHold = _UI_elements(i).pressIsHeld
          _UI_elements(i).pressIsHeld = FALSE
          if _UI_elements(i).keyBind > 0
            if System_keyInput(_UI_elements(i).keyBind).isDown
              System_log("ui.dbx", 1, "ui-event", "key is down")
              _UI_elements(i).pressIsHeld = TRUE
              if oldPressHold = FALSE
                `new press, trigger event
                UI.status.inputMark = timer()
                if _UI_elements(i).onPress <> ""
                  System_log("ui.dbx", 2, "ui-event", "Fire keyboard onPress: " + _UI_elements(i).onPress + " for element " + str$(i))
                  App_callFunction(_UI_elements(i).onPress, str$(i))
                  exitfunction
                endif
              endif
            else
              if oldPressHold = TRUE
                `new release, trigger event
                if _UI_elements(i).onRelease <> ""
                  System_log("ui.dbx", 2, "ui-event", "Fire keyboard onRelease: " + _UI_elements(i).onRelease + " for element " + str$(i))
                  App_callFunction(_UI_elements(i).onRelease, str$(i))
                  exitfunction
                endif
              endif
            endif
          endif
        endif
      endif
    next i
  endif
  System_log("ui.dbx", 2, "main", "End Update: UI_getInterfaceInput," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function UI_load(rDoc as string)
  rDoc = "resource/gui/" + rDoc + ".xml"
  System_log("ui.dbx", 2, "ui", "Begin requested document load: " + rDoc)
  XML_loadFile(rDoc)
  System_log("ui.dbx", 2, "ui", "Finished XML load -> create UI elements.")
  totalCountXML = array count(XML_elements())
    System_log("ui.dbx", 2, "ui", "----------")
    System_log("ui.dbx", 2, "ui", "XML_elements():")
    for i = 0 to array count(XML_elements())
      System_log("ui.dbx", 2, "ui", "xml element: " + str$(i) + ": " + XML_elements(i).tagName + " :: " + "#attributes: " + str$(XML_getAttributeCount(i)))
    next i
    for a = 0 to array count(_XML_attributes())
      System_log("ui.dbx", 2, "ui", "xml attribute: " + str$(a) + ": " + _XML_attributes(a).attribute + " :: " + _XML_attributes(a).value + " > for xml element: " + str$(_XML_attributes(a).elementIndex))
    next a
    System_log("ui.dbx", 2, "ui", "----------")
  for i = 0 to totalCountXML
    System_log("ui.dbx", 1, "ui", "Processing UI tag: " + XML_elements(i).tagName)
    select XML_elements(i).tagName
      case "element":
        parentID as string
        parentID = XML_getAttributeValue(XML_elements(i).parent, "id")
tElement as CLASS_ElementUI
  tElement.styleClassIndex = -1
  tElement.selectedIndex = -1
  tElement.keyBind = -1
  tElement.style.positionAlignH = UI.styleProp.default.positionAlignH
  tElement.style.positionAlignV = UI.styleProp.default.positionAlignV
  tElement.style.position = UI.styleProp.default.position
  tElement.style.top = UI.styleProp.default.top
  tElement.style.left = UI.styleProp.default.left
  tElement.style.paddingTop = UI.styleProp.default.paddingTop
  tElement.style.paddingBottom = UI.styleProp.default.paddingBottom
  tElement.style.paddingLeft = UI.styleProp.default.paddingLeft
  tElement.style.paddingRight = UI.styleProp.default.paddingRight
  tElement.style.width = UI.styleProp.default.width
  tElement.style.height = UI.styleProp.default.height
  tElement.style.borderTop.size = UI.styleProp.default.borderTop.size
  tElement.style.borderTop.color = UI.styleProp.default.borderTop.color
  tElement.style.borderBottom.size = UI.styleProp.default.borderBottom.size
  tElement.style.borderBottom.color = UI.styleProp.default.borderBottom.color
  tElement.style.borderRight.size = UI.styleProp.default.borderRight.size
  tElement.style.borderRight.color = UI.styleProp.default.borderRight.color
  tElement.style.borderLeft.size = UI.styleProp.default.borderLeft.size
  tElement.style.borderLeft.color = UI.styleProp.default.borderLeft.color
  tElement.style.marginTop = UI.styleProp.default.marginTop
  tElement.style.marginBottom = UI.styleProp.default.marginBottom
  tElement.style.marginRight = UI.styleProp.default.marginRight
  tElement.style.marginLeft = UI.styleProp.default.marginLeft
  tElement.style.minWidth = UI.styleProp.default.minWidth
  tElement.style.maxWidth = UI.styleProp.default.maxWidth
  tElement.style.minHeight = UI.styleProp.default.minHeight
  tElement.style.maxHeight = UI.styleProp.default.maxHeight
  tElement.style.backgroundColor = UI.styleProp.default.backgroundColor
  tElement.style.backgroundOpacity = UI.styleProp.default.backgroundOpacity
  tElement.style.backgroundImage = UI.styleProp.default.backgroundImage
  tElement.style.backgroundRepeat = UI.styleProp.default.backgroundRepeat
  tElement.style.backgroundAlignH = UI.styleProp.default.backgroundAlignH
  tElement.style.backgroundAlignV = UI.styleProp.default.backgroundAlignV
  tElement.style.display = UI.styleProp.default.display
  tElement.style.opacity = UI.styleProp.default.opacity
  tElement.style.zIndex = UI.styleProp.default.zIndex
  tElement.style.cursor = UI.styleProp.default.cursor
  tElement.style.color = UI.styleProp.default.color
  tElement.style.font = UI.styleProp.default.font
  tElement.style.fontSize = UI.styleProp.default.fontSize
  tElement.style.d3dFont = UI.styleProp.default.d3dFont
  tElement.style.textDecoration = UI.styleProp.default.textDecoration
  tElement.style.textTransform = UI.styleProp.default.textTransform
  tElement.style.textIndent = UI.styleProp.default.textIndent
  tElement.style.textAlignH = UI.styleProp.default.textAlignH
  tElement.style.textAlignV = UI.styleProp.default.textAlignV

        tElement.id = XML_getAttributeValue(i, "id")
        tElement.name = XML_getAttributeValue(i, "name")
        tElement.tag = XML_getAttributeValue(i, "type")
        tElement.styleClass = XML_getAttributeValue(i, "class")
        tElement.value = XML_getAttributeValue(i, "value")
        tElement.onPress = XML_getAttributeValue(i, "onPress")
        tElement.onRelease = XML_getAttributeValue(i, "onRelease")
        tElement.onMouseIn = XML_getAttributeValue(i, "onMouseIn")
        tElement.onMouseOut = XML_getAttributeValue(i, "onMouseOut")
        tElement.keyBind = intval(XML_getAttributeValue(i, "keyBind"))
        tElement.enableEvents = intval(XML_getAttributeValue(i, "enableEvents"))
        tElement.holdPause = intval(XML_getAttributeValue(i, "holdPause"))
        tElement.holdMouseFocus = intval(XML_getAttributeValue(i, "holdMouseFocus"))
        tElement.holdKeyFocus = intval(XML_getAttributeValue(i, "holdKeyFocus"))
        tElementIndex = _UI_addElement(tElement, parentID)
        System_log("ui.dbx", 2, "ui", "Added UI element: " + str$(tElementIndex))
      endcase
      case "element_style":
        totalCountAttrs = XML_getAttributeCount(i)
        if totalCountAttrs > -1
          tAttr as string
          for a = 0 to totalCountAttrs
            tAttr = XML_getAttributeByIndex(i, a)
            UI_element_setStyleProp(tElementIndex, tAttr, XML_getAttributeValue(i, tAttr))
          next a
        endif
      endcase
      case "class":
tClass as CLASS_StyleClassUI
  tClass.style.positionAlignH = UI.styleProp.default.positionAlignH
  tClass.style.positionAlignV = UI.styleProp.default.positionAlignV
  tClass.style.position = UI.styleProp.default.position
  tClass.style.top = UI.styleProp.default.top
  tClass.style.left = UI.styleProp.default.left
  tClass.style.paddingTop = UI.styleProp.default.paddingTop
  tClass.style.paddingBottom = UI.styleProp.default.paddingBottom
  tClass.style.paddingLeft = UI.styleProp.default.paddingLeft
  tClass.style.paddingRight = UI.styleProp.default.paddingRight
  tClass.style.width = UI.styleProp.default.width
  tClass.style.height = UI.styleProp.default.height
  tClass.style.borderTop.size = UI.styleProp.default.borderTop.size
  tClass.style.borderTop.color = UI.styleProp.default.borderTop.color
  tClass.style.borderBottom.size = UI.styleProp.default.borderBottom.size
  tClass.style.borderBottom.color = UI.styleProp.default.borderBottom.color
  tClass.style.borderRight.size = UI.styleProp.default.borderRight.size
  tClass.style.borderRight.color = UI.styleProp.default.borderRight.color
  tClass.style.borderLeft.size = UI.styleProp.default.borderLeft.size
  tClass.style.borderLeft.color = UI.styleProp.default.borderLeft.color
  tClass.style.marginTop = UI.styleProp.default.marginTop
  tClass.style.marginBottom = UI.styleProp.default.marginBottom
  tClass.style.marginRight = UI.styleProp.default.marginRight
  tClass.style.marginLeft = UI.styleProp.default.marginLeft
  tClass.style.minWidth = UI.styleProp.default.minWidth
  tClass.style.maxWidth = UI.styleProp.default.maxWidth
  tClass.style.minHeight = UI.styleProp.default.minHeight
  tClass.style.maxHeight = UI.styleProp.default.maxHeight
  tClass.style.backgroundColor = UI.styleProp.default.backgroundColor
  tClass.style.backgroundOpacity = UI.styleProp.default.backgroundOpacity
  tClass.style.backgroundImage = UI.styleProp.default.backgroundImage
  tClass.style.backgroundRepeat = UI.styleProp.default.backgroundRepeat
  tClass.style.backgroundAlignH = UI.styleProp.default.backgroundAlignH
  tClass.style.backgroundAlignV = UI.styleProp.default.backgroundAlignV
  tClass.style.display = UI.styleProp.default.display
  tClass.style.opacity = UI.styleProp.default.opacity
  tClass.style.zIndex = UI.styleProp.default.zIndex
  tClass.style.cursor = UI.styleProp.default.cursor
  tClass.style.color = UI.styleProp.default.color
  tClass.style.font = UI.styleProp.default.font
  tClass.style.fontSize = UI.styleProp.default.fontSize
  tClass.style.d3dFont = UI.styleProp.default.d3dFont
  tClass.style.textDecoration = UI.styleProp.default.textDecoration
  tClass.style.textTransform = UI.styleProp.default.textTransform
  tClass.style.textIndent = UI.styleProp.default.textIndent
  tClass.style.textAlignH = UI.styleProp.default.textAlignH
  tClass.style.textAlignV = UI.styleProp.default.textAlignV

        tClass.className = XML_getAttributeValue(i, "name")
        tStyleClassIndex = _UI_addClass(tClass)
        System_log("ui.dbx", 2, "ui", "Added UI styleClass: " + str$(tStyleClassIndex))
      endcase
      case "class_style":
        totalCountAttrs = XML_getAttributeCount(i)
        if totalCountAttrs > -1
          tAttr as string
          for a = 0 to totalCountAttrs
            tAttr = XML_getAttributeByIndex(i, a)
            UI_styleClass_setStyleProp(tStyleClassIndex, tAttr, XML_getAttributeValue(i, tAttr))
          next a
        endif
      endcase
      case "repeater":
      endcase
    endselect
  next i
endfunction
function UI_unload()
  empty array _UI_styleClasses()
  empty array _UI_elements()
  `append root element
tElement as CLASS_ElementUI
  tElement.styleClassIndex = -1
  tElement.selectedIndex = -1
  tElement.keyBind = -1
  tElement.style.positionAlignH = UI.styleProp.default.positionAlignH
  tElement.style.positionAlignV = UI.styleProp.default.positionAlignV
  tElement.style.position = UI.styleProp.default.position
  tElement.style.top = UI.styleProp.default.top
  tElement.style.left = UI.styleProp.default.left
  tElement.style.paddingTop = UI.styleProp.default.paddingTop
  tElement.style.paddingBottom = UI.styleProp.default.paddingBottom
  tElement.style.paddingLeft = UI.styleProp.default.paddingLeft
  tElement.style.paddingRight = UI.styleProp.default.paddingRight
  tElement.style.width = UI.styleProp.default.width
  tElement.style.height = UI.styleProp.default.height
  tElement.style.borderTop.size = UI.styleProp.default.borderTop.size
  tElement.style.borderTop.color = UI.styleProp.default.borderTop.color
  tElement.style.borderBottom.size = UI.styleProp.default.borderBottom.size
  tElement.style.borderBottom.color = UI.styleProp.default.borderBottom.color
  tElement.style.borderRight.size = UI.styleProp.default.borderRight.size
  tElement.style.borderRight.color = UI.styleProp.default.borderRight.color
  tElement.style.borderLeft.size = UI.styleProp.default.borderLeft.size
  tElement.style.borderLeft.color = UI.styleProp.default.borderLeft.color
  tElement.style.marginTop = UI.styleProp.default.marginTop
  tElement.style.marginBottom = UI.styleProp.default.marginBottom
  tElement.style.marginRight = UI.styleProp.default.marginRight
  tElement.style.marginLeft = UI.styleProp.default.marginLeft
  tElement.style.minWidth = UI.styleProp.default.minWidth
  tElement.style.maxWidth = UI.styleProp.default.maxWidth
  tElement.style.minHeight = UI.styleProp.default.minHeight
  tElement.style.maxHeight = UI.styleProp.default.maxHeight
  tElement.style.backgroundColor = UI.styleProp.default.backgroundColor
  tElement.style.backgroundOpacity = UI.styleProp.default.backgroundOpacity
  tElement.style.backgroundImage = UI.styleProp.default.backgroundImage
  tElement.style.backgroundRepeat = UI.styleProp.default.backgroundRepeat
  tElement.style.backgroundAlignH = UI.styleProp.default.backgroundAlignH
  tElement.style.backgroundAlignV = UI.styleProp.default.backgroundAlignV
  tElement.style.display = UI.styleProp.default.display
  tElement.style.opacity = UI.styleProp.default.opacity
  tElement.style.zIndex = UI.styleProp.default.zIndex
  tElement.style.cursor = UI.styleProp.default.cursor
  tElement.style.color = UI.styleProp.default.color
  tElement.style.font = UI.styleProp.default.font
  tElement.style.fontSize = UI.styleProp.default.fontSize
  tElement.style.d3dFont = UI.styleProp.default.d3dFont
  tElement.style.textDecoration = UI.styleProp.default.textDecoration
  tElement.style.textTransform = UI.styleProp.default.textTransform
  tElement.style.textIndent = UI.styleProp.default.textIndent
  tElement.style.textAlignH = UI.styleProp.default.textAlignH
  tElement.style.textAlignV = UI.styleProp.default.textAlignV

  tElement.id = "root"
  tElement.style.width = str$(App.config.screenWidth) + "px"
  tElement.style.height = str$(App.config.screenHeight) + "px"
  tElement.resolvedStyle = tElement.style
  e = _UI_addElement(tElement, "")
endfunction
function UI_loadMedia()
  for i = 0 to array count(_UI_styleClasses())
    if _UI_styleClasses(i).style.backgroundImage > ""
      Media_getImageNumber(_UI_styleClasses(i).style.backgroundImage, 1, 0)
    endif
  next i
  for i = 0 to array count(_UI_elements())
    if _UI_elements(i).style.backgroundImage > ""
      Media_getImageNumber(_UI_elements(i).style.backgroundImage, 1, 0)
    endif
  next i
endfunction
function _UI_parseSizeData(rData as string)
  if rData = ""
    rData = "0px"
  endif
  lastChar$ = fast right$(rData, 1)
  if lastChar$ = "%"
    UI.parsedSizeData.isPercent = TRUE
    UI.parsedSizeData.value = intval(fast left$(rData, fast len(rData) - 1))
  else
    if lastChar$ = "x"
      UI.parsedSizeData.isPercent = FALSE
      UI.parsedSizeData.value = intval(fast left$(rData, fast len(rData) - 2))
    else
      UI.parsedSizeData.isPercent = FALSE
      UI.parsedSizeData.value = intval(rData)
    endif
  endif
endfunction
function _UI_addElement(rElement as CLASS_ElementUI, rParentId as string)
  res = -1
  `append to parent (default or parent not found = 0 = root)
  if rParentId > ""
    for i = 0 to array count(_UI_elements())
      if _UI_elements(i).id = rParentId
        rElement.parent = i
        rElement.parentID = rParentId
        exit
      endif
    next i
  endif
  `get style class index
  System_log("ui.dbx", 1, "ui", "retrieve class index for class: " + rElement.styleClass + " on add element: " + rElement.id)
  if rElement.styleClass > ""
    for i = 0 to array count(_UI_styleClasses())
      if _UI_styleClasses(i).className = rElement.styleClass
        rElement.styleClassIndex = i
        System_log("ui.dbx", 1, "ui", "found class index :" + str$(i))
        exit
      endif
    next i
  endif
  array insert at bottom _UI_elements()
  _UI_elements() = rElement
  res = array count(_UI_elements())
endfunction res
function _UI_cleanElementList()
  GCcount = 0
  GCindex = -1
  for i = 1 to array count(_UI_elements())
    if _UI_elements(i).id = "GC_THIS"
      inc GCcount
      GCindex = i
    endif
  next i
  System_log("ui.dbx", 1, "ui", "Cleaning element list. Garbage count: " + str$(GCcount))
  if GCcount > 0
    if GCcount > 1
      for c = 1 to GCcount
        for i = 1 to array count(_UI_elements())
          if _UI_elements(i).id = "GC_THIS"
            System_log("ui.dbx", 1, "ui", " GC index: " + str$(i))
            array delete element _UI_elements(), i
            exit
          endif
        next i
      next c
    else
      System_log("ui.dbx", 1, "ui", " GC index: " + str$(GCindex))
      array delete element _UI_elements(), GCindex
    endif
  endif
  for tElementIndex = 1 to array count(_UI_elements())
    if _UI_elements(tElementIndex).parentID > ""
      for i = 1 to array count(_UI_elements())
        if _UI_elements(i).id = _UI_elements(tElementIndex).parentID
          System_log("ui.dbx", 1, "ui", " >> parentID '" + _UI_elements(tElementIndex).parentID + "' of index " + str$(tElementIndex) + " matched to ID " + _UI_elements(i).id + " of index " + str$(i) + " set parent of " + str$(tElementIndex) + " to " + str$(i))
          _UI_elements(tElementIndex).parent = i
          exit
        endif
      next i
    else
      _UI_elements(tElementIndex).parent = 0
    endif
  next tElementIndex
endfunction
function _UI_removeElementByIndex(rElementIndex as integer)
  System_log("ui.dbx", 1, "ui", "Request remove element index: " + str$(rElementIndex))
  tElementID$ = _UI_elements(rElementIndex).id
  System_log("ui.dbx", 1, "ui", "  ID: " + tElementID$)
  _UI_elements(rElementIndex).id = "GC_THIS"
  _UI_elements(rElementIndex).parentID = "GC_THIS"
  keepLooking = TRUE
  while keepLooking
    keepLooking = FALSE
    for i = 1 to array count(_UI_elements())
      if _UI_elements(i).parentID = tElementID$
        System_log("ui.dbx", 1, "ui", "  Found child of: " + tElementID$ + " at index " + str$(i))
        keepLooking = TRUE
        _UI_removeElementByIndex(i)
        exit
      endif
    next i
  endwhile
endfunction
function _UI_getElementById(rID as string)
  res = -1
  for i = 0 to array count(_UI_elements())
    if _UI_elements(i).id = rID
      res = i
      exitfunction res
    endif
  next i
endfunction res
function _UI_getElementsByName(rName as string)
  empty array UI_elementsGroup()
  for i = 0 to array count(_UI_elements())
    if _UI_elements(i).name = rName
      array insert at bottom UI_elementsGroup()
      UI_elementsGroup() = i
    endif
  next i
endfunction
function _UI_getElementsByTagName(rName as string)
  empty array UI_elementsGroup()
  for i = 0 to array count(_UI_elements())
    if _UI_elements(i).tag = rName
      array insert at bottom UI_elementsGroup()
      UI_elementsGroup() = i
    endif
  next i
endfunction
function _UI_getElementsByClassName(rName as string)
  empty array UI_elementsGroup()
  for i = 0 to array count(_UI_elements())
    if _UI_elements(i).styleClass = rName
      array insert at bottom UI_elementsGroup()
      UI_elementsGroup() = i
    endif
  next i
endfunction
function _UI_updateTransitions()
  GCcount = 0
  GCindex = -1
  for i = 0 to array count(_UI_transitions())
    tElapsed# = System.timing.timer - _UI_transitions(i).start * 1.0
    if instr(_UI_transitions(i).initVal, "px")
      tInit# = val(fast left$(_UI_transitions(i).initVal, fast len(_UI_transitions(i).initVal) - 2))
    else
      if instr(_UI_transitions(i).initVal, "%")
        tInit# = val(fast left$(_UI_transitions(i).initVal, fast len(_UI_transitions(i).initVal) - 1))
      else
        tInit# = val(_UI_transitions(i).initVal)
      endif
    endif
    if instr(_UI_transitions(i).targetVal, "px")
      tTarget# = val(fast left$(_UI_transitions(i).targetVal, fast len(_UI_transitions(i).targetVal) - 2))
    else
      if instr(_UI_transitions(i).targetVal, "%")
        tTarget# = val(fast left$(_UI_transitions(i).targetVal, fast len(_UI_transitions(i).targetVal) - 1))
      else
        tTarget# = val(_UI_transitions(i).targetVal)
      endif
    endif
    if tElapsed# < _UI_transitions(i).duration
      tVal# = tInit# + (((tTarget# - tInit#) / _UI_transitions(i).duration) * tElapsed#)
      UI_element_setStyleProp(_UI_transitions(i).elementIndex, _UI_transitions(i).prop, str$(tVal#))
      if tTarget# > tInit#
        if tVal# >= tTarget#
          if _UI_transitions(i).callback > "" then App_callFunction(_UI_transitions(i).callback, str$(_UI_transitions(i).elementIndex))
          _UI_transitions(i).elementIndex = -1
          inc GCcount
          GCindex = i
        endif
      else
        if tVal# <= tTarget#
          if _UI_transitions(i).callback > "" then App_callFunction(_UI_transitions(i).callback, str$(_UI_transitions(i).elementIndex))
          _UI_transitions(i).elementIndex = -1
          inc GCcount
          GCindex = i
        endif
      endif
    else
      UI_element_setStyleProp(_UI_transitions(i).elementIndex, _UI_transitions(i).prop, _UI_transitions(i).targetVal)
      if _UI_transitions(i).callback > "" then App_callFunction(_UI_transitions(i).callback, str$(_UI_transitions(i).elementIndex))
      _UI_transitions(i).elementIndex = -1
      inc GCcount
      GCindex = i
    endif
  next i
  if GCcount > 0
    if GCcount > 1
      for c = 1 to GCcount
        for i = 0 to array count(_UI_transitions())
          if _UI_transitions(i).elementIndex = -1
            array delete element _UI_transitions(), i
            exit
          endif
        next i
      next c
    else
      array delete element _UI_transitions(), GCindex
    endif
  endif
endfunction
function _UI_elements_resetResolvedStyleProps()
  for i = 1 to array count(_UI_elements())
    _UI_elements(i).resolvedStyle.positionAlignH = UI.styleProp.default.positionAlignH
    _UI_elements(i).resolvedStyle.positionAlignV = UI.styleProp.default.positionAlignV
    _UI_elements(i).resolvedStyle.position = UI.styleProp.default.position
    _UI_elements(i).resolvedStyle.top = UI.styleProp.default.top
    _UI_elements(i).resolvedStyle.left = UI.styleProp.default.left
    _UI_elements(i).resolvedStyle.paddingTop = UI.styleProp.default.paddingTop
    _UI_elements(i).resolvedStyle.paddingBottom = UI.styleProp.default.paddingBottom
    _UI_elements(i).resolvedStyle.paddingLeft = UI.styleProp.default.paddingLeft
    _UI_elements(i).resolvedStyle.paddingRight = UI.styleProp.default.paddingRight
    _UI_elements(i).resolvedStyle.width = UI.styleProp.default.width
    _UI_elements(i).resolvedStyle.height = UI.styleProp.default.height
    _UI_elements(i).resolvedStyle.borderTop.size = UI.styleProp.default.borderTop.size
    _UI_elements(i).resolvedStyle.borderTop.color = UI.styleProp.default.borderTop.color
    _UI_elements(i).resolvedStyle.borderBottom.size = UI.styleProp.default.borderBottom.size
    _UI_elements(i).resolvedStyle.borderBottom.color = UI.styleProp.default.borderBottom.color
    _UI_elements(i).resolvedStyle.borderRight.size = UI.styleProp.default.borderRight.size
    _UI_elements(i).resolvedStyle.borderRight.color = UI.styleProp.default.borderRight.color
    _UI_elements(i).resolvedStyle.borderLeft.size = UI.styleProp.default.borderLeft.size
    _UI_elements(i).resolvedStyle.borderLeft.color = UI.styleProp.default.borderLeft.color
    _UI_elements(i).resolvedStyle.marginTop = UI.styleProp.default.marginTop
    _UI_elements(i).resolvedStyle.marginBottom = UI.styleProp.default.marginBottom
    _UI_elements(i).resolvedStyle.marginRight = UI.styleProp.default.marginRight
    _UI_elements(i).resolvedStyle.marginLeft = UI.styleProp.default.marginLeft
    _UI_elements(i).resolvedStyle.minWidth = UI.styleProp.default.minWidth
    _UI_elements(i).resolvedStyle.maxWidth = UI.styleProp.default.maxWidth
    _UI_elements(i).resolvedStyle.minHeight = UI.styleProp.default.minHeight
    _UI_elements(i).resolvedStyle.maxHeight = UI.styleProp.default.maxHeight
    _UI_elements(i).resolvedStyle.backgroundColor = UI.styleProp.default.backgroundColor
    _UI_elements(i).resolvedStyle.backgroundOpacity = UI.styleProp.default.backgroundOpacity
    _UI_elements(i).resolvedStyle.backgroundImage = UI.styleProp.default.backgroundImage
    _UI_elements(i).resolvedStyle.backgroundRepeat = UI.styleProp.default.backgroundRepeat
    _UI_elements(i).resolvedStyle.backgroundAlignH = UI.styleProp.default.backgroundAlignH
    _UI_elements(i).resolvedStyle.backgroundAlignV = UI.styleProp.default.backgroundAlignV
    _UI_elements(i).resolvedStyle.display = UI.styleProp.default.display
    _UI_elements(i).resolvedStyle.opacity = UI.styleProp.default.opacity
    _UI_elements(i).resolvedStyle.zIndex = UI.styleProp.default.zIndex
    _UI_elements(i).resolvedStyle.cursor = UI.styleProp.default.cursor
    _UI_elements(i).resolvedStyle.color = UI.styleProp.default.color
    _UI_elements(i).resolvedStyle.font = UI.styleProp.default.font
    _UI_elements(i).resolvedStyle.fontSize = UI.styleProp.default.fontSize
    _UI_elements(i).resolvedStyle.d3dFont = UI.styleProp.default.d3dFont
    _UI_elements(i).resolvedStyle.textDecoration = UI.styleProp.default.textDecoration
    _UI_elements(i).resolvedStyle.textTransform = UI.styleProp.default.textTransform
    _UI_elements(i).resolvedStyle.textIndent = UI.styleProp.default.textIndent
    _UI_elements(i).resolvedStyle.textAlignH = UI.styleProp.default.textAlignH
    _UI_elements(i).resolvedStyle.textAlignV = UI.styleProp.default.textAlignV
    _UI_elements(i).resolvedStyle._isResolved = FALSE
  next i
  `root element is always = app window dimensions, this provides context for all child %
  _UI_elements(0).resolvedStyle.width = str$(App.config.screenWidth)
  _UI_elements(0).resolvedStyle.height = str$(App.config.screenHeight)
  _UI_elements(0).resolvedStyle._finalX = 0
  _UI_elements(0).resolvedStyle._finalY = 0
  _UI_elements(0).resolvedStyle._finalW = App.config.screenWidth
  _UI_elements(0).resolvedStyle._finalH = App.config.screenHeight
  _UI_elements(0).resolvedStyle._innerX = 0
  _UI_elements(0).resolvedStyle._innerY = 0
  _UI_elements(0).resolvedStyle._innerW = App.config.screenWidth
  _UI_elements(0).resolvedStyle._innerH = App.config.screenHeight
  _UI_elements(0).resolvedStyle._isResolved = TRUE
endfunction
function _UI_elements_applyInheritedStyleProps(rElementIndex as integer, rParentIndex as integer)
  `set resolved value = parent resolved value for inheritable props
  _UI_elements(rElementIndex).resolvedStyle.display = _UI_elements(rParentIndex).resolvedStyle.display
  _UI_elements(rElementIndex).resolvedStyle.opacity = _UI_elements(rParentIndex).resolvedStyle.opacity
  _UI_elements(rElementIndex).resolvedStyle.zIndex = _UI_elements(rParentIndex).resolvedStyle.zIndex
  _UI_elements(rElementIndex).resolvedStyle.cursor = _UI_elements(rParentIndex).resolvedStyle.cursor
  _UI_elements(rElementIndex).resolvedStyle.color = _UI_elements(rParentIndex).resolvedStyle.color
  _UI_elements(rElementIndex).resolvedStyle.font = _UI_elements(rParentIndex).resolvedStyle.font
  _UI_elements(rElementIndex).resolvedStyle.fontSize = _UI_elements(rParentIndex).resolvedStyle.fontSize
  _UI_elements(rElementIndex).resolvedStyle.d3dFont = _UI_elements(rParentIndex).resolvedStyle.d3dFont
  _UI_elements(rElementIndex).resolvedStyle.textDecoration = _UI_elements(rParentIndex).resolvedStyle.textDecoration
  _UI_elements(rElementIndex).resolvedStyle.textTransform = _UI_elements(rParentIndex).resolvedStyle.textTransform
  _UI_elements(rElementIndex).resolvedStyle.textIndent = _UI_elements(rParentIndex).resolvedStyle.textIndent
  _UI_elements(rElementIndex).resolvedStyle.textAlignH = _UI_elements(rParentIndex).resolvedStyle.textAlignH
  _UI_elements(rElementIndex).resolvedStyle.textAlignV = _UI_elements(rParentIndex).resolvedStyle.textAlignV
endfunction
function _UI_elements_applyClassStyleProps(rElementIndex as integer, rClassIndex as integer)
  System_log("ui.dbx", 2, "ui-update", "Apply enabled style props for class " + str$(rClassIndex) + " on element " + str$(rElementIndex) + " enabled: " + str$(_UI_styleClasses(rClassIndex).style._visualPropertyEnabled))
  if UI.styleProp.id.positionAlignH && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.positionAlignH = _UI_styleClasses(rClassIndex).style.positionAlignH
  endif
  if UI.styleProp.id.positionAlignV && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.positionAlignV = _UI_styleClasses(rClassIndex).style.positionAlignV
  endif
  if UI.styleProp.id.position && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.position = _UI_styleClasses(rClassIndex).style.position
  endif
  if UI.styleProp.id.top && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.top = _UI_styleClasses(rClassIndex).style.top
  endif
  if UI.styleProp.id.left && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.left = _UI_styleClasses(rClassIndex).style.left
  endif
  if UI.styleProp.id.paddingTop && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingTop = _UI_styleClasses(rClassIndex).style.paddingTop
  endif
  if UI.styleProp.id.paddingBottom && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingBottom = _UI_styleClasses(rClassIndex).style.paddingBottom
  endif
  if UI.styleProp.id.paddingLeft && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingLeft = _UI_styleClasses(rClassIndex).style.paddingLeft
  endif
  if UI.styleProp.id.paddingRight && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingRight = _UI_styleClasses(rClassIndex).style.paddingRight
  endif
  if UI.styleProp.id.width && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.width = _UI_styleClasses(rClassIndex).style.width
  endif
  if UI.styleProp.id.height && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.height = _UI_styleClasses(rClassIndex).style.height
  endif
  if UI.styleProp.id.borderTop && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderTop.size = _UI_styleClasses(rClassIndex).style.borderTop.size
    _UI_elements(rElementIndex).resolvedStyle.borderTop.color = _UI_styleClasses(rClassIndex).style.borderTop.color
  endif
  if UI.styleProp.id.borderBottom && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderBottom.size = _UI_styleClasses(rClassIndex).style.borderBottom.size
    _UI_elements(rElementIndex).resolvedStyle.borderBottom.color = _UI_styleClasses(rClassIndex).style.borderBottom.color
  endif
  if UI.styleProp.id.borderLeft && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderLeft.size = _UI_styleClasses(rClassIndex).style.borderLeft.size
    _UI_elements(rElementIndex).resolvedStyle.borderLeft.color = _UI_styleClasses(rClassIndex).style.borderLeft.color
  endif
  if UI.styleProp.id.borderRight && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderRight.size = _UI_styleClasses(rClassIndex).style.borderRight.size
    _UI_elements(rElementIndex).resolvedStyle.borderRight.color = _UI_styleClasses(rClassIndex).style.borderRight.color
  endif
  if UI.styleProp.id.marginTop && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginTop = _UI_styleClasses(rClassIndex).style.marginTop
  endif
  if UI.styleProp.id.marginBottom && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginBottom = _UI_styleClasses(rClassIndex).style.marginBottom
  endif
  if UI.styleProp.id.marginLeft && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginLeft = _UI_styleClasses(rClassIndex).style.marginLeft
  endif
  if UI.styleProp.id.marginRight && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginRight = _UI_styleClasses(rClassIndex).style.marginRight
  endif
  if UI.styleProp.id.minWidth && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.minWidth = _UI_styleClasses(rClassIndex).style.minWidth
  endif
  if UI.styleProp.id.maxWidth && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.maxWidth = _UI_styleClasses(rClassIndex).style.maxWidth
  endif
  if UI.styleProp.id.minHeight && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.minHeight = _UI_styleClasses(rClassIndex).style.minHeight
  endif
  if UI.styleProp.id.maxHeight && _UI_styleClasses(rClassIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.maxHeight = _UI_styleClasses(rClassIndex).style.maxHeight
  endif
  if UI.styleProp.id.backgroundColor && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundColor = _UI_styleClasses(rClassIndex).style.backgroundColor
  endif
  if UI.styleProp.id.backgroundOpacity && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundOpacity = _UI_styleClasses(rClassIndex).style.backgroundOpacity
  endif
  if UI.styleProp.id.backgroundImage && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundImage = _UI_styleClasses(rClassIndex).style.backgroundImage
  endif
  if UI.styleProp.id.backgroundRepeat && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundRepeat = _UI_styleClasses(rClassIndex).style.backgroundRepeat
  endif
  if UI.styleProp.id.backgroundAlignH && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundAlignH = _UI_styleClasses(rClassIndex).style.backgroundAlignH
  endif
  if UI.styleProp.id.backgroundAlignV && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundAlignV = _UI_styleClasses(rClassIndex).style.backgroundAlignV
  endif
  if UI.styleProp.id.display && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.display = _UI_styleClasses(rClassIndex).style.display
  endif
  if UI.styleProp.id.opacity && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.opacity = _UI_styleClasses(rClassIndex).style.opacity
  endif
  if UI.styleProp.id.zIndex && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.zIndex = _UI_styleClasses(rClassIndex).style.zIndex
  endif
  if UI.styleProp.id.cursor && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.cursor = _UI_styleClasses(rClassIndex).style.cursor
  endif
  if UI.styleProp.id.color && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.color = _UI_styleClasses(rClassIndex).style.color
  endif
  if UI.styleProp.id.font && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.font = _UI_styleClasses(rClassIndex).style.font
  endif
  if UI.styleProp.id.fontSize && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.fontSize = _UI_styleClasses(rClassIndex).style.fontSize
  endif
  if UI.styleProp.id.d3dFont && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.d3dFont = _UI_styleClasses(rClassIndex).style.d3dFont
  endif
  if UI.styleProp.id.textDecoration && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textDecoration = _UI_styleClasses(rClassIndex).style.textDecoration
  endif
  if UI.styleProp.id.textTransform && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textTransform = _UI_styleClasses(rClassIndex).style.textTransform
  endif
  if UI.styleProp.id.textIndent && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textIndent = _UI_styleClasses(rClassIndex).style.textIndent
  endif
  if UI.styleProp.id.textAlignH && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textAlignH = _UI_styleClasses(rClassIndex).style.textAlignH
  endif
  if UI.styleProp.id.textAlignV && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textAlignV = _UI_styleClasses(rClassIndex).style.textAlignV
  endif
endfunction
function _UI_elements_applyElementStyleProps(rElementIndex as integer)
  System_log("ui.dbx", 2, "ui-update", "Apply enabled style props on element " + str$(rElementIndex) + " enabled: " + str$(_UI_elements(rElementIndex).style._flowPropertyEnabled))
  if UI.styleProp.id.positionAlignH && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.positionAlignH = _UI_elements(rElementIndex).style.positionAlignH
  endif
  if UI.styleProp.id.positionAlignV && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.positionAlignV = _UI_elements(rElementIndex).style.positionAlignV
  endif
  if UI.styleProp.id.position && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.position = _UI_elements(rElementIndex).style.position
  endif
  if UI.styleProp.id.top && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.top = _UI_elements(rElementIndex).style.top
  endif
  if UI.styleProp.id.left && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.left = _UI_elements(rElementIndex).style.left
  endif
  if UI.styleProp.id.paddingTop && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingTop = _UI_elements(rElementIndex).style.paddingTop
  endif
  if UI.styleProp.id.paddingBottom && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingBottom = _UI_elements(rElementIndex).style.paddingBottom
  endif
  if UI.styleProp.id.paddingLeft && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingLeft = _UI_elements(rElementIndex).style.paddingLeft
  endif
  if UI.styleProp.id.paddingRight && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.paddingRight = _UI_elements(rElementIndex).style.paddingRight
  endif
  if UI.styleProp.id.width && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.width = _UI_elements(rElementIndex).style.width
  endif
  if UI.styleProp.id.height && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.height = _UI_elements(rElementIndex).style.height
  endif
  if UI.styleProp.id.borderTop && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderTop.size = _UI_elements(rElementIndex).style.borderTop.size
    _UI_elements(rElementIndex).resolvedStyle.borderTop.color = _UI_elements(rElementIndex).style.borderTop.color
  endif
  if UI.styleProp.id.borderBottom && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderBottom.size = _UI_elements(rElementIndex).style.borderBottom.size
    _UI_elements(rElementIndex).resolvedStyle.borderBottom.color = _UI_elements(rElementIndex).style.borderBottom.color
  endif
  if UI.styleProp.id.borderLeft && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderLeft.size = _UI_elements(rElementIndex).style.borderLeft.size
    _UI_elements(rElementIndex).resolvedStyle.borderLeft.color = _UI_elements(rElementIndex).style.borderLeft.color
  endif
  if UI.styleProp.id.borderRight && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.borderRight.size = _UI_elements(rElementIndex).style.borderRight.size
    _UI_elements(rElementIndex).resolvedStyle.borderRight.color = _UI_elements(rElementIndex).style.borderRight.color
  endif
  if UI.styleProp.id.marginTop && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginTop = _UI_elements(rElementIndex).style.marginTop
  endif
  if UI.styleProp.id.marginBottom && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginBottom = _UI_elements(rElementIndex).style.marginBottom
  endif
  if UI.styleProp.id.marginLeft && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginLeft = _UI_elements(rElementIndex).style.marginLeft
  endif
  if UI.styleProp.id.marginRight && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.marginRight = _UI_elements(rElementIndex).style.marginRight
  endif
  if UI.styleProp.id.minWidth && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.minWidth = _UI_elements(rElementIndex).style.minWidth
  endif
  if UI.styleProp.id.maxWidth && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.maxWidth = _UI_elements(rElementIndex).style.maxWidth
  endif
  if UI.styleProp.id.minHeight && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.minHeight = _UI_elements(rElementIndex).style.minHeight
  endif
  if UI.styleProp.id.maxHeight && _UI_elements(rElementIndex).style._flowPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.maxHeight = _UI_elements(rElementIndex).style.maxHeight
  endif
  if UI.styleProp.id.backgroundColor && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundColor = _UI_elements(rElementIndex).style.backgroundColor
  endif
  if UI.styleProp.id.backgroundOpacity && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundOpacity = _UI_elements(rElementIndex).style.backgroundOpacity
  endif
  if UI.styleProp.id.backgroundImage && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundImage = _UI_elements(rElementIndex).style.backgroundImage
  endif
  if UI.styleProp.id.backgroundRepeat && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundRepeat = _UI_elements(rElementIndex).style.backgroundRepeat
  endif
  if UI.styleProp.id.backgroundAlignH && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundAlignH = _UI_elements(rElementIndex).style.backgroundAlignH
  endif
  if UI.styleProp.id.backgroundAlignV && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.backgroundAlignV = _UI_elements(rElementIndex).style.backgroundAlignV
  endif
  if UI.styleProp.id.display && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.display = _UI_elements(rElementIndex).style.display
  endif
  if UI.styleProp.id.opacity && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.opacity = _UI_elements(rElementIndex).style.opacity
  endif
  if UI.styleProp.id.zIndex && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.zIndex = _UI_elements(rElementIndex).style.zIndex
  endif
  if UI.styleProp.id.cursor && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.cursor = _UI_elements(rElementIndex).style.cursor
  endif
  if UI.styleProp.id.color && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.color = _UI_elements(rElementIndex).style.color
  endif
  if UI.styleProp.id.font && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.font = _UI_elements(rElementIndex).style.font
  endif
  if UI.styleProp.id.fontSize && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.fontSize = _UI_elements(rElementIndex).style.fontSize
  endif
  if UI.styleProp.id.d3dFont && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.d3dFont = _UI_elements(rElementIndex).style.d3dFont
  endif
  if UI.styleProp.id.textDecoration && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textDecoration = _UI_elements(rElementIndex).style.textDecoration
  endif
  if UI.styleProp.id.textTransform && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textTransform = _UI_elements(rElementIndex).style.textTransform
  endif
  if UI.styleProp.id.textIndent && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textIndent = _UI_elements(rElementIndex).style.textIndent
  endif
  if UI.styleProp.id.textAlignH && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textAlignH = _UI_elements(rElementIndex).style.textAlignH
  endif
  if UI.styleProp.id.textAlignV && _UI_elements(rElementIndex).style._visualPropertyEnabled
    _UI_elements(rElementIndex).resolvedStyle.textAlignV = _UI_elements(rElementIndex).style.textAlignV
  endif
endfunction
function _UI_elements_resolveFlowValues(rElementIndex as integer, rParentIndex as integer)
  System_log("ui.dbx", 1, "ui-update", "Resolve flow values for element: " + str$(rElementIndex) + " " + _UI_elements(rElementIndex).id)
  `if position:absolute -> use root as parent for calculations
  if _UI_elements(rElementIndex).resolvedStyle.position = "absolute"
    rParentIndex = 0
  endif
  `get parent values
  parentW = intval(_UI_elements(rParentIndex).resolvedStyle.width)
  parentH = intval(_UI_elements(rParentIndex).resolvedStyle.height)
  parentContentW = _UI_elements(rParentIndex).resolvedStyle._innerW
  parentContentH = _UI_elements(rParentIndex).resolvedStyle._innerH
  parentX = _UI_elements(rParentIndex).resolvedStyle._finalX
  parentY = _UI_elements(rParentIndex).resolvedStyle._finalY
  parentContentX = _UI_elements(rParentIndex).resolvedStyle._innerX
  parentContentY = _UI_elements(rParentIndex).resolvedStyle._innerY
  parentVisible$ = _UI_elements(rParentIndex).resolvedStyle.display
  `get element values
  `width
  System_log("ui.dbx", 1, "ui-update", "get width: " + _UI_elements(rElementIndex).resolvedStyle.width + " :: " + _UI_elements(rElementIndex).style.width)
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.width)
  resolvedW = UI.parsedSizeData.value
  resolvedContentW = resolvedW
  if UI.parsedSizeData.isPercent
    `remove parent padding from child final width if child width is % of parent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedW = parentContentW * tFactor#
    resolvedContentW = resolvedW
  endif
  `height
  System_log("ui.dbx", 1, "ui-update", "get height: " + _UI_elements(rElementIndex).resolvedStyle.height + " :: " + _UI_elements(rElementIndex).style.height)
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.height)
  resolvedH = UI.parsedSizeData.value
  resolvedContentH = resolvedH
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedH = parentContentH * tFactor#
    resolvedContentH = resolvedH
  endif
  System_log("ui.dbx", 1, "ui-update", "Resolved dimensions " + str$(resolvedW) + "'" + str$(resolvedH) + " : " + str$(resolvedContentW) + "'" + str$(resolvedContentH))
  `TODO: handle overflow (visible, hidden, scroll)
  `padding
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.paddingTop)
  resolvedPadT = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedPadT = parentContentH * tFactor#
    inc resolvedH, resolvedPadT
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.paddingBottom)
  resolvedPadB = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedPadB = parentContentH * tFactor#
    inc resolvedH, resolvedPadB
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.paddingRight)
  resolvedPadR = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedPadR = parentContentW * tFactor#
    inc resolvedW, resolvedPadR
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.paddingLeft)
  resolvedPadL = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedPadL = parentContentW * tFactor#
    inc resolvedW, resolvedPadL
  endif
  `margin
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.marginTop)
  resolvedMargT = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedMargT = parentContentH * tFactor#
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.marginBottom)
  resolvedMargB = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedMargB = parentContentH * tFactor#
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.marginRight)
  resolvedMargR = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedMargR = parentContentW * tFactor#
  endif
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.marginLeft)
  resolvedMargL = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedMargL = parentContentW * tFactor#
  endif
  `border-width
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.borderTop.size)
  resolvedBorderT = UI.parsedSizeData.value
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.borderBottom.size)
  resolvedBorderB = UI.parsedSizeData.value
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.borderRight.size)
  resolvedBorderR = UI.parsedSizeData.value
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.borderLeft.size)
  resolvedBorderL = UI.parsedSizeData.value
  `text-indent
  _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.textIndent)
  resolvedTextIndent = UI.parsedSizeData.value
  if UI.parsedSizeData.isPercent
    tFactor# = UI.parsedSizeData.value * 0.01
    resolvedTextIndent = parentContentW * tFactor#
  endif
  if UI.elementDrag.isActive and UI.elementDrag.dragElementIndex = rElementIndex
    resolvedTop = 0
    resolvedLeft = 0
    resolvedX = System.mouseInput.posX - UI.elementDrag.offsetX
    resolvedY = System.mouseInput.posY - UI.elementDrag.offsetY
  else
    `position offset
    _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.top)
    resolvedTop = UI.parsedSizeData.value
    if UI.parsedSizeData.isPercent
      tFactor# = UI.parsedSizeData.value * 0.01
      resolvedTop = parentContentH * tFactor#
    endif
    _UI_parseSizeData(_UI_elements(rElementIndex).resolvedStyle.left)
    resolvedLeft = UI.parsedSizeData.value
    if UI.parsedSizeData.isPercent
      tFactor# = UI.parsedSizeData.value * 0.01
      resolvedLeft = parentContentW * tFactor#
    endif
    `final coordinates
    System_log("ui.dbx", 1, "ui-update", "Resolve position with alignH=" + _UI_elements(rElementIndex).resolvedStyle.positionAlignH)
    select _UI_elements(rElementIndex).resolvedStyle.positionAlignH
      case "left":
        resolvedX = parentContentX + resolvedMargL + resolvedBorderL + resolvedLeft
      endcase
      case "right":
        resolvedX = (parentContentX + parentContentW) - (resolvedMargR + resolvedW + resolvedBorderR) + resolvedLeft
      endcase
      case "center":
        resolvedX = (parentContentX + (parentContentW * 0.5)) - (resolvedMargR + (resolvedW * 0.5) + resolvedBorderR) + resolvedLeft
      endcase
    endselect
    select _UI_elements(rElementIndex).resolvedStyle.positionAlignV
      case "top":
        resolvedY = parentContentY + resolvedMargT + resolvedBorderT + resolvedTop
      endcase
      case "bottom":
        resolvedY = (parentContentY + parentContentH) - (resolvedMargB + resolvedH + resolvedBorderB) + resolvedTop
      endcase
      case "center":
        resolvedY = (parentContentY + (parentContentH * 0.5)) - (resolvedMargB + (resolvedH * 0.5) + resolvedBorderB) + resolvedTop
      endcase
    endselect
  endif
  `apply to resolvedStyle
  _UI_elements(rElementIndex).resolvedStyle.width = str$(resolvedW)
  _UI_elements(rElementIndex).resolvedStyle.height = str$(resolvedH)
  _UI_elements(rElementIndex).resolvedStyle.paddingTop = str$(resolvedPadT)
  _UI_elements(rElementIndex).resolvedStyle.paddingBottom = str$(resolvedPadB)
  _UI_elements(rElementIndex).resolvedStyle.paddingRight = str$(resolvedPadR)
  _UI_elements(rElementIndex).resolvedStyle.paddingLeft = str$(resolvedPadL)
  _UI_elements(rElementIndex).resolvedStyle.marginTop = str$(resolvedMargT)
  _UI_elements(rElementIndex).resolvedStyle.marginBottom = str$(resolvedMargB)
  _UI_elements(rElementIndex).resolvedStyle.marginRight = str$(resolvedMargR)
  _UI_elements(rElementIndex).resolvedStyle.marginLeft = str$(resolvedMargL)
  _UI_elements(rElementIndex).resolvedStyle.borderTop.size = str$(resolvedBorderT)
  _UI_elements(rElementIndex).resolvedStyle.borderBottom.size = str$(resolvedBorderB)
  _UI_elements(rElementIndex).resolvedStyle.borderRight.size = str$(resolvedBorderR)
  _UI_elements(rElementIndex).resolvedStyle.borderLeft.size = str$(resolvedBorderL)
  _UI_elements(rElementIndex).resolvedStyle.textIndent = str$(resolvedTextIndent)
  _UI_elements(rElementIndex).resolvedStyle.top = str$(resolvedTop)
  _UI_elements(rElementIndex).resolvedStyle.left = str$(resolvedLeft)
  _UI_elements(rElementIndex).resolvedStyle._finalX = resolvedX
  _UI_elements(rElementIndex).resolvedStyle._finalY = resolvedY
  _UI_elements(rElementIndex).resolvedStyle._finalW = resolvedW
  _UI_elements(rElementIndex).resolvedStyle._finalH = resolvedH
  _UI_elements(rElementIndex).resolvedStyle._innerX = resolvedX + resolvedPadL
  _UI_elements(rElementIndex).resolvedStyle._innerY = resolvedY + resolvedPadT
  _UI_elements(rElementIndex).resolvedStyle._innerW = resolvedContentW
  _UI_elements(rElementIndex).resolvedStyle._innerH = resolvedContentH
  _UI_elements(rElementIndex).resolvedStyle._isResolved = TRUE
  if parentVisible$ = "hidden"
    _UI_elements(rElementIndex).resolvedStyle.display = "hidden"
  endif
  System_log("ui.dbx", 2, "ui-update", "Resolved position " + str$(resolvedX) + "." + str$(resolvedY) + " : " + str$(resolvedX + resolvedPadL) + "." + str$(resolvedY + resolvedPadT))
endfunction
function _UI_addClass(rClass as CLASS_StyleClassUI)
  res = -1
  array insert at bottom _UI_styleClasses()
  _UI_styleClasses() = rClass
  res = array count(_UI_styleClasses())
endfunction res
function _UI_getStyleClassByName(rName as string)
  res = -1
  for i = 0 to array count(_UI_styleClasses())
    if _UI_styleClasses(i).className = rName
      res = i
      exitfunction res
    endif
  next i
endfunction res
`====================================================================================================================================================
function UI_element_setStyleClass(rElementIndex as integer, rStyleClass as string)
  for i = 0 to array count(_UI_styleClasses())
    if _UI_styleClasses(i).className = rStyleClass
      _UI_elements(rElementIndex).styleClassIndex = i
      _UI_elements(rElementIndex).styleClass = rStyleClass
      exitfunction
    endif
  next i
endfunction
function UI_element_hide(rElementIndex as string)
  UI_element_setStyleProp(intval(rElementIndex), "display", "hidden")
endfunction
function UI_element_setStyleProp(rElementIndex as integer, rProp as string, rValue as string)
  System_log("ui.dbx", 1, "ui", "setting ui prop: " + rProp + " to " + rValue + " for element: " + str$(rElementIndex))
  `resolve color values
  if instr(rProp, "color") <> 0
    valFirstChar$ = fast left$(rValue, 1)
    valLen = fast len(rValue)
    if valFirstChar$ = "#"
      if valLen = 4
        `process short form hex #000
        valR$ = mid$(rValue, 2, 1)
        valG$ = mid$(rValue, 3, 1)
        valB$ = mid$(rValue, 4, 1)
        rValue = "0xff" + valR$ + valR$ + valG$ + valG$ + valB$ + valB$
        rValue = str$(hex to decimal(rValue))
      else
        if valLen = 7
          `process rgb hex #000000
          rValue = "0xff" + fast right$(rValue, valLen - 1)
          rValue = str$(hex to decimal(rValue))
        else
          `process argb hex #ff000000
          rValue = "0x" + fast right$(rValue, valLen - 1)
          rValue = str$(hex to decimal(rValue))
        endif
      endif
    else
      if valFirstChar$ = "r"
        `process rgb cast rgb(0,0,0)
        rValue = fast left$(rValue, valLen - 1)
        rValue = fast right$(rValue, valLen - 4)
        valR = intval(first token$(rValue, ","))
        valG = intval(next token$(","))
        valB = intval(next token$(","))
        rValue = str$(rgb(valR, valG, valB))
      endif
    endif
  endif
  select rProp
    case "position-alignH":
      System_log("ui.dbx", 1, "ui", "Set style prop: position-alignH=" + rValue + " for element " + str$(rElementIndex) + " alignH id = " + str$(UI.styleProp.id.positionAlignH))
      _UI_elements(rElementIndex).style.positionAlignH = rValue
      System_log("ui.dbx", 1, "ui", "flow enabled pre: " + str$(_UI_elements(rElementIndex).style._flowPropertyEnabled))
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.positionAlignH
      System_log("ui.dbx", 1, "ui", "flow enabled post: " + str$(_UI_elements(rElementIndex).style._flowPropertyEnabled))
    endcase
    case "position-alignV":
      _UI_elements(rElementIndex).style.positionAlignV = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.positionAlignV
    endcase
    case "position":
      _UI_elements(rElementIndex).style.position = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.position
    endcase
    case "top":
      _UI_elements(rElementIndex).style.top = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.top
    endcase
    case "left":
      _UI_elements(rElementIndex).style.left = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.left
    endcase
    case "padding":
      _UI_elements(rElementIndex).style.paddingTop = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingTop
      _UI_elements(rElementIndex).style.paddingBottom = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingBottom
      _UI_elements(rElementIndex).style.paddingLeft = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingLeft
      _UI_elements(rElementIndex).style.paddingRight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingRight
    endcase
    case "padding-top":
      _UI_elements(rElementIndex).style.paddingTop = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingTop
    endcase
    case "padding-bottom":
      _UI_elements(rElementIndex).style.paddingBottom = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingBottom
    endcase
    case "padding-left":
      _UI_elements(rElementIndex).style.paddingLeft = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingLeft
    endcase
    case "padding-right":
      _UI_elements(rElementIndex).style.paddingRight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingRight
    endcase
    case "width":
      System_log("ui.dbx", 1, "ui", "Set style prop: width=" + rValue + " for element " + str$(rElementIndex) + " width id = " + str$(UI.styleProp.id.width))
      _UI_elements(rElementIndex).style.width = rValue
      System_log("ui.dbx", 1, "ui", "flow enabled pre: " + str$(_UI_elements(rElementIndex).style._flowPropertyEnabled))
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.width
      System_log("ui.dbx", 1, "ui", "flow enabled post: " + str$(_UI_elements(rElementIndex).style._flowPropertyEnabled))
    endcase
    case "height":
      _UI_elements(rElementIndex).style.height = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.height
    endcase
    case "border-width":
      _UI_elements(rElementIndex).style.borderTop.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
      _UI_elements(rElementIndex).style.borderBottom.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
      _UI_elements(rElementIndex).style.borderLeft.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
      _UI_elements(rElementIndex).style.borderRight.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-top-width":
      _UI_elements(rElementIndex).style.borderTop.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
    endcase
    case "border-bottom-width":
      _UI_elements(rElementIndex).style.borderBottom.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
    endcase
    case "border-left-width":
      _UI_elements(rElementIndex).style.borderLeft.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
    endcase
    case "border-right-width":
      _UI_elements(rElementIndex).style.borderRight.size = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-color":
      _UI_elements(rElementIndex).style.borderTop.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
      _UI_elements(rElementIndex).style.borderBottom.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
      _UI_elements(rElementIndex).style.borderLeft.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
      _UI_elements(rElementIndex).style.borderRight.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-top-color":
      _UI_elements(rElementIndex).style.borderTop.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
    endcase
    case "border-bottom-color":
      _UI_elements(rElementIndex).style.borderBottom.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
    endcase
    case "border-left-color":
      _UI_elements(rElementIndex).style.borderLeft.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
    endcase
    case "border-right-color":
      _UI_elements(rElementIndex).style.borderRight.color = intval(rValue)
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "margin":
      _UI_elements(rElementIndex).style.marginTop = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginTop
      _UI_elements(rElementIndex).style.marginBottom = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginBottom
      _UI_elements(rElementIndex).style.marginLeft = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginLeft
      _UI_elements(rElementIndex).style.marginRight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginRight
    endcase
    case "margin-top":
      _UI_elements(rElementIndex).style.marginTop = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginTop
    endcase
    case "margin-bottom":
      _UI_elements(rElementIndex).style.marginBottom = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginBottom
    endcase
    case "margin-left":
      _UI_elements(rElementIndex).style.marginLeft = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginLeft
    endcase
    case "margin-right":
      _UI_elements(rElementIndex).style.marginRight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.marginRight
    endcase
    case "min-width":
      _UI_elements(rElementIndex).style.minWidth = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.minWidth
    endcase
    case "max-width":
      _UI_elements(rElementIndex).style.maxWidth = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.maxWidth
    endcase
    case "min-height":
      _UI_elements(rElementIndex).style.minHeight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.minHeight
    endcase
    case "max-height":
      _UI_elements(rElementIndex).style.maxHeight = rValue
      _UI_elements(rElementIndex).style._flowPropertyEnabled = _UI_elements(rElementIndex).style._flowPropertyEnabled || UI.styleProp.id.maxHeight
    endcase
    case "background-color":
      _UI_elements(rElementIndex).style.backgroundColor = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundColor
    endcase
    case "background-opacity":
      _UI_elements(rElementIndex).style.backgroundOpacity = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundOpacity
    endcase
    case "background-image":
      _UI_elements(rElementIndex).style.backgroundImage = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundImage
      if UI.styleProp.id.backgroundOpacity && _UI_elements(rElementIndex).style._visualPropertyEnabled = FALSE
        _UI_elements(rElementIndex).style.backgroundOpacity = 100
        _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundOpacity
      endif
    endcase
    case "background-repeat":
      _UI_elements(rElementIndex).style.backgroundRepeat = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundRepeat
    endcase
    case "background-alignH":
      _UI_elements(rElementIndex).style.backgroundAlignH = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundAlignH
    endcase
    case "background-alignV":
      _UI_elements(rElementIndex).style.backgroundAlignV = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundAlignV
    endcase
    case "display":
      _UI_elements(rElementIndex).style.display = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.display
    endcase
    case "opacity":
      _UI_elements(rElementIndex).style.opacity = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.opacity
    endcase
    case "z-index":
      _UI_elements(rElementIndex).style.zIndex = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.zIndex
    endcase
    case "cursor":
      _UI_elements(rElementIndex).style.cursor = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.cursor
    endcase
    case "color":
      _UI_elements(rElementIndex).style.color = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.color
    endcase
    case "font":
      _UI_elements(rElementIndex).style.font = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.font
    endcase
    case "font-size":
      _UI_elements(rElementIndex).style.fontSize = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.fontSize
    endcase
    case "d3d-font":
      _UI_elements(rElementIndex).style.d3dFont = intval(rValue)
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.d3dFont
    endcase
    case "text-decoration":
      _UI_elements(rElementIndex).style.textDecoration = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.textDecoration
    endcase
    case "text-transform":
      _UI_elements(rElementIndex).style.textTransform = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.textTransform
    endcase
    case "text-indent":
      _UI_elements(rElementIndex).style.textIndent = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.textIndent
    endcase
    case "text-alignH":
      _UI_elements(rElementIndex).style.textAlignH = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.textAlignH
    endcase
    case "text-alignV":
      _UI_elements(rElementIndex).style.textAlignV = rValue
      _UI_elements(rElementIndex).style._visualPropertyEnabled = _UI_elements(rElementIndex).style._visualPropertyEnabled || UI.styleProp.id.textAlignV
    endcase
  endselect
endfunction
`====================================================================================================================================================
function UI_styleClass_setStyleProp(rClassIndex as integer, rProp as string, rValue as string)
  `resolve color values
  if instr(rProp, "color") <> 0
    valFirstChar$ = fast left$(rValue, 1)
    valLen = fast len(rValue)
    if valFirstChar$ = "#"
      if valLen = 4
        `process short form hex #000
        valR$ = mid$(rValue, 2, 1)
        valG$ = mid$(rValue, 3, 1)
        valB$ = mid$(rValue, 4, 1)
        rValue = "0xff" + valR$ + valR$ + valG$ + valG$ + valB$ + valB$
        rValue = str$(hex to decimal(rValue))
      else
        if valLen = 7
          `process rgb hex #000000
          rValue = "0xff" + fast right$(rValue, valLen - 1)
          rValue = str$(hex to decimal(rValue))
        else
          `process argb hex #ff000000
          rValue = "0x" + fast right$(rValue, valLen - 1)
          rValue = str$(hex to decimal(rValue))
        endif
      endif
    else
      if valFirstChar$ = "r"
        `process rgb cast rgb(0,0,0)
        rValue = fast left$(rValue, valLen - 1)
        rValue = fast right$(rValue, valLen - 4)
        valR = intval(first token$(rValue, ","))
        valG = intval(next token$(","))
        valB = intval(next token$(","))
        rValue = str$(rgb(valR, valG, valB))
      endif
    endif
  endif
  select rProp
    case "position-alignH":
      _UI_styleClasses(rClassIndex).style.positionAlignH = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.positionAlignH
    endcase
    case "position-alignV":
      _UI_styleClasses(rClassIndex).style.positionAlignV = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.positionAlignV
    endcase
    case "position":
      _UI_styleClasses(rClassIndex).style.position = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.position
    endcase
    case "top":
      _UI_styleClasses(rClassIndex).style.top = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.top
    endcase
    case "left":
      _UI_styleClasses(rClassIndex).style.left = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.left
    endcase
    case "padding":
      _UI_styleClasses(rClassIndex).style.paddingTop = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingTop
      _UI_styleClasses(rClassIndex).style.paddingBottom = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingBottom
      _UI_styleClasses(rClassIndex).style.paddingLeft = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingLeft
      _UI_styleClasses(rClassIndex).style.paddingRight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingRight
    endcase
    case "padding-top":
      _UI_styleClasses(rClassIndex).style.paddingTop = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingTop
    endcase
    case "padding-bottom":
      _UI_styleClasses(rClassIndex).style.paddingBottom = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingBottom
    endcase
    case "padding-left":
      _UI_styleClasses(rClassIndex).style.paddingLeft = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingLeft
    endcase
    case "padding-right":
      _UI_styleClasses(rClassIndex).style.paddingRight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.paddingRight
    endcase
    case "width":
      _UI_styleClasses(rClassIndex).style.width = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.width
    endcase
    case "height":
      _UI_styleClasses(rClassIndex).style.height = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.height
    endcase
    case "border-width":
      _UI_styleClasses(rClassIndex).style.borderTop.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
      _UI_styleClasses(rClassIndex).style.borderBottom.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
      _UI_styleClasses(rClassIndex).style.borderLeft.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
      _UI_styleClasses(rClassIndex).style.borderRight.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-top-width":
      _UI_styleClasses(rClassIndex).style.borderTop.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
    endcase
    case "border-bottom-width":
      _UI_styleClasses(rClassIndex).style.borderBottom.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
    endcase
    case "border-left-width":
      _UI_styleClasses(rClassIndex).style.borderLeft.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
    endcase
    case "border-right-width":
      _UI_styleClasses(rClassIndex).style.borderRight.size = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-color":
      _UI_styleClasses(rClassIndex).style.borderTop.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
      _UI_styleClasses(rClassIndex).style.borderBottom.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
      _UI_styleClasses(rClassIndex).style.borderLeft.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
      _UI_styleClasses(rClassIndex).style.borderRight.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "border-top-color":
      _UI_styleClasses(rClassIndex).style.borderTop.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderTop
    endcase
    case "border-bottom-color":
      _UI_styleClasses(rClassIndex).style.borderBottom.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderBottom
    endcase
    case "border-left-color":
      _UI_styleClasses(rClassIndex).style.borderLeft.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderLeft
    endcase
    case "border-right-color":
      _UI_styleClasses(rClassIndex).style.borderRight.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.borderRight
    endcase
    case "margin":
      _UI_styleClasses(rClassIndex).style.marginTop = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginTop
      _UI_styleClasses(rClassIndex).style.marginBottom = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginBottom
      _UI_styleClasses(rClassIndex).style.marginLeft = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginLeft
      _UI_styleClasses(rClassIndex).style.marginRight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginRight
    endcase
    case "margin-top":
      _UI_styleClasses(rClassIndex).style.marginTop = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginTop
    endcase
    case "margin-bottom":
      _UI_styleClasses(rClassIndex).style.marginBottom = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginBottom
    endcase
    case "margin-left":
      _UI_styleClasses(rClassIndex).style.marginLeft = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginLeft
    endcase
    case "margin-right":
      _UI_styleClasses(rClassIndex).style.marginRight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.marginRight
    endcase
    case "min-width":
      _UI_styleClasses(rClassIndex).style.minWidth = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.minWidth
    endcase
    case "max-width":
      _UI_styleClasses(rClassIndex).style.maxWidth = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.maxWidth
    endcase
    case "min-height":
      _UI_styleClasses(rClassIndex).style.minHeight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.minHeight
    endcase
    case "max-height":
      _UI_styleClasses(rClassIndex).style.maxHeight = rValue
      _UI_styleClasses(rClassIndex).style._flowPropertyEnabled = _UI_styleClasses(rClassIndex).style._flowPropertyEnabled || UI.styleProp.id.maxHeight
    endcase
    case "background-color":
      _UI_styleClasses(rClassIndex).style.backgroundColor = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundColor
    endcase
    case "background-opacity":
      _UI_styleClasses(rClassIndex).style.backgroundOpacity = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundOpacity
    endcase
    case "background-image":
      _UI_styleClasses(rClassIndex).style.backgroundImage = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundImage
      if UI.styleProp.id.backgroundOpacity && _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = FALSE
        _UI_styleClasses(rClassIndex).style.backgroundOpacity = 100
        _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundOpacity
      endif
    endcase
    case "background-repeat":
      _UI_styleClasses(rClassIndex).style.backgroundRepeat = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundRepeat
    endcase
    case "background-alignH":
      _UI_styleClasses(rClassIndex).style.backgroundAlignH = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundAlignH
    endcase
    case "background-alignV":
      _UI_styleClasses(rClassIndex).style.backgroundAlignV = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.backgroundAlignV
    endcase
    case "display":
      _UI_styleClasses(rClassIndex).style.display = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.display
    endcase
    case "opacity":
      _UI_styleClasses(rClassIndex).style.opacity = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.opacity
    endcase
    case "z-index":
      _UI_styleClasses(rClassIndex).style.zIndex = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.zIndex
    endcase
    case "cursor":
      _UI_styleClasses(rClassIndex).style.cursor = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.cursor
    endcase
    case "color":
      _UI_styleClasses(rClassIndex).style.color = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.color
    endcase
    case "font":
      _UI_styleClasses(rClassIndex).style.font = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.font
    endcase
    case "font-size":
      _UI_styleClasses(rClassIndex).style.fontSize = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.fontSize
    endcase
    case "d3d-font":
      _UI_styleClasses(rClassIndex).style.d3dFont = intval(rValue)
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.d3dFont
    endcase
    case "text-decoration":
      _UI_styleClasses(rClassIndex).style.textDecoration = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.textDecoration
    endcase
    case "text-transform":
      _UI_styleClasses(rClassIndex).style.textTransform = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.textTransform
    endcase
    case "text-indent":
      _UI_styleClasses(rClassIndex).style.textIndent = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.textIndent
    endcase
    case "text-alignH":
      _UI_styleClasses(rClassIndex).style.textAlignH = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.textAlignH
    endcase
    case "text-alignV":
      _UI_styleClasses(rClassIndex).style.textAlignV = rValue
      _UI_styleClasses(rClassIndex).style._visualPropertyEnabled = _UI_styleClasses(rClassIndex).style._visualPropertyEnabled || UI.styleProp.id.textAlignV
    endcase
  endselect
endfunction
function UI_controller_common_doHoverByType(eventArgs as string)
  tElementIndex = intval(eventArgs)
  select _UI_elements(tElementIndex).tag
    case "button":
      if UI.styleProp.id.backgroundImage && _UI_elements(tElementIndex).style._visualPropertyEnabled
        System_log("ui.dbx", 1, "ui-event", ">> pop btn by background-image: " + _UI_elements(tElementIndex).name + "-pop.png")
        UI_element_setStyleProp(tElementIndex, "background-image", _UI_elements(tElementIndex).name + "-pop.png")
      else
        System_log("ui.dbx", 1, "ui-event", ">> pop btn by styleClass: " + _UI_elements(tElementIndex).name + "-pop")
        UI_element_setStyleClass(tElementIndex, _UI_elements(tElementIndex).name + "-pop")
      endif
    endcase
  endselect
endfunction
function UI_controller_common_doUnHoverByType(eventArgs as string)
  tElementIndex = intval(eventArgs)
  select _UI_elements(tElementIndex).tag
    case "button":
      if UI.styleProp.id.backgroundImage && _UI_elements(tElementIndex).style._visualPropertyEnabled
        UI_element_setStyleProp(tElementIndex, "background-image", _UI_elements(tElementIndex).name + ".png")
      else
        System_log("ui.dbx", 1, "ui-event", ">> unpop btn by styleClass: " + _UI_elements(tElementIndex).name)
        UI_element_setStyleClass(tElementIndex, _UI_elements(tElementIndex).name)
      endif
    endcase
  endselect
endfunction
function UI_controller_common_doPressByType(eventArgs as string)
  tElementIndex = intval(eventArgs)
  select _UI_elements(tElementIndex).tag
    case "button"
      if UI.styleProp.id.backgroundImage && _UI_elements(tElementIndex).style._visualPropertyEnabled
        UI_element_setStyleProp(tElementIndex, "background-image", _UI_elements(tElementIndex).name + "-push.png")
      else
        UI_element_setStyleClass(tElementIndex, _UI_elements(tElementIndex).name + "-push")
      endif
    endcase
  endselect
endfunction
function UI_controller_common_doReleaseByType(eventArgs as string)
  tElementIndex = intval(eventArgs)
  select _UI_elements(tElementIndex).tag
    case "button"
    endcase
    case "input"
    endcase
  endselect
endfunction
function UI_controller_titleMenu_init()
  fCount = 0
  set dir System.appRoot + "\resource\data\save\"
  perform checklist for files
  for i = 1 to checklist quantity()
    if fast right$(checklist string$(i), 4) = ".sav"
      inc fCount, 1
    endif
  next i
  set dir System.appRoot
  if fCount > 1
    loadElementIndex = _UI_getElementById("titleMenu-opt-loadGame")
    _UI_elements(loadElementIndex).enableEvents = 1
    UI_element_setStyleProp(loadElementIndex, "color", "#ffffff")
  endif
  if file exist("resource\data\save\resume")
    fHandle = find free file()
    open to read fHandle, "resource\data\save\resume"
    read string fHandle, App.currentProfile
    close file fHandle
    resumeElementIndex = _UI_getElementById("titleMenu-opt-resumeGame")
    _UI_elements(resumeElementIndex).enableEvents = 1
    UI_element_setStyleProp(resumeElementIndex, "color", "#ffffff")
  endif
endfunction
function UI_controller_titleMenu_resumeGame(eventArgs as string)
  tElementIndex = intval(eventArgs)
  titleElementIndex = _UI_getElementById("titleMenu")
  UI_element_setStyleProp(titleElementIndex, "display", "hidden")
  App.status.loadState = 1
  App.status.loadType = 2
  App.status.loadStage = 0
  App_updateSplashScreen("- Initializing Level")
  if World.scene.sceneRecord > 0
    System_log("main.dbx", 3, "main", "Unloading previous scene on resumeGame titleMenu event")
    d3d_box -10, -10, App.config.screenWidth + 10, App.config.screenHeight + 10, d3d_rgba(20, 20, 20, 255)
    tCount = array count(_App_splashScreenResource())
    for i = 0 to tCount
      paste image _App_splashScreenResource(i).imgNum, _App_splashScreenResource(i).pasteX, _App_splashScreenResource(i).pasteY, 1
    next i
    pasteY = App.config.screenHeight
    if App.config.screenHeight > 1080
      pasteY = ((App.config.screenHeight - 1080) / 2) + 1080
    endif
    System_log("main.dbx", 1, "main", "splashResourceCount: " + str$(tCount))
    AdvLighting_Update()
    World_unloadScene()
  endif
  World_loadScene()
  UI_loadMedia()
  App.status.loadStage = 3
  App_updateSplashScreen("- Finishing")
endfunction
function UI_controller_titleMenu_newGame(eventArgs as string)
  pElementIndex = _UI_getElementById("titleMenu-newGame")
  UI_element_setStyleProp(pElementIndex, "display", "visible")
endfunction
function UI_controller_titleMenu_newGameCreate(eventArgs as string)
  profElementIndex = _UI_getElementById("newGame-profNam")
  tProfileName$ = _UI_elements(profElementIndex).value
  if file exist("resource/data/save/" + tProfileName$ + ".sav")
      delete file "resource/data/save/" + tProfileName$ + ".sav"
  endif
  dbProfile = Sqlite_getConnection("resource/data/save/"+ tProfileName$ +".sav") 
  res = Sqlite Begin Transaction()
    n = Sqlite Add To Transaction("CREATE TABLE `waypoint` (`sceneID` INTEGER, `waypointID` INTEGER)")
    n = Sqlite Add To Transaction("insert into waypoint (sceneID) values (1)")
    n = Sqlite Add To Transaction("CREATE TABLE `characters` (`record`  INTEGER PRIMARY KEY AUTOINCREMENT, `name`  TEXT, `class`  TEXT, `textureVariant`  TEXT, `isLiving`  INTEGER DEFAULT 1)")
    n = Sqlite Add To Transaction("insert into characters (name, class) values ('MainCharacterNameHere', 'stickman')")
    n = Sqlite Add To Transaction("CREATE TABLE `accessories` (`accessoryID` INTEGER, `class`  TEXT,  `fileName`  TEXT,  `textureVariant`  TEXT,  `isEquip`  INTEGER,  `condition`  INTEGER,  `itemID`  INTEGER,  `initDisabled`  INTEGER DEFAULT 0,  PRIMARY KEY(accessoryID))")
    n = Sqlite Add To Transaction("insert into accessories (class, fileName, textureVariant, isEquip, condition, itemID, initDisabled) values ('Carliet', 'hair', '', '0', '', '', '')")
  res = Sqlite Commit Transaction(dbProfile)
  App.currentProfile = tProfileName$ + ".sav"
  if file exist("resource/data/save/resume") then delete file "resource/data/save/resume"
  fHandle = find free file()
  open to write fHandle, "resource/data/save/resume"
  write string fHandle, App.currentProfile
  close file fHandle
  resumeElementIndex = _UI_getElementById("titleMenu-opt-resumeGame")
  _UI_elements(resumeElementIndex).enableEvents = 1
  UI_element_setStyleProp(resumeElementIndex, "color", "#ffffff")
  pElementIndex = _UI_getElementById("titleMenu-newGame")
  UI_element_setStyleProp(pElementIndex, "display", "hidden")
  UI_controller_titleMenu_resumeGame(str$(resumeElementIndex))
endfunction
function UI_controller_titleMenu_newGameCancel(eventArgs as string)
  pElementIndex = _UI_getElementById("titleMenu-newGame")
  UI_element_setStyleProp(pElementIndex, "display", "hidden")
endfunction
function UI_controller_titleMenu_loadGame(eventArgs as string)
  if file exist("resource/data/save/resume") then delete file "resource/data/save/resume"
  tProfile$ = System_getFileFromDialog(System.appRoot + "resource\data\save\,Load Profile,.sav,Open")
    split string tProfile$, "/"
    tProfile$ = get split word$(split count())
  set dir System.appRoot
  App.currentProfile = tProfile$
  fHandle = find free file()
  open to write fHandle, "resource/data/save/resume"
  write string fHandle, tProfile$
  close file fHandle
  resumeElementIndex = _UI_getElementById("titleMenu-opt-resumeGame")
  _UI_elements(resumeElementIndex).enableEvents = 1
  UI_element_setStyleProp(resumeElementIndex, "color", "#ffffff")
  UI_controller_titleMenu_resumeGame(str$(resumeElementIndex))
endfunction
function UI_controller_titleMenu_quitGame(eventArgs as string)
  App_closeGame(FALSE)
endfunction
dev_controls_module_init:
  App_addUpdate("Controls_getDevInput", "", FALSE)
return
function Controls_getDevInput()
  System_log("dev-controls.dbx", 2, "main", "Begin Update: Controls_getDevInput")
  updateMark as dword
  updateMark = hitimer(1000000)
  tTimer = timer()
  UI.status.mouseModeForced = ""
  UI.status.keyModeForced = ""
    if System_keyInput(      ENUM_KEY_F1      ).isDown and System_keyInput(ENUM_KEY_F1).wasDown = FALSE
      App.status.debugModeIsActive = 1 - App.status.debugModeIsActive
    endif
    if System_keyInput(      ENUM_KEY_F2      ).isDown and System_keyInput(ENUM_KEY_F2).wasDown = FALSE
      App.status.loadState = 5
    endif
    if System_keyInput(      ENUM_KEY_F3      ).isDown and System_keyInput(ENUM_KEY_F3).wasDown = FALSE
    endif
    if System_keyInput(      ENUM_KEY_F4      ).isDown and System_keyInput(ENUM_KEY_F4).wasDown = FALSE
      System_log("dev-controls.dbx", 10, "error", " ----- !!! MARK LOG HERE !!! -----")
    endif
  System_log("dev-controls.dbx", 2, "main", "End Update: Controls_getDevInput," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
controls_module_init:
  System_log("controls.dbx", 2, "main", "Begin module load: controls.")
  App_updateSplashScreen("- Controls")
  type Camera_type_configData
    maxRange as float
    baseDistance as float
    baseHeightFactor as float
    defaultFOV as float 
    precision as float  
  endtype
  type Camera_type_cameraBaseData
    tilt as float
    pan as float
    zoom as float
    x as float
    y as float
    z as float
    oldx as float
    oldy as float
    oldz as float
    fx as float 
    fy as float 
    fz as float 
    vx as float 
    vy as float 
    vz as float 
    fov as float
    offsetAngle as float
    offsetDist as float
    distance as float
    heightFactor as float
    focusObjectNum as integer 
    focusObjectType as byte 
    focalTargetNum as integer 
    focalDistance  as float
    delay as integer
  endtype
  type Camera_type_statusData
    hasControl as boolean
    controlMode as byte 
  endtype
  type STATIC_CLASS_Camera
    config as Camera_type_configData
    status as Camera_type_statusData
    baseData as Camera_type_cameraBaseData
  endtype
  type Controls_type_assignedKeyDetail
    device as byte 
    bind as integer 
  endtype
  type Controls_type_assignedKeyMovementData
    forward as integer 
    backward as integer
    left as integer
    right as integer
    upward as integer
    downward as integer
    speedBoost as integer
    speedSlow as integer
    runToggle as integer
    strafeToggle as integer
  endtype
  type Controls_type_assignedKeyActionData
    useInteractable as integer
  endtype
  type Controls_type_assignedKeyData
    movement as Controls_type_assignedKeyMovementData
    action as Controls_type_assignedKeyActionData
  endtype
  type STATIC_CLASS_Controls
    assignedKeys as Controls_type_assignedKeyData
  endtype
  GLOBAL Camera as STATIC_CLASS_Camera
  GLOBAL Controls as STATIC_CLASS_Controls
  _Camera_init()
  _Controls_init()
  System_log("controls.dbx", 2, "main", "End module load: controls.")
return
function _Camera_init()
  Camera.config.baseDistance = 2.5
  Camera.config.baseHeightFactor = 0.96
  Camera.config.defaultFOV = 35.489 
  Camera.config.precision = 8.0
  Camera.config.maxRange = FX.configAL.cameraRangeMax
  if UI.status.mouseMode = "gameplay" then Camera.status.hasControl = TRUE
  Camera.status.controlMode = 1 
  Camera.baseData.tilt = camera angle x()
  Camera.baseData.pan = camera angle y()
  Camera.baseData.zoom = 1.0
  Camera.baseData.fov = Camera.config.defaultFOV
  Camera.baseData.focalTargetNum = -1
  Camera.baseData.focusObjectNum = -1
  Camera.baseData.delay = timer()
  App_addUpdate("Camera_updatePhysicalState", "UI_getInterfaceInput,Controls_getGameplayInput", TRUE) 
endfunction
function Camera_updatePhysicalState()
  System_log("controls.dbx", 2, "main", "Begin Update: Camera_updatePhysicalState")
  updateMark as dword
  updateMark = hitimer(1000000)
  tTimer = timer()
  if SYSTEM.status.gamePauseState = 1 and AL_Blur > 0
    set effect constant float PostFilter_GetRenderTargetEffect(AL_Blur),"DOFNearFocus",1.0
    set effect constant float PostFilter_GetRenderTargetEffect(AL_Blur),"DOFFarFocus",1.0
    exitfunction
  endif
  if UI.status.mouseMode = "gameplay"
    Camera.status.hasControl = TRUE
  else
    Camera.status.hasControl = FALSE
    exitfunction
  endif
  Camera.baseData.oldx = Camera.baseData.x
  Camera.baseData.oldy = Camera.baseData.y
  Camera.baseData.oldz = Camera.baseData.z
  if Camera.status.hasControl
    if System.timing.delta > 33
      inc Camera.baseData.tilt, (System.mouseInput.moveY * 0.2)
      inc Camera.baseData.pan, (System.mouseInput.moveX * 0.2)
    else
      Camera.baseData.tilt = curvevalue(Camera.baseData.tilt + System.mouseInput.moveY, Camera.baseData.tilt, Camera.config.precision)
      Camera.baseData.pan = curvevalue(Camera.baseData.pan + System.mouseInput.moveX, Camera.baseData.pan, Camera.config.precision)
    endif
    Camera.baseData.tilt = wrapvalue(Camera.baseData.tilt)
    Camera.baseData.pan = wrapvalue(Camera.baseData.pan)
    if Camera.baseData.tilt > 50.0 and Camera.baseData.tilt < 180.0
      Camera.baseData.tilt = 50.0
    endif
    if Camera.baseData.tilt < 310.0 and Camera.baseData.tilt > 180.0
      Camera.baseData.tilt = 310.0
    endif
  endif
  select Camera.status.controlMode
    case 0:
    endcase
    case 1: 
      if Camera.baseData.focusObjectNum < 1
        System_log("controls.dbx", 4, "error", "ERROR: Camera is in anchored mode, but is not bound to an object.")
        App_closeGame(TRUE)
      endif
      Camera.baseData.zoom = 0.0
      Camera.baseData.distance = Camera.config.baseDistance * World.envConfig.scaleMeter
      Camera.baseData.heightFactor = 0.98
      Camera.baseData.fx = object position x(Camera.baseData.focusObjectNum)
      Camera.baseData.fy = object position y(Camera.baseData.focusObjectNum)
      Camera.baseData.fz = object position z(Camera.baseData.focusObjectNum)
      d# = cos(Camera.baseData.tilt) * Camera.baseData.distance
      Camera.baseData.x = Camera.baseData.fx + sin(Camera.baseData.pan) * d#
      Camera.baseData.y = Camera.baseData.fy + sin(Camera.baseData.tilt) * Camera.baseData.distance
      Camera.baseData.z = Camera.baseData.fz + cos(Camera.baseData.pan) * d#
      if Camera.baseData.focusObjectType = 0 
        offsetFocalHeight# = 0.0
        offsetY# = 0.0
        Camera.baseData.vx = Camera.baseData.fx - Camera.baseData.x
        Camera.baseData.vy = Camera.baseData.fy - Camera.baseData.y
        Camera.baseData.vz = Camera.baseData.fz - Camera.baseData.z
      endif
      if Camera.baseData.focusObjectType = 1 
        offsetFocalHeight# = 10.0
        offsetY# = object size y(Camera.baseData.focusObjectNum, 1) * Camera.baseData.heightFactor
        inc Camera.baseData.fy, offsetY#
        Camera.baseData.vx = Camera.baseData.fx - Camera.baseData.x
        Camera.baseData.vy = (Camera.baseData.fy + offsetFocalHeight#) - (Camera.baseData.y + offsetY#)
        Camera.baseData.vz = Camera.baseData.fz - Camera.baseData.z
      endif
      position camera Camera.baseData.x, Camera.baseData.y + offsetY#, Camera.baseData.z
      point camera Camera.baseData.fx, Camera.baseData.fy, Camera.baseData.fz
      oldFocalDist# = Camera.baseData.focalDistance
      limitX# = Camera.baseData.fx + (Camera.baseData.vx * 1024.0)
      limitY# = (Camera.baseData.fy + offsetFocalHeight#) + (Camera.baseData.vy * 1024.0)
      limitZ# = Camera.baseData.fz + (Camera.baseData.vz * 1024.0)
      if sc_intersectObject(0, Camera.baseData.fx, (Camera.baseData.fy + offsetFocalHeight#), Camera.baseData.fz, limitX#, limitY#, limitZ#) > 0
        Camera.baseData.focalTargetNum = sc_getObjectHit()
        Camera.baseData.focalDistance = sc_getCollisionDistance()
      else
        Camera.baseData.focalTargetNum = -1
        Camera.baseData.focalDistance = Terrain_Ray(Camera.baseData.fx, (Camera.baseData.fy + offsetFocalHeight#), Camera.baseData.fz, limitX#, limitY#, limitZ#)
      endif
      Camera.baseData.focalDistance = curvevalue(Camera.baseData.focalDistance, oldFocalDist#, Camera.config.precision * 0.5)
      focalNear# = 10.0
      focalFar# = Camera.baseData.focalDistance * 3.0
      if focalFar# < 5000.0 then focalFar# = 5000.0
      if focalFar# > Camera.config.maxRange then focalFar# = Camera.config.maxRange
      if World.time < 6.0 or World.time > 18.0
        focalFar# = curvevalue(1000000.0, focalFar#, 10)
      endif
    endcase
  endselect
  if AL_Blur > 0
    set effect constant float PostFilter_GetRenderTargetEffect(AL_Blur), "DOFNearFocus", focalNear#
    set effect constant float PostFilter_GetRenderTargetEffect(AL_Blur), "DOFFarFocus", 20000.0 
  endif
  if Camera.status.hasControl and has focus()
    position mouse App.config.screenCenterX, App.config.screenCenterY
  endif
  System_log("controls.dbx", 2, "main", "End Update: Camera_updatePhysicalState," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function _Controls_init()
  Controls.assignedKeys.movement.forward = ENUM_KEY_W
  Controls.assignedKeys.movement.backward = ENUM_KEY_S
  Controls.assignedKeys.movement.left = ENUM_KEY_A
  Controls.assignedKeys.movement.right = ENUM_KEY_D
  Controls.assignedKeys.movement.upward = ENUM_KEY_SPACE
  Controls.assignedKeys.movement.downward = ENUM_KEY_V
  Controls.assignedKeys.movement.speedBoost = ENUM_KEY_SHIFTL
  Controls.assignedKeys.movement.speedSlow = ENUM_KEY_CTRLL
  Controls.assignedKeys.movement.runToggle = ENUM_KEY_R
  Controls.assignedKeys.movement.strafeToggle = ENUM_KEY_Q
  Controls.assignedKeys.action.useInteractable = ENUM_KEY_F
  App_addUpdate("Controls_getGameplayInput", "UI_getInterfaceInput", FALSE)
endfunction
function Controls_getGameplayInput()
  System_log("controls.dbx", 2, "main", "Begin Update: Controls_getGameplayInput")
  updateMark as dword
  updateMark = hitimer(1000000)
  tTimer = timer()
  UI.status.mouseModeForced = ""
  UI.status.keyModeForced = ""
  if App.status.loadState < 3
    exitfunction
  endif
  if UI.status.keyMode <> "gameplay" or MY_CHARACTER.status.isLiving = FALSE
    System_log("controls.dbx", 2, "main", "Exit Update: Controls_getGameplayInput," + str$(hitimer(1000000) - updateMark) + "us")
    exitfunction
  endif
  select Camera.status.controlMode
    case 0: 
    endcase
    case 1: 
      MY_CHARACTER.oldStatus = MY_CHARACTER.status
      if MY_CHARACTER.status.stance = Characters.stateId.sneaking
        MY_CHARACTER.status.stance = Characters.stateId.passive
      endif
      if MY_CHARACTER.status.action = Characters.stateId.moving
        MY_CHARACTER.status.action = Characters.stateId.idle
      endif
      if MY_CHARACTER.status.locomotion <= Characters.stateId.sprinting
        MY_CHARACTER.status.locomotion = Characters.stateId.stationary
      endif
      MY_CHARACTER.status.direction = Characters.stateId.standard
      System_log("controls.dbx", 2, "control", "  mouseMode: " + UI.status.mouseMode)
      if UI.status.mouseMode = "gameplay"
        System_log("controls.dbx", 2, "control", "  > Handle mouse btn inputs")
      endif
      System_log("controls.dbx", 2, "control", "  keyMode: " + UI.status.keyMode)
      if UI.status.keyMode = "gameplay"
        System_log("controls.dbx", 2, "control", "  > Handle key inputs")
        if MY_CHARACTER.status.locomotion <> Characters.stateId.forced
          if System_keyInput(Controls.assignedKeys.movement.strafeToggle).isDown and UI.status.inputReady
            UI.status.inputMark = tTimer
            MY_CHARACTER.status.strafeLock = 1 - MY_CHARACTER.status.strafeLock
          endif
          if System_keyInput(Controls.assignedKeys.movement.runToggle).isDown and UI.status.inputReady
            System_log("controls.dbx", 2, "control", "  > runToggle input triggered")
            UI.status.inputMark = tTimer
            MY_CHARACTER.status.runLock = 1 - MY_CHARACTER.status.runLock
            System_log("controls.dbx", 2, "control", "  runlock = " + str$(MY_CHARACTER.status.runLock))
          endif
          if MY_CHARACTER.status.runLock and MY_CHARACTER.oldStatus.stance = Characters.stateId.passive
            if MY_CHARACTER.oldStatus.action = Characters.stateId.moving and MY_CHARACTER.oldStatus.locomotion < Characters.stateId.sprinting
              MY_CHARACTER.status.locomotion = Characters.stateId.running
            endif
          endif
          if System_keyInput(Controls.assignedKeys.movement.upward).isDown and UI.status.inputReady
            if MY_CHARACTER.status.stance = Characters.stateId.passive and MY_CHARACTER.status.action < Characters.stateId.jumping 
              UI.status.inputMark = tTimer
              MY_CHARACTER.status.action = Characters.stateId.jumping
              MY_CHARACTER.status.locomotion = Characters.stateId.forced
              System_log("controls.dbx", 2, "jump", "  >> New jump input triggered. Set action = jumping, locomotion = forced.")
            endif
          endif
          if System_keyInput(Controls.assignedKeys.movement.speedSlow).isDown
            MY_CHARACTER.status.stance = Characters.stateId.sneaking
          endif
          if System_keyInput(Controls.assignedKeys.movement.speedBoost).isDown
            if MY_CHARACTER.status.stance = Characters.stateId.passive and MY_CHARACTER.oldStatus.action = Characters.stateId.moving and MY_CHARACTER.status.locomotion <> Characters.stateId.forced
              if MY_CHARACTER.status.isExhausted = FALSE
                MY_CHARACTER.status.locomotion = Characters.stateId.sprinting
                System_log("controls.dbx", 2, "control", "    > set locomotion = sprinting")
              endif
            endif
          endif
          if System_keyInput(Controls.assignedKeys.action.useInteractable).isDown and UI.status.inputReady
            if Camera.baseData.focalDistance <= World.envConfig.scaleMeter * 2.0 
              UI.status.inputMark = tTimer
              if Events.interactableTarget.objectID > ""
                System_log("controls.dbx", 1, "control", "  > triggered use " + Events.interactableTarget.onUse)
                if Events.interactableTarget.onUse > ""
                  App_callFunction(Events.interactableTarget.onUse, "next")
                endif
              endif
            endif
          endif
        endif
        if MY_CHARACTER.status.locomotion <> Characters.stateId.forced
          System_log("controls.dbx", 2, "control", "  > Handle any/always move keys")
          if System_keyInput(Controls.assignedKeys.movement.forward).isDown
            MY_CHARACTER.status.action = Characters.stateId.moving
            if MY_CHARACTER.status.locomotion = Characters.stateId.stationary
              MY_CHARACTER.status.locomotion = Characters.stateId.walking
            endif
            MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
            MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 180.0)
          endif
          if System_keyInput(Controls.assignedKeys.movement.backward).isDown
            MY_CHARACTER.status.action = Characters.stateId.moving
            if MY_CHARACTER.status.locomotion = Characters.stateId.stationary
              MY_CHARACTER.status.locomotion = Characters.stateId.walking
            endif
            if MY_CHARACTER.status.strafeLock
              MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
              MY_CHARACTER.baseData.heading = Camera.baseData.pan
              MY_CHARACTER.status.direction = Characters.stateId.backstep
            else
              MY_CHARACTER.baseData.facing = Camera.baseData.pan
              MY_CHARACTER.baseData.heading = Camera.baseData.pan
            endif
          endif
          if System_keyInput(Controls.assignedKeys.movement.left).isDown
            MY_CHARACTER.status.action = Characters.stateId.moving
            if MY_CHARACTER.status.locomotion = Characters.stateId.stationary
              MY_CHARACTER.status.locomotion = Characters.stateId.walking
            endif
            if MY_CHARACTER.status.strafeLock
              if System_keyInput(Controls.assignedKeys.movement.forward).isDown
                MY_CHARACTER.status.direction = Characters.stateId.standard
                MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 180.0 - 45.0)
              else
                if System_keyInput(Controls.assignedKeys.movement.backward).isDown
                  MY_CHARACTER.status.direction = Characters.stateId.backstep
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 45.0)
                else
                  MY_CHARACTER.status.direction = Characters.stateId.strafeLeft
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 90.0)
                endif
              endif
            else
              if System_keyInput(Controls.assignedKeys.movement.forward).isDown
                MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0 - 45.0)
                MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 180.0 - 45.0)
              else
                if System_keyInput(Controls.assignedKeys.movement.backward).isDown
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 45.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 45.0)
                else
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 90.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 90.0)
                endif
              endif
            endif
          endif
          if System_keyInput(Controls.assignedKeys.movement.right).isDown
            MY_CHARACTER.status.action = Characters.stateId.moving
            if MY_CHARACTER.status.locomotion = Characters.stateId.stationary
              MY_CHARACTER.status.locomotion = Characters.stateId.walking
            endif
            if MY_CHARACTER.status.strafeLock
              if System_keyInput(Controls.assignedKeys.movement.forward).isDown
                MY_CHARACTER.status.direction = Characters.stateId.standard
                MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 180.0 + 45.0)
              else
                if System_keyInput(Controls.assignedKeys.movement.backward).isDown
                  MY_CHARACTER.status.direction = Characters.stateId.backstep
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan - 45.0)
                else
                  MY_CHARACTER.status.direction = Characters.stateId.strafeRight
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan - 90.0)
                endif
              endif
            else
              if System_keyInput(Controls.assignedKeys.movement.forward).isDown
                MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan + 180.0 + 45.0)
                MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan + 180.0 + 45.0)
              else
                if System_keyInput(Controls.assignedKeys.movement.backward).isDown
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan - 45.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan - 45.0)
                else
                  MY_CHARACTER.baseData.facing = wrapvalue(Camera.baseData.pan - 90.0)
                  MY_CHARACTER.baseData.heading = wrapvalue(Camera.baseData.pan - 90.0)
                endif
              endif
            endif
          endif
        endif
      endif
      if UI.status.mouseMode = "gameplay"
        if MY_CHARACTER.status.action = Characters.stateId.moving and MY_CHARACTER.status.strafeLock = FALSE
          MY_CHARACTER.baseData.facing = curveangle(MY_CHARACTER.baseData.facing + System.mouseInput.moveX, MY_CHARACTER.baseData.facing, Camera.config.precision)
        endif
      endif
    endcase
  endselect
  System_log("controls.dbx", 2, "main", "End Update: Controls_getGameplayInput," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
world_module_init:
  if WORLD_MODULE_LOADED = FALSE
    System_log("world.dbx", 2, "main", "Begin module load: world.")
    App_updateSplashScreen("- Environment")
    type World_type_environmentConfigData
      scaleMeter as float
      scaleSunMin as float
      scaleSunMax as float
      scaleMoon as float
    endtype
    type World_type_weatherData
      state as string
      currentCloudDensity as integer
      targetCloudDensity as integer
    endtype
    type World_type_sceneData
      sceneRecord as integer
      waypointRecord as integer
      sceneName as string
      textureBase as string
      time as float
      timeSpeed as float
      weather as string
      enableWeatherDynamic as boolean
      camInitX as float
      camInitY as float
      camInitZ as float
      camInitTilt as float
      camInitPan as float
      camInitZoom as float
    endtype
    type STATIC_CLASS_World
      time as float
      windObjectID as string
      scene as World_type_sceneData
      weather as World_type_weatherData
      envConfig as World_type_environmentConfigData
    endtype
    type CLASS_SceneEntity
      objectNum as integer 
      objectID as string 
      entityRecord as integer
      sceneName as string
      collisionMode as string
      isInteractable as boolean
      fileBase as string
      animationFile as string
      shaderFile as string
      textureBase as string
      textureVariant as string
      fixPivot as boolean
      canInstance as boolean
      lod as integer
      posX as float
      posY as float
      posZ as float
      rotX as float
      rotY as float
      rotZ as float
      scaleX as float
      scaleY as float
      scaleZ as float
      applyObjectGravity as boolean 
      applyLimbGravity as boolean 
      objectType as string 
      objectMode as byte 
      parentID as string
      bindMode as integer 
    endtype
    type CLASS_InteractableObject
      objectID as string
      parentID as string
      entityRecord as integer
      itemRecord as integer
      name as string
      fileBase as string
      activeState as integer
      maxStates as integer
      onUse as string
    endtype
    dim _World_animatedObjects() as integer
    dim _World_sceneEntities() as CLASS_SceneEntity
    dim World_interactableObjects() as CLASS_InteractableObject
    GLOBAL World as STATIC_CLASS_World
    _World_init()
    WORLD_MODULE_LOADED = TRUE
    System_log("world.dbx", 2, "main", "End module load: world.")
  endif
return
function _World_init()
  World.envConfig.scaleMeter = 20.0 / 0.3048 
  World.envConfig.scaleSunMin = 0.09
  World.envConfig.scaleSunMax = 0.2
  World.envConfig.scaleMoon = 0.125
  App_addUpdate("World_updateEnvironment", "", FALSE)
endfunction
function World_loadScene()
  Media_loadObject("resource/media/environment/wind", FALSE, generate guid$())
  hide object Media.objectResult.number
  World.windObjectID = Media.objectResult.id
tAnim as CLASS_AppliedAnimation3d
  tAnim.objectNum = -1
  tAnim.animSetNum = -1
  tAnim.speedFactor = 1.0
  tAnim.enableLoop = FALSE

  tAnim.objectNum = Media.objectResult.number
  tAnim.animSetNum = Anim3d_getAnimSetNumber("resource/media/environment/wind.anim")
  tAnim.keyName = "light-breeze"
  tAnim.speedFactor = 0.3
  tAnim.enableLoop = TRUE
  Anim3d_addAppliedAnimation(tAnim)
  dbWorld = Sqlite_getConnection("resource/data/world.db")
  dbWorldB = Sqlite_getConnection("resource/data/world.db") 
  dbProfile = Sqlite_getConnection("resource/data/save/" + App.currentProfile)
System_log("world.dbx", 3, "main", "> loading from " + App.currentProfile)
  qry$ = "Select * from waypoint"
  res = sqlite begin sql query(dbProfile, qry$)
    while sqlite next record row(dbProfile) > 0
      World.scene.sceneRecord = sqlite record row integer by column name(dbProfile, "sceneID")
      World.scene.waypointRecord = sqlite record row integer by column name(dbProfile, "waypointID")
    endwhile
  res = sqlite finish sql query(dbProfile)
System_log("world.dbx", 3, "main", "> loading sceneID/Record: " + str$(World.scene.sceneRecord) + " waypoint: " + str$(World.scene.waypointRecord))
  qry$ = "SELECT * FROM scenes WHERE sceneID = '" + str$(World.scene.sceneRecord) + "'"
  res = sqlite begin sql query(dbWorld, qry$)
    while sqlite next record row(dbWorld) > 0
      World.scene.sceneName = sqlite record row string by column name$(dbWorld, "sceneName")
      World.scene.textureBase = sqlite record row string by column name$(dbWorld, "textureBase")
      World.scene.time = sqlite record row float by column name(dbWorld, "timeOfDay")
      World.scene.timeSpeed = sqlite record row float by column name(dbWorld, "timeSpeed")
      World.scene.weather = sqlite record row string by column name$(dbWorld, "weather")
      World.scene.enableWeatherDynamic = sqlite record row integer by column name(dbWorld, "weatherDynamic")
      System_log("world.dbx", 2, "main", "> sceneName: " + World.scene.sceneName)
    endwhile
  res = sqlite finish sql query(dbWorld)
  tA = Media_getImageNumber("resource/maps/"+ World.scene.sceneName + "/Terrain.dds", 0, 0)
  tB = Media_getImageNumber("resource/maps/"+ World.scene.sceneName + "/Blendmap.dds", 0, 0)
  tC = Media_getImageNumber("resource/maps/"+ World.scene.sceneName + "/Colormap.dds", 0, 0)
  Terrain_Load(tA, tB, tC)
  Terrain_SetScale(64,7500)
  t1 = Media_getImageNumber("resource/media/terrain/"+ World.scene.textureBase +"/1.dds", 0, 0)
  t2 = Media_getImageNumber("resource/media/terrain/"+ World.scene.textureBase +"/2.dds", 0, 0)
  t3 = Media_getImageNumber("resource/media/terrain/"+ World.scene.textureBase +"/3.dds", 0, 0)
  t4 = Media_getImageNumber("resource/media/terrain/"+ World.scene.textureBase +"/4.dds", 0, 0)
  t5 = Media_getImageNumber("resource/media/terrain/"+ World.scene.textureBase +"/5.dds", 0, 0)
  Terrain_SetTexture(t1, t2, t3, t4, t5)
  World.time = World.scene.time
  World.weather.state = World.scene.weather
  World_updateWeather(FALSE)
  if World.scene.enableWeatherDynamic
    System_setInterval("World_updateWeather", "TRUE", -1, 45000)
  endif
  tImg = Media_getImageNumber("resource/scenes/" + World.scene.sceneName + "/lighting.dds", 0, 0)
  create bitmap 1, 16, 16 
  paste image tImg, 0, 0
  for x = 1 to 8
    for y = 1 to 15
      AL_TimeOfDay(x, y).x = rgbr(point(x-1, y-1))
      AL_TimeOfDay(x, y).y = rgbg(point(x-1, y-1))
      AL_TimeOfDay(x, y).z = rgbb(point(x-1, y-1))
    next y
  next x
  set current bitmap 0
  delete bitmap 1
  Media_unloadImage(tImg, "", 0, 0)
  tTime# = World.time - 8.0
  if tTime# < 0.0 then tTime# = 24.0 - 8.0
  sunAngle# = wrapvalue(277.0 - (15.0 * tTime#))
  Sky_SetSunAngle(sunAngle#, 90.0, 0.0, 1.0)
  World_updateEnvironment()
  qry$ = "select * from waypoints where waypointID = '" + str$(World.scene.waypointRecord) + "'"
  res = sqlite begin sql query(dbWorld, qry$)
    while sqlite next record row(dbWorld) > 0
      World.scene.camInitX = sqlite record row float by column name(dbWorld, "camX")
      World.scene.camInitY = sqlite record row float by column name(dbWorld, "camY")
      World.scene.camInitZ = sqlite record row float by column name(dbWorld, "camZ")
      World.scene.camInitTilt = sqlite record row float by column name(dbWorld, "camT")
      World.scene.camInitPan = sqlite record row float by column name(dbWorld, "camP")
      World.scene.camInitZoom = sqlite record row float by column name(dbWorld, "camM")
    endwhile
  res = sqlite finish sql query(dbWorld)
  Camera.baseData.x = World.scene.camInitX
  Camera.baseData.y = World.scene.camInitY
  Camera.baseData.z = World.scene.camInitZ
  Camera.baseData.tilt = World.scene.camInitTilt
  Camera.baseData.pan = World.scene.camInitPan
  Camera.baseData.zoom = World.scene.camInitZoom
  qry$ = "SELECT * FROM entities WHERE sceneName = '" + World.scene.sceneName + "'"
  System_log("editor.dbx", 1, "data", "Execute query on world.db: " + qry$)
  res = sqlite begin sql query(dbWorld, qry$)
    while sqlite next record row(dbWorld) > 0
tEntity as CLASS_SceneEntity
  tEntity.objectNum = -1
  tEntity.objectID = ""
  tEntity.entityRecord = -1
  tEntity.sceneName = ""
  tEntity.collisionMode = ""
  tEntity.isInteractable = FALSE
  tEntity.fileBase = ""
  tEntity.animationFile = ""
  tEntity.shaderFile = ""
  tEntity.textureBase = ""
  tEntity.textureVariant = ""
  tEntity.fixPivot = FALSE
  tEntity.canInstance = FALSE
  tEntity.lod = 0
  tEntity.posX = 0.0
  tEntity.posY = 0.0
  tEntity.posZ = 0.0
  tEntity.rotX = 0.0
  tEntity.rotY = 0.0
  tEntity.rotZ = 0.0
  tEntity.scaleX = 20000.0
  tEntity.scaleY = 20000.0
  tEntity.scaleZ = 20000.0
  tEntity.applyObjectGravity = FALSE
  tEntity.applyLimbGravity = FALSE
  tEntity.objectType = ""
  tEntity.objectMode = 0
  tEntity.parentID = ""
  tEntity.bindMode = 0

      tEntity.entityRecord = sqlite record row integer by column name(dbWorld, "entityID")
      tEntity.sceneName = sqlite record row string by column name$(dbWorld, "sceneName")
      tEntity.collisionMode = sqlite record row string by column name$(dbWorld, "collision")
      tEntity.isInteractable = sqlite record row integer by column name(dbWorld, "interaction")
      tEntity.fileBase = sqlite record row string by column name$(dbWorld, "fileName")
      tEntity.animationFile = sqlite record row string by column name$(dbWorld, "animation")
      tEntity.shaderFile = sqlite record row string by column name$(dbWorld, "shader")
      tEntity.textureBase = sqlite record row string by column name$(dbWorld, "textureBase")
      tEntity.textureVariant = sqlite record row string by column name$(dbWorld, "textureVariant")
      tEntity.fixPivot = sqlite record row integer by column name(dbWorld, "fixPivot")
      tEntity.canInstance = sqlite record row integer by column name(dbWorld, "allowInstance")
      tEntity.posX = sqlite record row float by column name(dbWorld, "posX")
      tEntity.posY = sqlite record row float by column name(dbWorld, "posY")
      tEntity.posZ = sqlite record row float by column name(dbWorld, "posZ")
      tEntity.rotX = sqlite record row float by column name(dbWorld, "rotX")
      tEntity.rotY = sqlite record row float by column name(dbWorld, "rotY")
      tEntity.rotZ = sqlite record row float by column name(dbWorld, "rotZ")
      tEntity.scaleX = sqlite record row float by column name(dbWorld, "sclX")
      tEntity.scaleY = sqlite record row float by column name(dbWorld, "sclY")
      tEntity.scaleZ = sqlite record row float by column name(dbWorld, "sclZ")
      tEntity.objectType = sqlite record row string by column name$(dbWorld, "objectType")
      tEntity.lod = sqlite record row integer by column name(dbWorld, "lod")
      tEntity.applyLimbGravity = sqlite record row integer by column name(dbWorld, "limbGravity")
      tEntity.objectID = sqlite record row string by column name$(dbWorld, "objectID")
      if tEntity.objectID = "" then tEntity.objectID = generate guid$()
      tEntity.parentID = sqlite record row string by column name$(dbWorld, "parentID")
      tEntity.bindMode = sqlite record row integer by column name(dbWorld, "bindMode")
      if tEntity.applyLimbGravity then tEntity.applyObjectGravity = TRUE
      Media_loadObject(tEntity.fileBase, tEntity.canInstance, tEntity.objectID)
      tEntity.objectNum = Media.objectResult.number
      System_log("world.dbx", 2, "world", "Loaded World Entity: " + tEntity.fileBase + " objectID: " + tEntity.objectID + " parentID: " + tEntity.parentID)
      if tEntity.objectNum = -1
        System_log("world.dbx", 4, "error", "ERROR: Could not load or get an object number for requested object: " + tEntity.fileBase)
        App_closeGame(TRUE)
      endif
      array insert at bottom _World_sceneEntities()
      _World_sceneEntities() = tEntity
      position object tEntity.objectNum, tEntity.posX, tEntity.posY, tEntity.posZ
      rotate object tEntity.objectNum, tEntity.rotX, tEntity.rotY, tEntity.rotZ
      if tEntity.fixPivot
        fix object pivot tEntity.objectNum
      endif
      select tEntity.collisionMode
        case "none":
          System_log("world.dbx", 1, "world", " > no collision applied")
          scale object tEntity.objectNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
        endcase
        case "hidden":
          System_log("world.dbx", 1, "world", " > apply hidden collision")
          sc_setupComplexObject tEntity.objectNum, 1, 2
          sc_allowObjectScaling tEntity.objectNum
          scale object tEntity.objectNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
          sc_updateObject tEntity.objectNum
          exclude object on tEntity.objectNum
          System_log("world.dbx", 1, "world", "excluded hidden collision mesh for object " + str$(tEntity.objectNum) + " file: " + tEntity.fileBase)
        endcase
        case "box":
          System_log("world.dbx", 1, "world", " > apply box collision")
          sc_setupObject tEntity.objectNum, 1, 2
          sc_allowObjectScaling tEntity.objectNum
          scale object tEntity.objectNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
          sc_updateObject tEntity.objectNum
          if tEntity.isInteractable
tIntr as CLASS_InteractableObject
  tIntr.objectID = ""
  tIntr.parentID = ""
  tIntr.entityRecord = -1
  tIntr.itemRecord = -1
  tIntr.name = ""
  tIntr.fileBase = ""
  tIntr.activeState = -1
  tIntr.maxStates = -1
  tIntr.onUse = ""

            tIntr.objectID = tEntity.objectID
            tIntr.entityRecord = tEntity.entityRecord
            tIntr.fileBase = tEntity.fileBase
            array insert at bottom World_interactableObjects()
            World_interactableObjects() = tIntr
          endif
        endcase
        case "full":
          System_log("world.dbx", 1, "world", " > apply full collision")
          sc_setupComplexObject tEntity.objectNum, 1, 2
          sc_allowObjectScaling tEntity.objectNum
          scale object tEntity.objectNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
          sc_updateObject tEntity.objectNum
          if tEntity.isInteractable
tIntr as CLASS_InteractableObject
  tIntr.objectID = ""
  tIntr.parentID = ""
  tIntr.entityRecord = -1
  tIntr.itemRecord = -1
  tIntr.name = ""
  tIntr.fileBase = ""
  tIntr.activeState = -1
  tIntr.maxStates = -1
  tIntr.onUse = ""

            tIntr.objectID = tEntity.objectID
            tIntr.entityRecord = tEntity.entityRecord
            tIntr.fileBase = tEntity.fileBase
            array insert at bottom World_interactableObjects()
            World_interactableObjects() = tIntr
          endif
        endcase
        case default:
          System_log("world.dbx", 1, "world", " > apply multi-state collision")
          totalCollisionStates = intval(tEntity.collisionMode)
          scale object tEntity.objectNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
          for s = 1 to totalCollisionStates
            colObjID$ = generate guid$()
            Media_loadObject(tEntity.fileBase + "_state" + str$(s) + "_col", FALSE, colObjID$)
            colObjNum = Media.objectResult.number
            System_log("world.dbx", 2, "world", "  Loaded Collision Sub-Entity: " + tEntity.fileBase + "_state" + str$(s) + "_col" + " : " + colObjID$ + " for parent entity " + tEntity.objectID)
            position object colObjNum, tEntity.posX, tEntity.posY, tEntity.posZ
            rotate object colObjNum, tEntity.rotX, tEntity.rotY, tEntity.rotZ
            sc_setupComplexObject colObjNum, 1, 2 
            sc_allowObjectScaling colObjNum
            scale object colObjNum, tEntity.scaleX, tEntity.scaleY, tEntity.scaleZ
            sc_updateObject colObjNum
            exclude object on colObjNum
            System_log("world.dbx", 1, "world", " > made collision object " + str$(colObjNum) + " " + tEntity.fileBase + "_state" + str$(s) + "_col")
            if s > 1
              sc_setObjectCollisionOff colObjNum
            endif
            if tEntity.isInteractable
tIntr as CLASS_InteractableObject
  tIntr.objectID = ""
  tIntr.parentID = ""
  tIntr.entityRecord = -1
  tIntr.itemRecord = -1
  tIntr.name = ""
  tIntr.fileBase = ""
  tIntr.activeState = -1
  tIntr.maxStates = -1
  tIntr.onUse = ""

              tIntr.objectID = colObjID$
              tIntr.entityRecord = tEntity.entityRecord
              tIntr.fileBase = tEntity.fileBase + "_state" + str$(s) + "_col"
              tIntr.parentID = tEntity.objectID
              tIntr.activeState = 0
              array insert at bottom World_interactableObjects()
              World_interactableObjects() = tIntr
            endif
          next s
        endcase
      endselect
      if object excluded(tEntity.objectNum) = FALSE
        if tEntity.applyLimbGravity = TRUE
          System_log("editorMenu.dbx", 1, "editor", "   >> set limbs to terrain")
          perform checklist for object limbs tEntity.objectNum
          for l = 1 to checklist quantity()
            if fast left$(checklist string$(l), 10) = "Armature_t"
              tLimb = checklist value a(l)
              targetY# = Terrain_GetHeight(limb position x(tEntity.objectNum, tLimb), limb position z(tEntity.objectNum, tLimb))
              offset limb tEntity.objectNum, tLimb, limb offset x(tEntity.objectNum, tLimb), limb offset y(tEntity.objectNum, tLimb) + ((targetY# - limb position y(tEntity.objectNum, tLimb)) * 0.005), limb offset z(tEntity.objectNum, tLimb), 1
            endif
          next l
        endif
        System_log("world.dbx", 1, "world", "object " + str$(tEntity.objectNum) + " " + tEntity.fileBase + " not excluded, process shaders and textures")
        if Media.objectResult.text = "source"
          tEffectNum = Media_getEffectNumber(tEntity.shaderFile, 0) 
          set object effect tEntity.objectNum, tEffectNum
        endif
        if Media.objectResult.text <> "instanced"
          Object_Add(tEntity.objectNum)
          Object_SetAutoUpdate(tEntity.objectNum, 1)
          select tEntity.shaderFile
            case "resource/Advanced Lighting/Shaders/Surface/Object/Diffuse.fx":
              tImgNum = Media_getImageNumber(tEntity.textureBase + tEntity.textureVariant + "_d" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 0, tImgNum
            endcase
            case "resource/Advanced Lighting/Shaders/Surface/Object/Normalmap Clip.fx":
              tImgNum = Media_getImageNumber(tEntity.textureBase + tEntity.textureVariant + "_d" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 0, tImgNum
              tImgNum = Media_getImageNumber(tEntity.textureBase + "_n" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 1, tImgNum
              tImgNum = Media_getImageNumber(tEntity.textureBase + "_s" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 2, tImgNum
            endcase
            case "resource/Advanced Lighting/Shaders/Surface/Animation/Normalmap Clip.fx":
              tImgNum = Media_getImageNumber(tEntity.textureBase + tEntity.textureVariant + "_d" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 0, tImgNum
              tImgNum = Media_getImageNumber(tEntity.textureBase + "_n" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 1, tImgNum
              tImgNum = Media_getImageNumber(tEntity.textureBase + "_s" + ENV_TEXTUREFORMAT, 0, 0)
                texture object tEntity.objectNum, 2, tImgNum
            endcase
          endselect
        endif
        if tEntity.objectType = "Vegetation"
          Media_getObjectRefByID(World.windObjectID)
          Media_bindObject(tEntity.objectNum, Media.objectResult.number, MEDIA_ENUM_BIND_FRM)
          System_log("editor.dbx", 2, "world", " > bind vegetation object " + str$(tEntity.objectNum) + " to wind " + str$(Media.objectResult.number) + " : " + str$(MEDIA_ENUM_BIND_FRM))
        endif
        if tEntity.animationFile > ""
          array insert at bottom _World_animatedObjects()
          _World_animatedObjects() = tEntity.objectNum
        endif
      endif
    endwhile
  res = sqlite finish sql query(dbWorld)
  for i = 0 to array count(_World_sceneEntities())
    if _World_sceneEntities(i).bindMode > 0
      Media_getObjectRefByID(_World_sceneEntities(i).parentID)
      Media_bindObject(_World_sceneEntities(i).objectNum, Media.objectResult.number, _World_sceneEntities(i).bindMode)
    endif
  next i
  empty array _World_sceneEntities() 
  tFX_OBJ_BONE = Media_getEffectNumber("resource/Advanced Lighting/Shaders/Surface/Animation/Normalmap Clip.fx", 0)
  qry$ = "select * from characters where sceneName = '" + World.scene.sceneName + "'"
  res = sqlite begin sql query(dbWorld, qry$)
    while sqlite next record row(dbWorld) > 0
tChar as CLASS_CharacterEntity
  tChar.baseData.mass = 0.5
  tChar.baseData.slopeMod = 1.0
  tChar.status.stance = Characters.stateId.passive
  tChar.status.action = Characters.stateId.idle
  tChar.status.locomotion = Characters.stateId.stationary
  tChar.status.direction = Characters.stateId.standard
  tChar.status.isLiving = TRUE
  tChar.status.locoMark = timer()
  tChar.phyStats.health.current = 100
  tChar.phyStats.health.max = 100
  tChar.phyStats.health.regenInterval = 5000
  tChar.phyStats.health.regenAmount = 1.0
  tChar.phyStats.health.regenMark = timer()
  tChar.phyStats.stamina.current = 100
  tChar.phyStats.stamina.max = 100
  tChar.phyStats.stamina.regenInterval = 250
  tChar.phyStats.stamina.regenAmount = 1.0
  tChar.phyStats.stamina.regenMark = timer()
  tChar.phyStats.energy.current = 0
  tChar.phyStats.energy.max = 0
  tChar.phyStats.energy.regenMark = timer()

      tChar.baseData.objID = sqlite record row string by column name$(dbWorld, "objectID")
      if tChar.baseData.objID = "" then tChar.baseData.objID = generate guid$()
      tChar.bio.name = sqlite record row string by column name$(dbWorld, "name")
      tChar.bio.gender = sqlite record row string by column name$(dbWorld, "gender")
      tChar.bio.faction = sqlite record row string by column name$(dbWorld, "faction")
      tChar.bio.characterClass = sqlite record row string by column name$(dbWorld, "class")
      tChar.ai.aiClass = sqlite record row string by column name$(dbWorld, "ai")
      tChar.baseData.posX = sqlite record row float by column name(dbWorld, "posX")
      tChar.baseData.posY = sqlite record row float by column name(dbWorld, "posY")
      tChar.baseData.posZ = sqlite record row float by column name(dbWorld, "posZ")
      tChar.baseData.facing = sqlite record row float by column name(dbWorld, "facing")
      tCharTexVar$ = sqlite record row string by column name$(dbWorld, "textureVariant")
      if tChar.ai.aiClass = "player" 
        wayqry$ = "Select * from waypoints where waypointID = '" + str$(World.scene.waypointRecord) + "'"
        res = sqlite begin sql query(dbWorldB, wayqry$)
          while sqlite next record row(dbWorldB) > 0
            tChar.baseData.posX = sqlite record row float by column name(dbWorldB, "charX")
            tChar.baseData.posY = sqlite record row float by column name(dbWorldB, "charY")
            tChar.baseData.posZ = sqlite record row float by column name(dbWorldB, "charZ")
            tChar.baseData.facing = sqlite record row float by column name(dbWorldB, "charA")
          endwhile
        res = sqlite finish sql query(dbWorldB)
        savqry$ = "Select * from characters where name = '" + tChar.bio.name + "'"
        res = sqlite begin sql query(dbProfile, savqry$)
          while sqlite next record row(dbProfile) > 0
            tChar.bio.characterClass = sqlite record row string by column name$(dbProfile, "class")
            tChar.status.isLiving = sqlite record row integer by column name(dbProfile, "isLiving")
            tCharTexVar$ = sqlite record row string by column name$(dbProfile, "textureVariant")
          endwhile
        res = sqlite finish sql query(dbProfile)
      endif
      tChar.bio.isUnique = sqlite record row integer by column name(dbWorld, "unique")
      if tChar.bio.isUnique
        tChar.baseData.fileBase = fast lower$("resource/media/characters/" + tChar.bio.characterClass + "-" + tChar.bio.name)
      else
        tChar.baseData.fileBase = fast lower$("resource/media/characters/" + tChar.bio.characterClass + "-" + tChar.bio.gender)
      endif
      Media_loadObject(tChar.baseData.fileBase, FALSE, tChar.baseData.objID)
      tObj = Media.objectResult.number
      scale object tObj, 20000, 20000, 20000
      tChar.baseData.height = object size y(tObj, 1)
      position object tObj, tChar.baseData.posX, tChar.baseData.posY, tChar.baseData.posZ
      if Media.objectResult.text = "source"
        yrotate object tObj, 180 : fix object pivot tObj
        yrotate object tObj, tChar.baseData.facing
        Object_Add(tObj)
        Object_SetAutoUpdate(tObj, 1)
        set object effect tObj, tFX_OBJ_BONE
        texture object tObj, 0, Media_getImageNumber(tChar.baseData.fileBase + tCharTexVar$ + "_d" + ENV_TEXTUREFORMAT, 0, 0)
        texture object tObj, 1, Media_getImageNumber(tChar.baseData.fileBase + "_n" + ENV_TEXTUREFORMAT, 0, 0)
        texture object tObj, 2, Media_getImageNumber(tChar.baseData.fileBase + "_s" + ENV_TEXTUREFORMAT, 0, 0)
      else
        yrotate object tObj, tChar.baseData.facing
        Object_Add(tObj)
        Object_SetAutoUpdate(tObj, 1)
        texture object tObj, 0, Media_getImageNumber(tChar.baseData.fileBase + tCharTexVar$ + "_d" + ENV_TEXTUREFORMAT, 0, 0)
      endif
      Media_loadObject("resource/media/characters/human_col", FALSE, generate guid$()) 
      sObj = Media.objectResult.number
      if Media.objectResult.text = "source"
        yrotate object sObj, 180 : fix object pivot sObj
      endif
      sc_setupObject sObj, 1, 0
      sc_allowObjectScaling sObj
      scale object sObj, 20000, 20000, 20000
      sc_updateObject sObj
      Media_bindObject(sObj, tObj, MEDIA_ENUM_BIND_LOC + MEDIA_ENUM_BIND_ROT + MEDIA_ENUM_BIND_COL)
      hide object sObj 
      tChar.baseData.colObjNum = sObj
      System_log("world.dbx", 1, "world", " > made collision object " + str$(sObj) + " " + "resource/media/characters/human_col")
      updateEquip = 0
      tDB = dbWorldB
      if tChar.bio.isUnique
        if tChar.ai.aiClass = "player" 
          subqry$ = "select * from accessories where class = '" + tChar.bio.name + "'"
          tDB = dbProfile
        else
          subqry$ = "select * from accessories where sceneName = '" + World.scene.sceneName + "' and class = '" + tChar.bio.name + "'"
        endif
      else
        subqry$ = "select * from accessories where sceneName = '" + World.scene.sceneName + "' and class = '" + tChar.bio.characterClass + "'"
      endif
      res = sqlite begin sql query(tDB, subqry$)
        while sqlite next record row(tDB) > 0
          itemBase$ = sqlite record row string by column name$(tDB, "fileName")
          texVar$ = ""
          Media_loadObject(tChar.baseData.fileBase + "_" + itemBase$, FALSE, generate guid$())
          tSubObjNum = Media.objectResult.number
          if tSubObjNum > -1
            if object exist(tSubObjNum)
              select Media.objectResult.text
                case "source":
                  yrotate object tSubObjNum, 180 : fix object pivot tSubObjNum
                  scale object tSubObjNum, 20000, 20000, 20000 
                  Object_Add(tSubObjNum)
                  Object_SetAutoUpdate(tSubObjNum, 1)
                  set object effect tSubObjNum, tFX_OBJ_BONE
                  tImg = Media_getImageNumber(tChar.baseData.fileBase + "_" + itemBase$ + texVar$ + "_d" + ENV_TEXTUREFORMAT, 1, 0)
                    texture object tSubObjNum, 0, tImg
                  tImg = Media_getImageNumber(tChar.baseData.fileBase + "_" + itemBase$ + "_n" + ENV_TEXTUREFORMAT, 0, 0)
                    texture object tSubObjNum, 1, tImg
                  tImg = Media_getImageNumber(tChar.baseData.fileBase + "_" + itemBase$ + "_s" + ENV_TEXTUREFORMAT, 0, 0)
                    texture object tSubObjNum, 2, tImg
                endcase
                case "cloned":
                  scale object tSubObjNum, 20000, 20000, 20000 
                  Object_Add(tSubObjNum)
                  Object_SetAutoUpdate(tSubObjNum, 1)
                    tImg = Media_getImageNumber(tChar.baseData.fileBase + "_" + itemBase$ + texVar$ + "_d" + ENV_TEXTUREFORMAT, 1, 0)
                      texture object tSubObjNum, 0, tImg
                endcase
                case "instanced":
                  scale object tSubObjNum, 20000, 20000, 20000 
                endcase
              endselect
              Media_bindObject(tSubObjNum, tObj, MEDIA_ENUM_BIND_LOC + MEDIA_ENUM_BIND_ROT + MEDIA_ENUM_BIND_FRM)
            endif
          endif
        endwhile
      res = sqlite finish sql query(tDB)
      tCharIndex = Characters_addCharacterEntity(tChar)
      if tChar.ai.aiClass = "player"
        Characters.myCharIndex = tCharIndex
        Camera.baseData.focusObjectType = 1
        Camera.baseData.focusObjectNum = tObj
      endif
    endwhile
  res = sqlite finish sql query(dbWorld)
  Sqlite_restConnection(dbWorld)
  Sqlite_restConnection(dbWorldB)
  Sqlite_restConnection(dbProfile)
  World_getInteractableData()
endfunction
function World_unloadScene()
  Anim3d_unload()
    System_log("world.dbx", 2, "main", " > unloaded Anim3d data")
  Math3d_removeAllArcs()
    System_log("world.dbx", 2, "main", " > unloaded Math3d data")
  System_clearAllIntervals()
    System_log("world.dbx", 2, "main", " > unloaded Interval data")
  Characters_unloadAllCharacters()
    System_log("world.dbx", 2, "main", " > unloaded Character data")
  Media_unloadAllObjects()
    System_log("world.dbx", 2, "main", " > unloaded objects")
  empty array _World_sceneEntities()
  empty array _World_animatedObjects()
  empty array World_interactableObjects()
    System_log("world.dbx", 2, "main", " > unloaded World data")
  Media_unloadImage(0, "resource/maps/"+ World.scene.sceneName + "/Terrain.dds", 0, 0)
  Media_unloadImage(0, "resource/maps/"+ World.scene.sceneName + "/Blendmap.dds", 0, 0)
  Media_unloadImage(0, "resource/maps/"+ World.scene.sceneName + "/Colormap.dds", 0, 0)
  Media_unloadImage(0, "resource/media/terrain/"+ World.scene.textureBase +"/1.dds", 0, 0)
  Media_unloadImage(0, "resource/media/terrain/"+ World.scene.textureBase +"/2.dds", 0, 0)
  Media_unloadImage(0, "resource/media/terrain/"+ World.scene.textureBase +"/3.dds", 0, 0)
  Media_unloadImage(0, "resource/media/terrain/"+ World.scene.textureBase +"/4.dds", 0, 0)
  Media_unloadImage(0, "resource/media/terrain/"+ World.scene.textureBase +"/5.dds", 0, 0)
  Terrain_Delete()
    System_log("world.dbx", 2, "main", " > unloaded Terrain")
endfunction
function World_updateEnvironment()
  System_log("world.dbx", 2, "main", "Begin Update: World_updateEnvironment")
  updateMark as dword
  updateMark = hitimer(1000000)
  if World.scene.timeSpeed > 0.0
    inc World.time, (System.timing.delta * World.scene.timeSpeed * 24.0) / 86400000.0
    if World.time > 23.999 then World.time = 0.0
  endif
  sunAngle# = wrapvalue(277.0 - (15.0 * World.time))
  moonAngle# = wrapvalue(73.0 - (15.0 * World.time))
  if sunAngle# >= 180.0
    sunScale# = World.envConfig.scaleSunMax
  else
    if sunAngle# >= 90.0
      sunScale# = World.envConfig.scaleSunMin + (((180.0 - sunAngle#) / 90.0) * (World.envConfig.scaleSunMax - World.envConfig.scaleSunMin))
    else
      sunScale# = World.envConfig.scaleSunMin + (((90.0 - sunAngle#) / 90.0) * (World.envConfig.scaleSunMax - World.envConfig.scaleSunMin))
    endif
  endif
  Sky_SetPlanetAngle(moonAngle#, 90.0, 0.0, World.envConfig.scaleMoon)
  Sky_SetSunAngle(sunAngle#, 90.0, 0.0, sunScale#)
  System_log("world.dbx", 1, "main", "sun ang: " + str$(sunAngle#))
  if World.scene.enableWeatherDynamic
    AL_CloudsDensity = curvevalue(World.weather.targetCloudDensity, AL_CloudsDensity, (30000 / (System.timing.delta + 1)))
  else
    AL_CloudsDensity = World.weather.targetCloudDensity
  endif
  Clouds_SetDensity(AL_CloudsDensity)
  System_log("world.dbx", 2, "main", "End Update: World_updateEnvironment," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function World_updateWeather(rAllowChange as boolean)
  chg = rnd(10)
  select World.weather.state
    case "clear":
      World.weather.targetCloudDensity = 98
      if chg > 8 and rAllowChange
        World.weather.state = "sunny"
        World.weather.targetCloudDensity = 90
      else
        imgClouds = Media_getImageNumber("resource/media/materials/blank_alpha.png", 0, 0)
        imgCloudNoise = Media_getImageNumber("resource/media/materials/blank_alpha.png", 0, 0)
        Sky_SetCloudsTexture(imgClouds, imgCloudNoise)
      endif
      exitfunction
    endcase
    case "sunny":
      if World.weather.targetCloudDensity = 98
        imgClouds = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Clouds.dds", 0, 0)
        imgCloudNoise = Media_getImageNumber("resource/Advanced Lighting/Textures/sky/Cloud Noise.dds", 0, 0)
        Sky_SetCloudsTexture(imgClouds, imgCloudNoise)
      endif
      World.weather.targetCloudDensity = 90
      if chg < 3 and rAllowChange
        World.weather.state = "clear"
        World.weather.targetCloudDensity = 100
      endif
      if chg > 8 and rAllowChange
        World.weather.state = "partly-cloudy"
        World.weather.targetCloudDensity = 70
      endif
      exitfunction
    endcase
    case "partly-cloudy":
      World.weather.targetCloudDensity = 70
      if chg < 3 and rAllowChange
        World.weather.state = "sunny"
        World.weather.targetCloudDensity = 90
      endif
      if chg > 8 and rAllowChange
        World.weather.state = "cloudy"
        World.weather.targetCloudDensity = 6
      endif
      exitfunction
    endcase
    case "cloudy":
      World.weather.targetCloudDensity = 6
      if chg < 3 and rAllowChange
        World.weather.state = "partly-cloudy"
        World.weather.targetCloudDensity = 70
      endif
      if chg > 8 and rAllowChange
        split = rnd(10)
        if split <= 6
          World.weather.state = "overcast"
          World.weather.targetCloudDensity = 1
        endif
        if split = 7 or split = 8
          World.weather.state = "rainy"
          World.weather.targetCloudDensity = 6
        endif
        if split = 9 or split = 10
          World.weather.state = "foggy"
          World.weather.targetCloudDensity = 6
        endif
      endif
      exitfunction
    endcase
    case "overcast":
      World.weather.targetCloudDensity = 1
      if chg < 3 and rAllowChange
        split = rnd(10)
        if split <= 6
          World.weather.state = "cloudy"
          World.weather.targetCloudDensity = 6
        endif
        if split = 7 or split = 8
          World.weather.state = "rainy"
          World.weather.targetCloudDensity = 6
        endif
        if split = 9 or split = 10
          World.weather.state = "foggy"
          World.weather.targetCloudDensity = 6
        endif
      endif
      if chg > 8 and rAllowChange
        World.weather.state = "storming"
        World.weather.targetCloudDensity = 1
      endif
      exitfunction
    endcase
    case "rainy":
      World.weather.targetCloudDensity = 6
      if chg < 3 and rAllowChange
        split = rnd(10)
        if split <= 7
          World.weather.state = "cloudy"
          World.weather.targetCloudDensity = 6
        endif
        if split >= 8
          World.weather.state = "foggy"
          World.weather.targetCloudDensity = 6
        endif
      endif
      if chg > 8 and rAllowChange
        World.weather.state = "storming"
        World.weather.targetCloudDensity = 1
      endif
      exitfunction
    endcase
    case "storming":
      World.weather.targetCloudDensity = 1
      if chg < 3 and rAllowChange
        split = rnd(10)
        if split <= 7
          World.weather.state = "rainy"
          World.weather.targetCloudDensity = 6
        endif
        if split >= 8 and rAllowChange
          World.weather.state = "overcast"
          World.weather.targetCloudDensity = 6
        endif
      endif
      exitfunction
    endcase
    case "foggy":
      World.weather.targetCloudDensity = 6
      if chg < 3 and rAllowChange
        World.weather.state = "cloudy"
        World.weather.targetCloudDensity = 6
      endif
      if chg > 8 and rAllowChange
        World.weather.state = "dense-fog"
        World.weather.targetCloudDensity = 1
      endif
      exitfunction
    endcase
    case "dense-fog":
      World.weather.targetCloudDensity = 1
      if chg < 5 and rAllowChange
        World.weather.state = "foggy"
        World.weather.targetCloudDensity = 6
      endif
      exitfunction
    endcase
  endselect
endfunction
function World_getInteractableRefByNumber(rObjectNum as integer)
  Media_getObjectRefByNumber(rObjectNum)
  for i = 0 to array count(World_interactableObjects())
    if World_interactableObjects(i).objectID = Media.objectResult.id
      exitfunction i
    endif
  next i
endfunction -1
function World_getInteractableData()
  dbWorld = Sqlite_getConnection("resource/data/world.db")
  System_log("world.dbx", 2, "events", "loading data for " + str$(array count(World_interactableObjects())) + " interactables")
  for i = 0 to array count(World_interactableObjects())
    qry$ = "SELECT * FROM interactables WHERE entityID = '" + str$(World_interactableObjects(i).entityRecord) + "'"
    System_log("world.dbx", 1, "data", "Execute query on world.db: " + qry$)
    res = sqlite begin sql query(dbWorld, qry$)
      while sqlite next record row(dbWorld) > 0
        World_interactableObjects(i).name = sqlite record row string by column name$(dbWorld, "entityName")
        World_interactableObjects(i).maxStates = sqlite record row integer by column name(dbWorld, "maxStates")
        World_interactableObjects(i).itemRecord = sqlite record row integer by column name(dbWorld, "itemID")
        World_interactableObjects(i).onUse = sqlite record row string by column name$(dbWorld, "onUse")
        System_log("world.dbx", 2, "events", " > Loaded interactable data: name " + World_interactableObjects(i).name)
      endwhile
    res = sqlite finish sql query(dbWorld)
  next i
  Sqlite_restConnection(dbWorld)
endfunction
function World_convertDistance(rMode as string, rVal as float)
  tVal as float
  select rMode
    case "u2ft": tVal = rVal / (World.envConfig.scaleMeter * 0.3048) : endcase 
    case "ft2u": tVal = rVal * (World.envConfig.scaleMeter * 0.3048) : endcase 
    case "u2m": tVal = rVal / World.envConfig.scaleMeter : endcase 
    case "m2u": tVal = rVal * World.envConfig.scaleMeter : endcase 
    case "ft2m": tVal = (rVal * (World.envConfig.scaleMeter * 0.3048)) / World.envConfig.scaleMeter : endcase 
    case "m2ft": tVal =(rVal * World.envConfig.scaleMeter) / (World.envConfig.scaleMeter * 0.3048) : endcase 
  endselect
endfunction tVal
events_module_init:
  if EVENTS_MODULE_LOADED = FALSE
    System_log("events.dbx", 2, "main", "Begin module load: events.")
    App_updateSplashScreen("- Events")
    `Declare Events -----------------------------------------------------------
    type STATIC_CLASS_Events
      interactableTarget as CLASS_InteractableObject
    endtype
    `private data -------------------------------------------------------------
    `public data --------------------------------------------------------------
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL Events as STATIC_CLASS_Events
    `==================================
    _Events_init()
    EVENTS_MODULE_LOADED = TRUE
    System_log("events.dbx", 2, "main", "End module load: events.")
  endif
return
function _Events_init()
  World_getInteractableData()
  App_addUpdate("Events_updateInteractableTarget", "Camera_updatePhysicalState", FALSE)
endfunction
function Events_updateInteractableTarget()
  System_log("events.dbx", 2, "main", "Begin Update: Events_updateInteractableTarget")
  updateMark as dword
  updateMark = hitimer(1000000)
  if Camera.baseData.focalTargetNum > -1 and Camera.baseData.focalDistance <= World.envConfig.scaleMeter * 3.0
    Media_getObjectRefByID(Events.interactableTarget.objectID)
    oldIntrNum = Media.objectResult.number
    `do nothing if target hasn't changed
    if Camera.baseData.focalTargetNum = oldIntrNum
      exitfunction
    endif
    doesUse = FALSE
    doesExamine = FALSE
    doesTake = FALSE
    doesConverse = FALSE
    tIntrIndex = World_getInteractableRefByNumber(Camera.baseData.focalTargetNum)
    if tIntrIndex > -1
      System_log("events.dbx", 2, "events", " > Setting interactableTarget to camera.focalTargetNum: " + str$(Camera.baseData.focalTargetNum))
      Events.interactableTarget = World_interactableObjects(tIntrIndex)
    else
      `target object is not interactable, clear it
  Events.interactableTarget.objectID = ""
  Events.interactableTarget.parentID = ""
  Events.interactableTarget.entityRecord = -1
  Events.interactableTarget.itemRecord = -1
  Events.interactableTarget.name = ""
  Events.interactableTarget.fileBase = ""
  Events.interactableTarget.activeState = -1
  Events.interactableTarget.maxStates = -1
  Events.interactableTarget.onUse = ""

    endif
  else
    `no object within target range, clear it
  Events.interactableTarget.objectID = ""
  Events.interactableTarget.parentID = ""
  Events.interactableTarget.entityRecord = -1
  Events.interactableTarget.itemRecord = -1
  Events.interactableTarget.name = ""
  Events.interactableTarget.fileBase = ""
  Events.interactableTarget.activeState = -1
  Events.interactableTarget.maxStates = -1
  Events.interactableTarget.onUse = ""

  endif
  System_log("events.dbx", 2, "main", "End Update: Events_updateInteractableTarget," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function Events_setInteractableTargetState(rState as string)
  System_log("events.dbx", 2, "events", " > setting interactable to state: " + rState)
  if rState = "next"
    nextState = Events.interactableTarget.activeState + 1
    if nextState > Events.interactableTarget.maxStates
      nextState = 1
    endif
  else
    nextState = intval(rState)
    if nextState > Events.interactableTarget.maxStates
      nextState = Events.interactableTarget.maxStates
    endif
  endif
  stateToOff = nextState
  `TEMP:
  if stateToOff = 1
      stateToOn = 2
  else
      stateToOn = 1
  endif
  `TEMPEND
  System_log("events.dbx", 1, "events", "  out state " + str$(stateToOff) + " on state " + str$(stateToOn))
  tState$ = "state" + str$(nextState)
  Events.interactableTarget.activeState = nextState
  System_log("events.dbx", 1, "events", "  > set interactableTarget.activeState = " + str$(nextState))
  `apply to all linked multistate objects for this entity
  for i = 0 to array count(World_interactableObjects())
    System_log("events.dbx", 1, "events", "check if World_interactableObjects("+str$(i)+").parentID = Events.interactableTarget.parentID :: " + World_interactableObjects(i).parentID +" == " + Events.interactableTarget.parentID)
    if World_interactableObjects(i).parentID = Events.interactableTarget.parentID
      System_log("events.dbx", 1, "events", "  interactable " + World_interactableObjects(i).filebase + " is linked to current interactable target")
      System_log("events.dbx", 1, "events", "  > set interactable("+str$(i)+").activeState = " + str$(nextState))
      World_interactableObjects(i).activeState = nextState
      split string World_interactableObjects(i).filebase, "_"
      iState = intval(fast right$(get split word$(split count() - 1), fast len(get split word$(split count() - 1)) - 5))
      System_log("events.dbx", 1, "events", "  extracted interactable state " + str$(iState))
      tAnimSet = Anim3d_getAnimSetNumber(get split word$(1) + "_" + get split word$(2) + ".anim")
      if iState = stateToOn
        objOnID$ = World_interactableObjects(i).objectID
      endif
      if iState = stateToOff
        objOffID$ = World_interactableObjects(i).objectID
      endif
    endif
  next i
  System_log("events.dbx", 1, "events", "  set animation for visible parent of interactableTarget: " + Events.interactableTarget.parentID)
  Media_getObjectRefByID(Events.interactableTarget.parentID)
  tObjNum = Media.objectResult.number
  callbackArgs$ = objOffID$ + "," + objOnID$
  Anim3d_clearAppliedAnimations(tObjNum)
tAnim as CLASS_AppliedAnimation3d
  tAnim.objectNum = -1
  tAnim.animSetNum = -1
  tAnim.speedFactor = 1.0
  tAnim.enableLoop = FALSE

  tAnim.objectNum = tObjNum
  tAnim.animSetNum = tAnimSet
  tAnim.keyName = tState$
  tAnim.callback = "Events_setInteractableCollisionState"
  tAnim.callbackArgs = callbackArgs$
  Anim3d_addAppliedAnimation(tAnim)
endfunction
function Events_setInteractableCollisionState(rArgs as string)
  split string rArgs, ","
  stateToOff$ = get split word$(1)
  stateToOn$ = get split word$(2)
  Media_getObjectRefByID(stateToOff$)
  objNumOff = Media.objectResult.number
    fileToOff$ = Media.objectResult.text
  Media_getObjectRefByID(stateToOn$)
  objNumOn = Media.objectResult.number
    fileToOn$ = Media.objectResult.text
  System_log("events.dbx", 1, "events", "  > set interactable collision states: state to on " + stateToOn$ + " (" + fileToOn$ + "), state to off " + stateToOff$ + "(" + fileToOff$ + ")")
  sc_setObjectCollisionOn objNumOn
  sc_setObjectCollisionOff objNumOff
endfunction
characters_module_init:
  if CHARACTERS_MODULE_LOADED = FALSE
    System_log("characters.dbx", 2, "main", "Begin module load: characters.")
    App_updateSplashScreen("- Characters")
    `Declare Characters -----------------------------------------------------------
    type Characters_type_configData
      crouchMaxSpeed as float
      crouchAcceleration as float
      footMaxSpeed as float
      footTurnSpeed as float
      footAcceleration as float
      footDeceleration as float
      runMaxSpeed as float
      sprintMaxSpeed as float
      sprintAcceleration as float
      collisionBufferDistance as float
    endtype
    type Characters_type_statusData
      updateMark as integer
      slopeMark as integer
    endtype
    type Characters_type_stateIdData
      passive as byte
      sneaking as byte
      idle as byte
      moving as byte
      jumping as byte
      falling as byte
      stationary as byte
      walking as byte
      running as byte
      sprinting as byte
      forced as byte
      standard as byte
      strafeRight as byte
      strafeLeft as byte
      backstep as byte
    endtype
    type STATIC_CLASS_Characters
      config as Characters_type_configData
      status as Characters_type_statusData
      stateId as Characters_type_stateIdData
      myCharIndex as integer
    endtype
    `Declare CharacterEntity -----------------------------------------------------------
    type CharacterEntity_type_baseData
      posX as float
      posY as float
      posZ as float
      facing as float
      heading as float
      speed as float
      slopeMod as float
      height as float
      mass as float
      objID as string 
      colObjNum as integer 
      fileBase as string 
    endtype
    type CharacterEntity_type_statusData
      stance as byte
      action as byte
      locomotion as byte
      direction as byte
      strafeLock as boolean
      runLock as boolean
      slopeLock as boolean
      isLiving as boolean
      isExhausted as boolean
      locoMark as integer
    endtype
    type CharacterEntity_type_vitalsData
      current as integer
      max as integer
      regenMark as integer
      regenInterval as integer
      regenAmount as float
    endtype
    type CharacterEntity_type_physicalStatData
      health as CharacterEntity_type_vitalsData
      stamina as CharacterEntity_type_vitalsData
      energy as CharacterEntity_type_vitalsData
    endtype
    type CharacterEntity_type_bioData
      name as string
      gender as string 
      faction as string
      characterClass as string
      isUnique as boolean
    endtype
    type CharacterEntity_AI_type_aiData
      aiClass as string 
    endtype
    type CLASS_CharacterEntity
      baseData as CharacterEntity_type_baseData
      status as CharacterEntity_type_statusData
      oldStatus as CharacterEntity_type_statusData
      phyStats as CharacterEntity_type_physicalStatData
      bio as CharacterEntity_type_bioData
      ai as CharacterEntity_AI_type_aiData
    endtype
    `private data -------------------------------------------------------------
    `public data --------------------------------------------------------------
    dim _Characters_entities() as CLASS_CharacterEntity
    #CONSTANT THIS_CHARACTER _Characters_entities(this)
    #CONSTANT MY_CHARACTER _Characters_entities(Characters.myCharIndex)
    `Init ---------------------------------------------------------------------
    `==================================
    GLOBAL Characters as STATIC_CLASS_Characters
    `==================================
    _Characters_init()
    CHARACTER_MODULE_LOADED = TRUE
    System_log("characters.dbx", 2, "main", "End module load: characters.")
  endif
return
function _Characters_init()
  Characters.config.crouchMaxSpeed = 45.0
  Characters.config.footMaxSpeed = 85.0 
  Characters.config.runMaxSpeed = 280.0 
  Characters.config.sprintMaxSpeed = 500.0 
  Characters.config.footTurnSpeed = 0.133 
  Characters.config.crouchAcceleration = 0.066 
  Characters.config.footAcceleration = 0.133 * 2.0 
  Characters.config.sprintAcceleration = 0.4 
  Characters.config.footDeceleration = 0.266 * 2.0 
  Characters.config.collisionBufferDistance = 25.0 
  Characters.stateId.passive = 0
  Characters.stateId.sneaking = 1
  Characters.stateId.idle = 0
  Characters.stateId.moving = 1
  Characters.stateId.jumping = 2
  Characters.stateId.falling = 3
  Characters.stateId.stationary = 0
  Characters.stateId.walking = 1
  Characters.stateId.running = 2
  Characters.stateId.sprinting = 3
  Characters.stateId.forced = 4
  Characters.stateId.standard = 0
  Characters.stateId.strafeRight = 1
  Characters.stateId.strafeLeft = 2
  Characters.stateId.backstep = 3
  Characters.status.updateMark = timer()
  Characters.status.slopeMark = timer()
  `register updates
  App_addUpdate("Characters_updateCharacterStates", "Controls_getGameplayInput,Math3d_updateArcs", FALSE)
  App_addRequiredToUpdate("Anim3d_updateActiveAnimations", "Characters_updateCharacterStates")
  App_addRequiredToUpdate("Camera_updatePhysicalState", "Characters_updateCharacterStates")
endfunction
function Characters_unloadAllCharacters()
  empty array _Characters_entities()
endfunction
function Characters_addCharacterEntity(rChar as CLASS_CharacterEntity)
  array insert at bottom _Characters_entities()
  tID = array count(_Characters_entities())
  _Characters_entities() = rChar
endfunction tID
function Characters_updateCharacterStates()
  System_log("characters.dbx", 2, "main", "Begin Update: Characters_updateCharacterStates")
  updateMark as dword
  updateMark = hitimer(1000000)
  oldFacing as float
  oldPosX as float
  oldPosY as float
  oldPosZ as float
  tTimer as integer
  elapsed as float
  tTimer = timer()
  elapsed = abs(tTimer - Characters.status.updateMark) * 0.001
  dec elapsed, System.timing.pauseElapsed * 0.001
  System_log("characters.dbx", 1, "characters", ">> elapsed " + str$(elapsed, 2))
  for this = 0 to array count(_Characters_entities())
    System_log("characters.dbx", 1, "characters", " > Begin update for character: " + str$(this) + " :: " + THIS_CHARACTER.baseData.fileBase)
    Media_getObjectRefByID(THIS_CHARACTER.baseData.objID)
    tCharObjectNum = Media.objectResult.number
    oldFacing = object angle y(tCharObjectNum)
    oldPosX = THIS_CHARACTER.baseData.posX
    oldPosY = THIS_CHARACTER.baseData.posY
    oldPosZ = THIS_CHARACTER.baseData.posZ
    if THIS_CHARACTER.status.isLiving
      if THIS_CHARACTER.phyStats.health.max > 0
        if abs(tTimer - THIS_CHARACTER.phyStats.health.regenMark) > THIS_CHARACTER.phyStats.health.regenInterval
          inc THIS_CHARACTER.phyStats.health.current, THIS_CHARACTER.phyStats.health.regenAmount
          if THIS_CHARACTER.phyStats.health.current > THIS_CHARACTER.phyStats.health.max
            THIS_CHARACTER.phyStats.health.current = THIS_CHARACTER.phyStats.health.max
          endif
          THIS_CHARACTER.phyStats.health.regenMark = tTimer
        endif
      endif
      if THIS_CHARACTER.phyStats.stamina.max > 0
        if abs(tTimer - THIS_CHARACTER.phyStats.stamina.regenMark) > THIS_CHARACTER.phyStats.stamina.regenInterval
          if THIS_CHARACTER.status.locomotion = Characters.stateId.sprinting
            dec THIS_CHARACTER.phyStats.stamina.current, 2
          else
            if THIS_CHARACTER.status.locomotion <> Characters.stateId.running
              inc THIS_CHARACTER.phyStats.stamina.current, THIS_CHARACTER.phyStats.stamina.regenAmount
              if THIS_CHARACTER.phyStats.stamina.current > THIS_CHARACTER.phyStats.stamina.max
                THIS_CHARACTER.phyStats.stamina.current = THIS_CHARACTER.phyStats.stamina.max
              endif
            endif
          endif
          if THIS_CHARACTER.phyStats.stamina.current <= 0
            THIS_CHARACTER.phyStats.stamina.current = 0
            THIS_CHARACTER.status.isExhausted = TRUE
            if THIS_CHARACTER.status.action = Characters.stateId.moving
              if THIS_CHARACTER.status.locomotion = Characters.stateId.sprinting
                if THIS_CHARACTER.status.runLock
                  THIS_CHARACTER.status.locomotion = Characters.stateId.running
                else
                  THIS_CHARACTER.status.locomotion = Characters.stateId.walking
                endif
              endif
            endif
          endif
          if THIS_CHARACTER.phyStats.stamina.current >= THIS_CHARACTER.phyStats.stamina.max * 0.2
            THIS_CHARACTER.status.isExhausted = FALSE
          endif
          THIS_CHARACTER.phyStats.stamina.regenMark = tTimer
        endif
      endif
      if THIS_CHARACTER.phyStats.energy.max > 0
        if abs(tTimer - THIS_CHARACTER.phyStats.energy.regenMark) > THIS_CHARACTER.phyStats.energy.regenInterval
          inc THIS_CHARACTER.phyStats.energy.current, THIS_CHARACTER.phyStats.energy.regenAmount
          if THIS_CHARACTER.phyStats.energy.current > THIS_CHARACTER.phyStats.energy.max
            THIS_CHARACTER.phyStats.energy.current = THIS_CHARACTER.phyStats.energy.max
          endif
          THIS_CHARACTER.phyStats.energy.regenMark = tTimer
        endif
      endif
      tAnimState as string 
      tAnimStage as string 
      tAnimSet as integer
      tAnimSet = Anim3d_getAnimSetNumber("resource/media/characters/" + THIS_CHARACTER.bio.characterClass + ".anim")
      Anim3d_getActiveAnimationByObjectNumber(tCharObjectNum)
      if Anim3d.animResult.index > -1
        System_log("characters.dbx", 1, "characters", "  Active animation: " + Anim3d.animResult.keyName)
        tAnimState = fast left$(Anim3d.animResult.keyName, 4)
        tAnimStage = mid$(Anim3d.animResult.keyName, 5, 1)
      endif
      System_log("characters.dbx", 1, "characters", "  tAnimStage = " + tAnimStage)
      Math3d.arcResult.vw = -1.0
      if THIS_CHARACTER.status.action = Characters.stateId.jumping or THIS_CHARACTER.status.action = Characters.stateId.falling
        Math3d_getArcPositionByObjectNumber(tCharObjectNum)
        if Math3d.arcResult.vw > -1
          THIS_CHARACTER.baseData.speed = 0.0
          THIS_CHARACTER.baseData.posX = Math3d.arcResult.vx
          THIS_CHARACTER.baseData.posY = Math3d.arcResult.vy
          THIS_CHARACTER.baseData.posZ = Math3d.arcResult.vz
          System_log("characters.dbx", 1, "characters", "  Character is controlled by active arc. Position: " + str$(Math3d.arcResult.vx, 2) + ", " + str$(Math3d.arcResult.vy, 2) + ", " + str$(Math3d.arcResult.vz, 2))
        endif
      endif
      mustCalcPosition = TRUE
      System_log("characters.dbx", 1, "characters", "  Character status action: " + str$(THIS_CHARACTER.status.action))
      System_log("characters.dbx", 1, "characters", "  Character status locomotion: " + str$(THIS_CHARACTER.status.locomotion) + " runLock: " + str$(THIS_CHARACTER.status.runLock))
      select THIS_CHARACTER.status.action
        case 0: 
          if THIS_CHARACTER.status.locomotion = Characters.stateId.walking
            THIS_CHARACTER.baseData.speed = 0.0
          endif
          if THIS_CHARACTER.baseData.speed > 0.0
            if THIS_CHARACTER.baseData.speed > Characters.config.footMaxSpeed
              THIS_CHARACTER.baseData.speed = curvevalue(10.0, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.footDeceleration * 0.5)
              THIS_CHARACTER.status.locomotion = Characters.stateId.running
              THIS_CHARACTER.status.action = Characters.stateId.moving
            else
              if THIS_CHARACTER.oldStatus.locomotion = Characters.stateId.running
                THIS_CHARACTER.baseData.speed = curvevalue(10.0, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.footDeceleration)
                THIS_CHARACTER.status.locomotion = Characters.stateId.walking
                THIS_CHARACTER.status.action = Characters.stateId.moving
              else
                THIS_CHARACTER.baseData.speed = 0.0
              endif
            endif
          endif
          if THIS_CHARACTER.baseData.speed < 25.0
            THIS_CHARACTER.baseData.speed = 0.0
            THIS_CHARACTER.status.locomotion = Characters.stateId.stationary
            THIS_CHARACTER.status.action = Characters.stateId.idle
          endif
        endcase
        case 1: 
          select THIS_CHARACTER.status.locomotion
            case 0: : endcase 
            case 1: 
              if THIS_CHARACTER.status.stance = Characters.stateId.sneaking
                THIS_CHARACTER.baseData.speed = curvevalue(Characters.config.crouchMaxSpeed * THIS_CHARACTER.baseData.slopeMod, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.crouchAcceleration)
              else
                THIS_CHARACTER.baseData.speed = curvevalue(Characters.config.footMaxSpeed * THIS_CHARACTER.baseData.slopeMod, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.footAcceleration)
              endif
              System_log("characters.dbx", 1, "characters", "  Char will walk at speed: " + str$(THIS_CHARACTER.baseData.speed))
            endcase
            case 2: 
              THIS_CHARACTER.baseData.speed = curvevalue(Characters.config.runMaxSpeed * THIS_CHARACTER.baseData.slopeMod, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.footAcceleration)
              System_log("characters.dbx", 1, "characters", "  Char will run at speed: " + str$(THIS_CHARACTER.baseData.speed))
            endcase
            case 3: 
              THIS_CHARACTER.baseData.speed = curvevalue(Characters.config.sprintMaxSpeed * THIS_CHARACTER.baseData.slopeMod, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.sprintAcceleration)
            endcase
            case 4: 
            endcase
          endselect
          if THIS_CHARACTER.status.locomotion <> Characters.stateId.forced
            if THIS_CHARACTER.baseData.speed <= (Characters.config.runMaxSpeed * 0.5) and (THIS_CHARACTER.status.locomotion = Characters.stateId.running or THIS_CHARACTER.status.locomotion = Characters.stateId.sprinting)
              THIS_CHARACTER.status.locomotion = Characters.stateId.walking
            endif
            if THIS_CHARACTER.baseData.speed < 65.0 and THIS_CHARACTER.baseData.slopeMod < 1.0
              THIS_CHARACTER.baseData.speed = 0.0
              THIS_CHARACTER.status.locomotion = Characters.stateId.stationary
              THIS_CHARACTER.status.action = Characters.stateId.idle
              THIS_CHARACTER.status.slopeLock = TRUE
            endif
            if THIS_CHARACTER.baseData.slopeMod > 1.00
              THIS_CHARACTER.status.slopeLock = FALSE
            endif
          endif
        endcase
        case 2: 
          System_log("characters.dbx", 1, "characters", "  status.action = 2 (jumping), oldStatus.action = " + str$(THIS_CHARACTER.oldStatus.action))
          if THIS_CHARACTER.oldStatus.action = Characters.stateId.jumping
            if tAnimStage = "i"
              System_log("characters.dbx", 1, "characters", "  Jump is 'i' prepping, slow to a stop. arc not begun")
              THIS_CHARACTER.baseData.speed = curvevalue(10.0, THIS_CHARACTER.baseData.speed, System.timing.loopsPerSec * Characters.config.footDeceleration)
              if THIS_CHARACTER.baseData.speed < 25.0
                THIS_CHARACTER.baseData.speed = 0.0
              endif
            else
              System_log("characters.dbx", 1, "characters", "  Jump is in flight, will use position from arc handler.")
              mustCalcPosition = FALSE
              if THIS_CHARACTER.baseData.posY < oldPosY
                System_log("characters.dbx", 1, "characters", "  > Jump apex reached, status.action set to falling.")
                THIS_CHARACTER.status.action = Characters.stateId.falling
              endif
            endif
          else
            System_log("characters.dbx", 1, "characters", "  Jump state requested, 'i' has not yet begun. arc has not yet begun.")
          endif
        endcase
        case 3: 
          mustCalcPosition = FALSE
        endcase
      endselect
      if mustCalcPosition
        THIS_CHARACTER.baseData.posX = THIS_CHARACTER.baseData.posX + sin(THIS_CHARACTER.baseData.heading) * THIS_CHARACTER.baseData.speed * elapsed
        THIS_CHARACTER.baseData.posZ = THIS_CHARACTER.baseData.posZ + cos(THIS_CHARACTER.baseData.heading) * THIS_CHARACTER.baseData.speed * elapsed
      endif
      null = sc_intersectObject(0, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY + THIS_CHARACTER.baseData.height, THIS_CHARACTER.baseData.posZ, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY - 1000.0, THIS_CHARACTER.baseData.posZ)
      collisionState = 0 
      if THIS_CHARACTER.status.action > Characters.stateId.idle
        if sc_sphereCast(0, oldPosX, oldPosY + (THIS_CHARACTER.baseData.height * 0.5), oldPosZ, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY + (THIS_CHARACTER.baseData.height * 0.5), THIS_CHARACTER.baseData.posZ, Characters.config.collisionBufferDistance, 0) > 0
          THIS_CHARACTER.baseData.posX = sc_getCollisionSlideX()
          THIS_CHARACTER.baseData.posZ = sc_getCollisionSlideZ()
          collisionState = 1
        endif
      endif
      tHeight as float
      tHeight = Terrain_GetHeight(THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posZ)
      if sc_intersectObject(0, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY + THIS_CHARACTER.baseData.height, THIS_CHARACTER.baseData.posZ, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY - 1000.0, THIS_CHARACTER.baseData.posZ) > 0
        if tHeight < sc_getStaticCollisionY()
          tHeight = sc_getStaticCollisionY()
        endif
      endif
      if THIS_CHARACTER.baseData.posY < tHeight
        THIS_CHARACTER.baseData.posY = tHeight
        collisionState = 2
      endif
      if Math3d.arcResult.vw > -1
        if collisionState = 1 
          Math3d_removeArc(tCharObjectNum)
          Math3d_addArc(tCharObjectNum, 400.0, 270.0, THIS_CHARACTER.baseData.heading, THIS_CHARACTER.baseData.mass)
          THIS_CHARACTER.status.action = Characters.stateId.falling
          System_log("characters.dbx", 1, "jump", "  > hit a wall during active jump. cleared jump arc, added fall arc.")
        endif
        if collisionState = 2 
          Math3d_removeArc(tCharObjectNum)
          THIS_CHARACTER.status.action = Characters.stateId.idle
          THIS_CHARACTER.status.locomotion = Characters.stateId.stationary
          System_log("characters.dbx", 1, "jump", "  > hit a floor during active fall. cleared arc.")
        endif
      else
        THIS_CHARACTER.baseData.posY = tHeight
        System_log("characters.dbx", 1, "characters", "  > no arc handling, just force to ground.")
        System_log("characters.dbx", 1, "characters", "  oldPosY - THIS_CHARACTER.baseData.posY > THIS_CHARACTER.baseData.height * 0.5")
        System_log("characters.dbx", 1, "characters", "  " + str$(oldPosY) +" - "+ str$(THIS_CHARACTER.baseData.posY) +" > "+ str$(THIS_CHARACTER.baseData.height) + " * 0.5")
        System_log("characters.dbx", 1, "characters", "  " + str$(oldPosY - THIS_CHARACTER.baseData.posY) + " > " + str$(THIS_CHARACTER.baseData.height * 0.5))
        tDiff# = oldPosY - THIS_CHARACTER.baseData.posY
        if tDiff# < 0.0 and THIS_CHARACTER.status.slopeLock
          if tTimer - Characters.status.slopeMark > 200
            THIS_CHARACTER.baseData.slopeMod = 0.0
          endif
          THIS_CHARACTER.baseData.speed = 0.0
          THIS_CHARACTER.status.action = Characters.stateId.idle
          THIS_CHARACTER.status.locomotion = Characters.stateId.stationary
          THIS_CHARACTER.baseData.posX = oldPosX
          THIS_CHARACTER.baseData.posY = oldPosY
          THIS_CHARACTER.baseData.posZ = oldPosZ
        else
          if tDiff# > THIS_CHARACTER.baseData.height * 0.5
            THIS_CHARACTER.baseData.posY = oldPosY
            Math3d_addArc(tCharObjectNum, 100.0 + THIS_CHARACTER.baseData.speed, 30.0, THIS_CHARACTER.baseData.heading, THIS_CHARACTER.baseData.mass)
            THIS_CHARACTER.status.action = Characters.stateId.falling
            THIS_CHARACTER.status.stance = Characters.stateId.passive 
            THIS_CHARACTER.status.locomotion = Characters.stateId.forced
            System_log("characters.dbx", 1, "characters", "  > new falloff, add fall arc.")
          else
            if tTimer - Characters.status.slopeMark > 200
              slopeThreshold# = -0.4
              if tDiff# > 0.0 or tDiff# < slopeThreshold#
                THIS_CHARACTER.baseData.slopeMod = 1.0 + tDiff#
                if THIS_CHARACTER.baseData.slopeMod < 0.0 then THIS_CHARACTER.baseData.slopeMod = 0.0
                if THIS_CHARACTER.baseData.slopeMod > 1.3 then THIS_CHARACTER.baseData.slopeMod = 1.3
              else
                THIS_CHARACTER.baseData.slopeMod = 1.0
              endif
            endif
          endif
        endif
      endif
      yrotate object tCharObjectNum, curveangle(THIS_CHARACTER.baseData.facing, oldFacing, System.timing.loopsPerSec * Characters.config.footTurnSpeed)
      position object tCharObjectNum, THIS_CHARACTER.baseData.posX, THIS_CHARACTER.baseData.posY, THIS_CHARACTER.baseData.posZ
      tActiveDirection = THIS_CHARACTER.status.direction
      System_log("characters.dbx", 1, "characters", " > Begin build new animation state key")
      tState as string
      tState = str$(THIS_CHARACTER.status.stance) + str$(THIS_CHARACTER.status.action) + str$(THIS_CHARACTER.status.locomotion) + str$(tActiveDirection)
      tOldState as string
      tOldState = str$(THIS_CHARACTER.oldStatus.stance) + str$(THIS_CHARACTER.oldStatus.action) + str$(THIS_CHARACTER.oldStatus.locomotion) + str$(THIS_CHARACTER.oldStatus.direction)
      tBaseState as string
      tBaseStance as string
      oldBaseStance as string
      tBaseStance = str$(THIS_CHARACTER.status.stance)
      tBaseState = tBaseStance + "000"
      oldBaseStance = str$(THIS_CHARACTER.oldStatus.stance)
tAnim as CLASS_AppliedAnimation3d
  tAnim.objectNum = -1
  tAnim.animSetNum = -1
  tAnim.speedFactor = 1.0
  tAnim.enableLoop = FALSE

      tAnim.objectNum = tCharObjectNum
      tAnim.animSetNum = tAnimSet
      keyBaseIdleStationaryStandard as string
      keyBaseIdleStationaryStandard = str$(Characters.stateId.idle) + str$(Characters.stateId.stationary) + str$(Characters.stateId.standard)
      System_log("characters.dbx", 1, "characters", "  Not using an ability")
      System_log("characters.dbx", 1, "characters", "  tState <> tAnimState and tAnimState + 'o' <> Anim3d.animResult.keyName")
      System_log("characters.dbx", 1, "characters", "  " + tState + " <> " + tAnimState + " and " + tAnimState + "o <> " + Anim3d.animResult.keyName)
      if tState <> tAnimState and tAnimState + "o" <> Anim3d.animResult.keyName 
        System_log("characters.dbx", 1, "characters", "  state changed, clear applied animations and set new queue.")
        Anim3d_clearAppliedAnimations(tCharObjectNum)
        if tState = tBaseState and tBaseStance = oldBaseStance
          System_log("characters.dbx", 1, "characters", "  Must transition old state out, then new state in.")
          tAnim.keyName = tAnimState + "o"
          tAnim.enableLoop = FALSE
          tAnim.callback = ""
          tAnim.callbackArgs = ""
          Anim3d_addAppliedAnimation(tAnim)
          if THIS_CHARACTER.status.stance <> THIS_CHARACTER.oldStatus.stance
            tAnim.keyName = tState + "i"
            tAnim.enableLoop = FALSE
            tAnim.callback = ""
            tAnim.callbackArgs = ""
            Anim3d_addAppliedAnimation(tAnim)
          endif
        else
          System_log("characters.dbx", 1, "characters", "  Transition only new state in.")
          System_log("characters.dbx", 1, "characters", "  > Transition new animation state in. action = " + str$(THIS_CHARACTER.status.action))
          if THIS_CHARACTER.status.action = Characters.stateId.jumping
            System_log("characters.dbx", 1, "characters", "    action state is jumping. register addJump callback")
            tJumpArgs as string
            tJumpAngle as string
            tJumpSpeed as float
            tJumpSpeed = 400.0
            if THIS_CHARACTER.baseData.speed > 0.0
              tJumpAngle = "30.0"
            else
              tJumpAngle = "90.0"
            endif
            tJumpArgs = str$(tCharObjectNum) + "," + str$(tJumpSpeed + THIS_CHARACTER.baseData.speed) + "," + tJumpAngle + "," + str$(THIS_CHARACTER.baseData.heading) + "," + str$(THIS_CHARACTER.baseData.mass)
            tAnim.keyName = tState + "i"
            tAnim.enableLoop = FALSE
            tAnim.callback = "CharacterEntity_addJump"
            tAnim.callbackArgs = tJumpArgs
            Anim3d_addAppliedAnimation(tAnim)
          else
            if THIS_CHARACTER.status.stance <> THIS_CHARACTER.oldStatus.stance
              tAnim.keyName = tState + "i"
              tAnim.enableLoop = FALSE
              tAnim.callback = ""
              tAnim.callbackArgs = ""
              Anim3d_addAppliedAnimation(tAnim)
            endif
          endif
        endif
        System_log("characters.dbx", 1, "characters", "  Add loop")
        tAnim.keyName = tState + "l"
        tAnim.enableLoop = TRUE
        tAnim.callback = ""
        tAnim.callbackArgs = ""
        if tState = "0110" then tAnim.speedFactor = 1.15
        Anim3d_addAppliedAnimation(tAnim)
      endif
    endif 
  next this
  Characters.status.updateMark = timer()
  if tTimer - Characters.status.slopeMark > 200
    Characters.status.slopeMark = tTimer
  endif
  System.timing.charUpdate.last = hitimer() - updateMark
  inc System.timing.charUpdate.total, SYSTEM.timing.charUpdate.last
  System_log("characters.dbx", 2, "main", "End Update: Characters_updateCharacterStates," + str$(hitimer(1000000) - updateMark) + "us")
endfunction
function Characters_getEntityRefByID(rID as string)
  tEntityIndex = -1
  for this = 0 to array count(_Characters_entities())
    if THIS_CHARACTER.baseData.objID = rID
      tEntityIndex = this
      exitfunction tEntityIndex
    endif
  next this
endfunction tEntityIndex
function CharacterEntity_addJump(rArgs as string)
  split string rArgs, ","
  tObj = intval(get split word$(1))
  tSpeed# = val(get split word$(2))
  tAngle# = val(get split word$(3))
  tHeading# = val(get split word$(4))
  tMass# = val(get split word$(5))
  Math3d_addArc(tObj, tSpeed#, tAngle#, tHeading#, tMass#)
endfunction
function CharacterEntity_resetLocomotion(this as integer)
  THIS_CHARACTER.status.locomotion = Characters.stateId.stationary
  System_log("characters.dbx", 1, "characters", "    reset locomotion to stationary after stance transition complete.")
endfunction
function CharacterEntity_setToDead(this as integer)
  THIS_CHARACTER.status.isLiving = FALSE
  THIS_CHARACTER.status.action = 0
  THIS_CHARACTER.status.locomotion = 0
  THIS_CHARACTER.status.direction = 0
  THIS_CHARACTER.status.stance = 0
  THIS_CHARACTER.phyStats.health.current = 0
  THIS_CHARACTER.phyStats.stamina.current = 0
  THIS_CHARACTER.phyStats.energy.current = 0
endfunction
`====================================================
` Advanced Lighting Functions
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
   type AL_Vec2Integer
      x as integer
      y as integer
   endtype
   type AL_Vec2Float
      x as float
      y as float
   endtype
   type AL_Vec3Integer
      x as integer
      y as integer
      z as integer
   endtype
   type AL_Vec3Float
      x as float
      y as float
      z as float
   endtype
   type AL_Vec4Float
      x as float
      y as float
      z as float
      w as float
   endtype
   `#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Effect.dba"
   `#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Object.dba"
   `#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Lighting.dba"
   `#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_PostFilter.dba"
   `#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Sky.dba"
   `#include "modules/Advanced Lighting/Include/Terrain.dba"
   `#include "modules/Advanced Lighting/Include/Water.dba"
   `#include "modules/Advanced Lighting/Include/Materials.dba"
`--------------
` Advanced Lighting Setup
`--------------
function AdvLighting_Setup(iWidth as integer,iHeight as integer,iPostWidth as integer,iPostHeight as integer,iMotionBlur as boolean)
   if AL_Enabled=0
   `Variable
      global AL_Enabled as boolean
      global AL_CameraPos as AL_Vec3Float
      global AL_CameraAng as AL_Vec3Float
      global AL_CameraDir as AL_Vec3Float
      global AL_CameraViewNormal as float
      global AL_ViewVec as AL_Vec2Float
      global AL_PostViewVec as AL_Vec2Float
      global AL_CameraView as AL_Vec4Float
      global AL_Directory as string
      global AL_CurrentCamera as integer
      global AL_WorldSize as float
      global AL_ShadowBias as float
      global AL_ShadowOffset as float
      global AL_ShadowRange as float
      global AL_AmbientAdjust as float
      global AL_DirectionalColorAdjust as float
      global AL_DirLightLensFlare as AL_Vec3Integer
      global AL_SpotLightCount as integer
      global AL_SpotLightVisibleCount as integer
      global AL_PointLightCount as integer
      global AL_PointLightVisibleCount as integer
      global AL_SpotShadowMapCount as integer
      global AL_SpotShadowUpdate as integer
      global AL_MaxSpotShadowUpdate as integer
      global AL_PointShadowMapCount as integer
      global AL_PointShadowUpdate as integer
      global AL_MaxPointShadowUpdate as integer
      global AL_SpotDynamicTimer as integer
      global AL_PointDynamicTimer as integer
      global AL_EffectCount as integer
      global AL_MotionBlurCount as integer
      global AL_MotionBlurAttachCount as integer
      global AL_AlphaEffectCount as integer
      global AL_AlphaEffectLightingCount as integer
      global AL_ObjectCount as integer
      global AL_AlphaObjectCount as integer
      global AL_ObjectAutoUpdateCount as integer
      global AL_ObjectDynamicTimer as integer
      global AL_ShadowmapLOD as integer
      global AL_AlphaLightsUpdate as integer
      global AL_AlphaEffectLightingUpdate as integer
      global AL_AlphaEffectLightingMaxUpdate as integer
      global AL_AlphaEffectLightingNum as integer
      global AL_FogAreaCount as integer
      global AL_MotionBlur as boolean
      AL_Directory="resource/Advanced Lighting/Shaders/"
      AL_CurrentCamera=0
      AL_ShadowBias=0.001
      AL_ShadowOffset=2
      AL_ShadowRange=5000
      AL_WorldSize=0.5
      AL_DirectionalColorAdjust=0.1
      AL_DirLightLensFlare.x=-1
      AL_AmbientAdjust=0.1
      AL_Enabled=1
      AL_ViewVec.x=iWidth
      AL_ViewVec.y=iHeight
      AL_PostViewVec.x=iPostWidth
      AL_PostViewVec.y=iPostHeight
      AL_SpotLightCount=-1
      AL_SpotLightVisibleCount=-1
      AL_PointLightCount=-1
      AL_PointLightVisibleCount=-1
      AL_SpotShadowMapCount=12
      AL_SpotShadowUpdate=1
      AL_MaxSpotShadowUpdate=3
      AL_PointShadowMapCount=8
      AL_PointShadowUpdate=1
      AL_MaxPointShadowUpdate=3
      AL_SpotDynamicTimer=10
      AL_PointDynamicTimer=20
      AL_EffectCount=-1
      AL_MotionBlurCount=-1
      AL_MotionBlurAttachCount=-1
      AL_AlphaEffectCount=-1
      AL_AlphaEffectLightingCount=-1
      AL_ObjectCount=-1
      AL_AlphaObjectCount=-1
      AL_AlphaEffectLightingUpdate=0
      AL_AlphaEffectLightingMaxUpdate=4
      AL_AlphaEffectLightingNum=0
      AL_ObjectAutoUpdateCount=-1
      AL_ObjectDynamicTimer=20
      AL_ShadowmapLOD=800
      AL_FogAreaCount=-1
      AL_MotionBlur=iMotionBlur
   `Arrays
      global dim AL_Camera(9) as integer
      global dim AL_Image(8) as integer
      global dim AL_CameraData(8) as float
      global dim AL_Ldx(5) as float
      global dim AL_Ldy(5) as float
      global dim AL_Ldz(5) as float
      global dim AL_Ambient(8) as float
      global dim AL_Fog(17) as float
      global dim AL_ShadowMapCamera(11) as integer
      global dim AL_ShadowMapTexture(11) as integer
      global dim AL_CurrentShadowMapSize(11) as integer
      global dim AL_CurrentShadowMapImage(12) as integer
      global dim AL_CurrentShadowMapFormat(11) as integer
      global dim AL_DirectionalUpdate(3) as integer
      global dim AL_SpotLight(1) as AL_LightData
      global dim AL_SpotLightVisible() as integer
      global dim AL_SpotShadowMap(AL_SpotShadowMapCount) as AL_SpotShadowMapData
      global dim AL_PointLight(1) as AL_LightData
      global dim AL_PointLightVisible() as integer
      global dim AL_PointShadowMap(AL_PointShadowMapCount) as AL_PointShadowMapData
      global dim AL_PointShadowSide((AL_PointShadowMapCount+1)*6) as AL_PointShadowSideData
      global dim AL_Effect() as AL_EffectData
      global dim AL_MotionBlur() as AL_MotionBlurData
      global dim AL_MotionBlurAttach() as AL_MotionBlurAttachData
      global dim AL_AlphaEffect() as AL_AlphaEffectData
      global dim AL_AlphaEffectLighting() as integer
      global dim AL_Object() as AL_ObjectData
      global dim AL_AlphaObject() as AL_AlphaObjectData
      global dim AL_ObjectBounds(4) as float
      global dim AL_ObjectAutoUpdate() as integer
      global dim AL_ViewProject(15) as float
      global dim AL_ViewProjectFrustum(AL_SpotShadowMapCount,5,3) as float
      global dim AL_LightsToCamera(5) as integer
      global dim AL_LightsToCameraDis(5) as float
      global dim AL_LensFlare() as AL_LensFlareData
      global dim AL_SubFlare() as AL_SubFlareData
      global dim AL_FlareObject() as AL_FlareObjectData
      global dim AL_FlareObjectCount(1) as integer
   `Vectors/matrices
      global dim AL_Vector3(4) as integer
      global dim AL_Vector4(6) as integer
      global dim AL_Matrix(6) as integer
      AL_Vector3(1)=201:null=make vector3(AL_Vector3(1))
      AL_Vector3(2)=202:null=make vector3(AL_Vector3(2))
      AL_Vector3(3)=203:null=make vector3(AL_Vector3(3))
      AL_Vector3(4)=204:null=make vector3(AL_Vector3(4))
      AL_Vector4(1)=205:null=make vector4(AL_Vector4(1))
      AL_Vector4(2)=206:null=make vector4(AL_Vector4(2))
      AL_Vector4(3)=207:null=make vector4(AL_Vector4(3))
      AL_Vector4(4)=208:null=make vector4(AL_Vector4(4))
      AL_Vector4(5)=209:null=make vector4(AL_Vector4(5))
      AL_Vector4(6)=210:null=make vector4(AL_Vector4(6))
      AL_Matrix(1)=211:null=make matrix4(AL_Matrix(1))
      AL_Matrix(2)=212:null=make matrix4(AL_Matrix(2))
      AL_Matrix(3)=213:null=make matrix4(AL_Matrix(3))
      AL_Matrix(4)=214:null=make matrix4(AL_Matrix(4))
      AL_Matrix(5)=215:null=make matrix4(AL_Matrix(5))
      AL_Matrix(6)=216:null=make matrix4(AL_Matrix(6))
   `Renders
      AL_Camera(1)=0
      AL_Image(1)=find free image()
      set camera to image AL_Camera(1),AL_Image(1),AL_ViewVec.x,AL_ViewVec.y,3,116 `Geometry
      backdrop off AL_Camera(1)
      AL_Camera(2)=find free camera()
      AL_Image(2)=find free image()
      if AL_MotionBlur=1
         AL_CreateCamera(AL_Camera(2),AL_Image(2),AL_ViewVec.x,AL_ViewVec.y,113) `Position/depth/Motion vec
      else
         AL_CreateCamera(AL_Camera(2),AL_Image(2),AL_ViewVec.x,AL_ViewVec.y,112) `Position/depth
      endif
      AL_Camera(3)=find free camera()
      AL_Image(3)=find free image()
      AL_CreateCamera(AL_Camera(3),AL_Image(3),AL_PostViewVec.x/4,AL_PostViewVec.y/4,20) `Reflection
      AL_Camera(5)=find free camera()
      AL_Image(5)=find free image()
      AL_CreateCamera(AL_Camera(5),AL_Image(5),AL_PostViewVec.x/4,AL_PostViewVec.y/4,21) `Distort/blocker/SSAO
      backdrop on AL_Camera(5)
      color backdrop AL_Camera(5),rgb(127,127,0)
      AL_Camera(6)=find free camera()
      AL_Image(6)=find free image()
      AL_CreateCamera(AL_Camera(6),AL_Image(6),AL_PostViewVec.x/4,AL_PostViewVec.y/4,21) `Distort/scatter/SSAO blur
      AL_Image(7)=find free image()
      load image AL_Directory+"Resources/Mask.dds",AL_Image(7)
      AL_Image(8)=find free image()
      load image AL_Directory+"Resources/Noise.dds",AL_Image(8)
   `Variance shadowmap cameras
      AL_Image(0)=find free image()
      load image AL_Directory+"Resources/Blend cube.dds",AL_Image(0),2
      for c=1 to 11
         AL_ShadowMapCamera(c)=find free camera()
         make camera AL_ShadowMapCamera(c)
      next c
   `Variance shadowmap combine/blur
      global dim AL_ShadowMapEffect(6) as integer
      AL_ShadowMapEffect(0)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Backdrop.fx",AL_ShadowMapEffect(0),0,1
      AL_ShadowMapEffect(1)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Combine.fx",AL_ShadowMapEffect(1),0,1
      AL_ShadowMapEffect(2)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Combine 1.fx",AL_ShadowMapEffect(2),0,1
      AL_ShadowMapEffect(3)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Combine 2.fx",AL_ShadowMapEffect(3),0,1
      AL_ShadowMapEffect(4)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Blur.fx",AL_ShadowMapEffect(4),0,1
      AL_ShadowMapEffect(5)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Blur 1.fx",AL_ShadowMapEffect(5),0,1
      AL_ShadowMapEffect(6)=find free effect()
      load effect AL_Directory+"Lighting/Shadow Blur 2.fx",AL_ShadowMapEffect(6),0,1
      global dim AL_ShadowMapObject(6) as integer
      global dim AL_ShadowMapObjectTexture(6) as integer
      for o=0 to 6
         AL_ShadowMapObject(o)=find free object()
         make object plain AL_ShadowMapObject(o),2,2,1
      next o
      set object effect AL_ShadowMapObject(0),AL_ShadowMapEffect(0)
      set object mask AL_ShadowMapObject(0),(2^AL_ShadowMapCamera(1))+(2^AL_ShadowMapCamera(2))+(2^AL_ShadowMapCamera(3))+(2^AL_ShadowMapCamera(6))+(2^AL_ShadowMapCamera(7))+(2^AL_ShadowMapCamera(8))
      set object effect AL_ShadowMapObject(1),AL_ShadowMapEffect(4)
      set object mask AL_ShadowMapObject(1),(2^AL_ShadowMapCamera(5))
      hide object AL_ShadowMapObject(1):exclude object on AL_ShadowMapObject(1)
      set object effect AL_ShadowMapObject(2),AL_ShadowMapEffect(5)
      set object mask AL_ShadowMapObject(2),(2^AL_ShadowMapCamera(5))
      hide object AL_ShadowMapObject(2):exclude object on AL_ShadowMapObject(2)
      set object effect AL_ShadowMapObject(3),AL_ShadowMapEffect(6)
      set object mask AL_ShadowMapObject(3),(2^AL_ShadowMapCamera(5))
      hide object AL_ShadowMapObject(3):exclude object on AL_ShadowMapObject(3)
      set object effect AL_ShadowMapObject(4),AL_ShadowMapEffect(4)
      set object mask AL_ShadowMapObject(4),(2^AL_ShadowMapCamera(9))
      set object effect AL_ShadowMapObject(5),AL_ShadowMapEffect(4)
      set object mask AL_ShadowMapObject(5),(2^AL_ShadowMapCamera(10))
      set object effect AL_ShadowMapObject(6),AL_ShadowMapEffect(4)
      set object mask AL_ShadowMapObject(6),(2^AL_ShadowMapCamera(11))
   `Amabient
      global AL_AmbientObject as integer
      global AL_AmbientEffect as integer
      AL_AmbientObject=find free object()
      AL_AmbientEffect=find free effect()
      make object plain  AL_AmbientObject,2,2,1
      load effect AL_Directory+"Lighting/Amabient.fx",AL_AmbientEffect,0,1
      texture object AL_AmbientObject,0,AL_Image(1)
      texture object AL_AmbientObject,1,AL_Image(2)
      texture object AL_AmbientObject,3,AL_Image(7)
      set object effect AL_AmbientObject,AL_AmbientEffect
      set object mask AL_AmbientObject,2^AL_Camera(8)
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_AmbientEffect,"ViewSize",AL_Vector4(1)
      global AL_DirLightObject as integer
      AL_DirLightObject=find free object()
      make object cube AL_DirLightObject,-100
      hide object AL_DirLightObject
      exclude object on AL_DirLightObject
   `Set point light variables
      for p=1 to AL_PointShadowMapCount
         AL_PointShadowSide((p*6)+0).Angle.y=90
         AL_PointShadowSide((p*6)+1).Angle.x=270
         AL_PointShadowSide((p*6)+3).Angle.y=270
         AL_PointShadowSide((p*6)+4).Angle.x=90
         AL_PointShadowSide((p*6)+5).Angle.y=180
      next p
   `Set ambient & fog
      AdvLighting_SetAmbient(64,64,64)
      AdvLighting_SetFog(5000,2,128,128,128,128,128,128)
      AdvLighting_SetHeightFog(0,0,0,0,0,0,0,0,0)
   endif
endfunction
`--------------
` Advanced Lighting Update
`--------------
function AdvLighting_Update()
   if AL_Enabled=1
   `Get camera data
      AL_CameraPos.x=camera position x(AL_CurrentCamera)
      AL_CameraPos.y=camera position y(AL_CurrentCamera)
      AL_CameraPos.z=camera position z(AL_CurrentCamera)
      AL_CameraAng.x=camera angle x(AL_CurrentCamera)
      AL_CameraAng.y=camera angle y(AL_CurrentCamera)
      AL_CameraAng.z=camera angle z(AL_CurrentCamera)
      rotate x matrix4 AL_Matrix(1),wrapvalue(AL_CameraAng.x)/57.295
      rotate y matrix4 AL_Matrix(2),wrapvalue(AL_CameraAng.y)/57.295
      rotate z matrix4 AL_Matrix(3),wrapvalue(AL_CameraAng.z)/57.295
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set vector3 AL_Vector3(1),0,0,1
      transform normals vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(4)
      AL_CameraDir.x=x vector3(AL_Vector3(1))
      AL_CameraDir.y=y vector3(AL_Vector3(1))
      AL_CameraDir.z=z vector3(AL_Vector3(1))
      set vector3 AL_Vector3(1),AL_CameraDir.x,AL_CameraDir.y-1,AL_CameraDir.z
      AL_CameraViewNormal=dot product vector3(AL_Vector3(1),AL_Vector3(1)) * 0.5
   `Frustum culling
      set current camera AL_CurrentCamera
      view matrix4 AL_Matrix(1)
      projection matrix4 AL_Matrix(2)
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
      AL_GetViewProjectFrustum(0,-1)
      r=inverse matrix4(AL_Matrix(2),AL_Matrix(2))
      set effect constant matrix AL_AmbientEffect,"ProjInv",AL_Matrix(2)
      if AL_SSAOEnabled=1 then set effect constant matrix AL_PostProcessingEffect(2),"ProjInv",AL_Matrix(2)
   `Update cameras & objects
      for c=1 to 9
         position camera AL_Camera(c),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         rotate camera AL_Camera(c),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      next c
      position object AL_AmbientObject,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      rotate object AL_AmbientObject,AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      PostFilter_Update()
      LensFlare_Update()
      FogArea_Update()
      Sky_Update()
      Clouds_Update()
      Terrain_Update()
      Water_Update()
   `Update lighting & shadowmaps
      AlphaEffect_UpdateLighting()
      SpotLight_Update()
      PointLight_Update()
      Object_AutoUpdateObject()
      SpotLight_Render()
      PointLight_Render()
   `Update directional light
      if AL_DirLightInUse=1 and AL_DirLightVisible=1
         position object AL_DirLightObject,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         set vector4 AL_Vector4(1),AL_CameraPos.x-(AL_DirLightDirection.x*AL_CameraData(2)),AL_CameraPos.y-(AL_DirLightDirection.y*AL_CameraData(2)),AL_CameraPos.z-(AL_DirLightDirection.z*AL_CameraData(2)),0
         set effect constant vector AL_DirLightEffect,"LightPosition",AL_Vector4(1)
         for e=0 to AL_EffectCount:set effect constant vector AL_Effect(e).Number,"LightPosition",AL_Vector4(1):next e
         if AL_SkyEnabled=1 then set effect constant vector AL_SkyEffect(1),"LightPosition",AL_Vector4(1)
         if Water_Enabled=1 then for e=0 to Water_Shaders:set effect constant vector Water_Effect(e),"LightPosition",AL_Vector4(1):next e
         if AL_DirLightshadowQuality>0
            DirLight_Render(1,((AL_DirLightRange/2.5)/2.5)/2.5)
            if AL_DirectionalUpdate(1)<4 and AL_DirectionalUpdate(2)<8
               DirLight_Render(2,(AL_DirLightRange/2.5)/2.5)
            endif
            if AL_DirectionalUpdate(1)=4
               DirLight_Render(3,(AL_DirLightRange/2.5))
               AL_DirectionalUpdate(1)=0
            endif
            if AL_DirectionalUpdate(2)>7 and AL_DirectionalUpdate(1)>0
               DirLight_Render(4,AL_DirLightRange)
               AL_DirectionalUpdate(2)=0
            endif
            inc AL_DirectionalUpdate(1)
            inc AL_DirectionalUpdate(2)
         endif
      endif
   `World position/depth
      Terrain_FrustumCull()
      for e=0 to AL_EffectCount:set effect technique AL_Effect(e).Number,"WPosition":next e
      sync mask 2^AL_Camera(2)
      sync
   `World geometry & 3D Clouds
      tSyncMask=0
      for e=0 to AL_EffectCount:set effect technique AL_Effect(e).Number,AL_Effect(e).technique:next e
      tSyncMask=2^AL_Camera(1)
      if AL_CloudsEnable=1 and AL_SkyEnabled=1 and AL_CloudsDensity<99
         if AL_CameraPos.y>AL_CloudsHeight.x-(AL_CloudsSize*AL_CloudsHeight.y) and AL_CameraPos.y<AL_CloudsHeight.x+((AL_CloudsSize*AL_CloudsHeight.y)*4)
            tSyncMask=tSyncMask+(2^AL_CloudsCamera)
         else
            if AL_CameraPos.y<AL_CloudsHeight.x+(AL_CloudsHeight.y * 0.5)
               if AL_CameraViewNormal-((AL_CameraPos.y-AL_CloudsHeight.x)/64000)<1.75 then tSyncMask=tSyncMask+(2^AL_CloudsCamera)
            else
               if AL_CameraViewNormal-((AL_CameraPos.y-AL_CloudsHeight.x)/64000)>0.25 then tSyncMask=tSyncMask+(2^AL_CloudsCamera)
            endif
         endif
      endif
      sync mask tSyncMask
      fastsync
   `Reflection & distortion/scattering/SSAO
      tSyncMask=0
      if Water_Reflection=1 and Water_Mode=1
         if AL_CameraViewNormal-((AL_CameraPos.y-Water_Height)/64000)>0.35
            for e=0 to AL_EffectCount:set effect technique AL_Effect(e).Number,"Diffuse":next e
            if AL_SkyEnabled=1 and AL_SkyDynamic=0 then set effect technique AL_SkyEffect(1),"SkyBoxSolid"
            if AL_SkyEnabled=1 and AL_SkyDynamic=1 then set effect technique AL_SkyEffect(1),"SkySolid"
            tSyncMask=2^AL_Camera(3)
         endif
      endif
      if AL_SSAOEnabled=1 or AL_ScatteringEnabled=1 or AL_DistortionEnabled=1 or AL_LensFlareEnabled=1
         for e=0 to AL_AlphaEffectCount
            if AL_AlphaEffect(e).Blocker=0
               set effect technique AL_AlphaEffect(e).Number,"Blocker"
            else
               set effect constant float AL_AlphaEffect(e).Number,"Blocker",1
            endif
         next e
         for o=0 to AL_AlphaObjectCount
            if AL_AlphaObject(o).AdditiveBlending=1 then ghost object off AL_AlphaObject(o).Number
         next o
         if AL_LensFlareEnabled=1
            for o=0 to AL_FlareObjectCount(1):enable object zdepth AL_FlareObject(o).Object:next o
         endif
         for f=0 to AL_FogAreaCount
            if AL_FogArea(f).Visible=1 and AL_FogArea(f).InVolume=1 then set effect technique AL_FogArea(f).Effect,"Blocker"
         next f
         if AL_CloudsEnable=1 then set effect technique AL_CloudsEffect(2),"Blocker"
         tSyncMask=tSyncMask+(2^AL_Camera(5))
         if AL_SSAOEnabled=1 or AL_ScatteringEnabled=1 or AL_DistortionEnabled=1 then tSyncMask=tSyncMask+(2^AL_Camera(6))
      endif
      if AL_DirLightLensFlare.x>-1 and AL_SkyDynamic=1
         if AL_LensFlare(AL_DirLightLensFlare.x).Visible=1
            null=get object effect(AL_FlareObject(AL_DirLightLensFlare.y).Object,0)
            set vector4 AL_Vector4(1),0,-999999999,0,0
            set effect constant vector element "LensFlarePosition",AL_DirLightLensFlare.z,AL_Vector4(1)
            release effect pointer
         endif
      endif
      if tSyncMask>0
         sync mask tSyncMask
         fastsync
      endif
   `Render lighting & alpha/refracion & postprocessing
      tSyncMask=2^AL_Camera(8)
      if AL_SkyEnabled=1 and AL_SkyDynamic=0 then set effect technique AL_SkyEffect(1),"SkyBox"
      if AL_SkyEnabled=1 and AL_SkyDynamic=1 then set effect technique AL_SkyEffect(1),"Sky"
      if AL_SSAOEnabled=1 or AL_ScatteringEnabled=1 or AL_DistortionEnabled=1 or AL_LensFlareEnabled=1
         for e=0 to AL_AlphaEffectCount
            if AL_AlphaEffect(e).Blocker=0
               set effect technique AL_AlphaEffect(e).Number,"Diffuse"
            else
               set effect constant float AL_AlphaEffect(e).Number,"Blocker",0
            endif
         next e
         for o=0 to AL_AlphaObjectCount
            if AL_AlphaObject(o).AdditiveBlending=1 then ghost object on AL_AlphaObject(o).Number
         next o
         if AL_LensFlareEnabled=1
            for o=0 to AL_FlareObjectCount(1):disable object zdepth AL_FlareObject(o).Object:next o
         endif
         for f=0 to AL_FogAreaCount
             if AL_FogArea(f).InUse=1 and AL_FogArea(f).Visible=1
                if AL_FogArea(f).InVolume=1 then set effect technique AL_FogArea(f).Effect,"Diffuse"
            endif
         next f
         if AL_CloudsEnable=1 then set effect technique AL_CloudsEffect(2),"Diffuse"
      endif
      if AL_RefractionEnabled=1 then tSyncMask=tSyncMask+(2^AL_Camera(4))
      if AL_PostFilterEnabled=1
         for c=0 to AL_RenderTargetCount-1
            if AL_RenderTarget(iTarget).UpDate=1 then tSyncMask=tSyncMask+(2^AL_RenderTarget(c).Camera)
         next c
      endif
      if AL_DirLightLensFlare.x>-1
         if AL_LensFlare(AL_DirLightLensFlare.x).Visible=1
            null=get object effect(AL_FlareObject(AL_DirLightLensFlare.y).Object,0)
            set vector4 AL_Vector4(1),AL_CameraPos.x-(AL_DirLightDirection.x*AL_CameraData(2)*0.9),AL_CameraPos.y-(AL_DirLightDirection.y*AL_CameraData(2)*0.9),AL_CameraPos.z-(AL_DirLightDirection.z*AL_CameraData(2)*0.9),0
            set effect constant vector element "LensFlarePosition",AL_DirLightLensFlare.z,AL_Vector4(1)
            release effect pointer
         endif
      endif
      sync mask tSyncMask
      fastsync
   `Motion Blur Update
      set current camera AL_CurrentCamera
      Effect_MotionBlurUpdate()
   endif
endfunction
`--------------
` AdvLighting Camera
`--------------
function AdvLighting_SetCamera(iNear as float,iFar as float,iFov as float,iAspect as float)
   if AL_Enabled=1
      AL_CameraData(1)=iNear
      AL_CameraData(2)=iFar
      if AL_CameraData(3)<>iFov then AL_CameraData(3)=iFov
      if AL_CameraData(4)<>iAspect then AL_CameraData(4)=iAspect
      if AL_Camera(8)=0 then AL_SetRenderOrder()
      for c=1 to 9
         set camera range AL_Camera(c),AL_CameraData(1),AL_CameraData(2)
         if AL_CameraData(3)>0 then set camera fov AL_Camera(c),AL_CameraData(3)
         if AL_CameraData(4)>0 then set camera aspect AL_Camera(c),AL_CameraData(4)
      next c
      if AL_CloudsEnable=1
         set camera range AL_CloudsCamera,AL_CameraData(1),AL_CameraData(2)
         if AL_CameraData(3)>0 then set camera fov AL_CloudsCamera,AL_CameraData(3)
         if AL_CameraData(4)>0 then set camera aspect AL_CloudsCamera,AL_CameraData(4)
      endif
      set camera range AL_Camera(3),AL_CameraData(1)*1.5,AL_CameraData(2)*1.5
      if AL_SkyEnabled=1
         set effect constant float AL_SkyEffect(1),"CameraRange",AL_CameraData(2)/1000
         set effect constant float AL_SkyEffect(3),"CameraRange",AL_CameraData(2)/1000
      endif
   endif
endfunction
`--------------
` AdvLighting Debug
`--------------
function AdvLighting_Debug()
   if AL_Enabled=1
      if AL_DebugEnabled=0
         global AL_DebugEnabled
         global AL_DebugAdvLighting
         global AL_Debugf1Keypress
         AL_DebugEnabled=1
      endif
      if AL_DebugEnabled=1
         if AL_DebugAdvLighting=0
            if keystate(59)=1 and AL_Debugf1Keypress=0
               AL_Debugf1Keypress=1
               AL_DebugAdvLighting=1
            endif
            Text 20,20,"F1 to Show Stats : Fps = "+str$(screen fps())
         else
            if keystate(59)=1 and AL_Debugf1Keypress=0
               AL_Debugf1Keypress=1
               AL_DebugAdvLighting=0
            endif
            Text 20,20,"F1 to Hide Stats : Fps = "+str$(screen fps())
            local tLine as integer
            local tSpotCount as integer
            local tPointCount as integer
            for d=1 to AL_SpotShadowMapCount
               if AL_SpotShadowMap(d).InUse=1
                  UpdateMode$=""
                  if AL_SpotShadowMap(d).UpdateMode=1 then UpdateMode$="Everything"
                  if AL_SpotShadowMap(d).UpdateMode=2 then UpdateMode$="Dynamic"
                  if AL_SpotShadowMap(d).UpdateMode=3 then UpdateMode$="Static and Dynamic"
                  AL_SpotShadowMap(d).UpdateMode=0
                  text 20,120+tLine*20,"Spot Shadow Number ("+str$(d)+") : Effects Light Number ("+str$(AL_SpotShadowMap(d).Number)+") update: "+UpdateMode$
                  inc tSpotCount
                  inc tLine
               endif
            next d
            for d=1 to AL_PointShadowMapCount
               if AL_PointShadowMap(d).InUse=1
                  text 20,120+tLine*20,"Point Shadow Number ("+str$(d)+") : Effects Light Number ("+str$(AL_PointShadowMap(d).Number)+") update"
                  tShadowMapSide=d*6
                  for s=0 to 5
                     UpdateMode$=""
                     if AL_PointShadowSide(tShadowMapSide+s).UpdateMode=1 then UpdateMode$="Everything"
                     if AL_PointShadowSide(tShadowMapSide+s).UpdateMode=2 then UpdateMode$="Dynamic"
                     if AL_PointShadowSide(tShadowMapSide+s).UpdateMode=3 then UpdateMode$="Static and Dynamic"
                     AL_PointShadowSide(tShadowMapSide+s).UpdateMode=0
                     text 420+(150*s),120+(tLine*20),"side ("+str$(s+1)+") : "+UpdateMode$
                  next s
                  inc tPointCount
                  inc tLine
               endif
            next d
            text 20,40,"Total Spot Light Visible count ("+str$(AL_SpotLightVisibleCount+1)+")"
            text 20,60,"Total Spot shadow map count ("+str$(tSpotCount)+")"
            text 20,80,"Total Point Light Visible count ("+str$(AL_PointLightVisibleCount+1)+")"
            text 20,100,"Total Point shadow map count ("+str$(tPointCount)+")"
         endif
         if keystate(59)=0 and AL_Debugf1Keypress=1 then AL_Debugf1Keypress=0
      endif
   endif
endfunction
`--------------
` Make Camera
`--------------
function AL_CreateCamera(iCamera as integer,iImage as integer,iWidth as integer,iHeight as integer,iD3DFormat as integer)
   make camera iCamera
   set camera to image iCamera,iImage,iWidth,iHeight,3,iD3DFormat
   backdrop off iCamera
endfunction
`--------------
` Set Camera Render Order
`--------------
function AL_SetRenderOrder()
   if AL_Enabled=1
      if AL_Camera(8)=0
         AL_Camera(8)=find free camera()
         make camera AL_Camera(8)
         backdrop off AL_Camera(8)
         if AL_PostFilterEnabled=0
            if AL_RefractionEnabled=0
               AL_Camera(7)=AL_Camera(8) `Light Camera
               AL_Camera(9)=AL_Camera(8) `Alpha/Refraction Camera
            else
               AL_Camera(7)=AL_Camera(4)
               AL_Camera(9)=AL_Camera(8)
               set object mask AL_PostProcessingObject(1),2^AL_Camera(9)
            endif
         else
            if AL_RefractionEnabled=0
               AL_Camera(7)=AL_RenderTarget(0).Camera
               AL_Camera(9)=AL_RenderTarget(0).Camera
            else
               AL_Camera(7)=AL_Camera(4)
               AL_Camera(9)=AL_RenderTarget(0).Camera
               set object mask AL_PostProcessingObject(1),2^AL_Camera(9)
            endif
            for t=0 to AL_FrameTargetCount-1
               set object mask AL_FrameTarget(t).Object,2^AL_Camera(8)
            next t
         endif
         backdrop off AL_Camera(7)
         color backdrop AL_Camera(7),0
         set object mask AL_AmbientObject,2^AL_Camera(7)
      endif
   endif
endfunction
`--------------
` Free Camera
`--------------
`--------------
` Box Collision
`--------------
function AL_BoxCollision(iX as float,iY as float,iZ as float,ipX as float,ipY as float,ipZ as float,iSx as float,iSy as float,iSz as float)
   if iX<(ipX+(iSx * 0.5)) and iX>(ipX-(iSx * 0.5))
      if iY<(ipY+(iSy * 0.5)) and iY>(ipY-(iSy * 0.5))
         if iZ<(ipZ+(iSz * 0.5)) and iZ>(ipZ-(iSz * 0.5))
            exitfunction 1
         endif
      endif
   endif
endfunction 0
`--------------
` Within Distance
`--------------
function AL_InDistance(iX as float,iY as float,iZ as float,ipX as float,ipY as float,ipZ as float,iDis as float)
   set vector3 AL_Vector3(1),iX-ipX,iY-ipY,iZ-ipZ
   if length vector3(AL_Vector3(1))<iDis then exitfunction 1
endfunction 0
`--------------
` Get View Frustum
`--------------
function AL_GetViewProjectFrustum(iFrustumIndex as integer,iCamera as integer)
   if iCamera>0
      set current camera iCamera
      view matrix4 AL_Matrix(1)
      projection matrix4 AL_Matrix(2)
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
   endif
   for i=0 to 15
      AL_ViewProject(i)=get matrix4 element(AL_Matrix(3),i)
   next i
   local tLength as float
   AL_ViewProjectFrustum(iFrustumIndex,0,0)=AL_ViewProject(3)-AL_ViewProject(0)
   AL_ViewProjectFrustum(iFrustumIndex,0,1)=AL_ViewProject(7)-AL_ViewProject(4)
   AL_ViewProjectFrustum(iFrustumIndex,0,2)=AL_ViewProject(11)-AL_ViewProject(8)
   AL_ViewProjectFrustum(iFrustumIndex,0,3)=AL_ViewProject(15)-AL_ViewProject(12)
   set vector3 AL_Vector3(1),AL_ViewProjectFrustum(iFrustumIndex,0,0),AL_ViewProjectFrustum(iFrustumIndex,0,1),AL_ViewProjectFrustum(iFrustumIndex,0,2)
   tLength=1.0/Length vector3(AL_Vector3(1))
   AL_ViewProjectFrustum(iFrustumIndex,0,0)=AL_ViewProjectFrustum(iFrustumIndex,0,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,0,1)=AL_ViewProjectFrustum(iFrustumIndex,0,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,0,2)=AL_ViewProjectFrustum(iFrustumIndex,0,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,0,3)=AL_ViewProjectFrustum(iFrustumIndex,0,3)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,1,0)=AL_ViewProject(3)+AL_ViewProject(0)
   AL_ViewProjectFrustum(iFrustumIndex,1,1)=AL_ViewProject(7)+AL_ViewProject(4)
   AL_ViewProjectFrustum(iFrustumIndex,1,2)=AL_ViewProject(11)+AL_ViewProject(8)
   AL_ViewProjectFrustum(iFrustumIndex,1,3)=AL_ViewProject(15)+AL_ViewProject(12)
   AL_ViewProjectFrustum(iFrustumIndex,1,0)=AL_ViewProjectFrustum(iFrustumIndex,1,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,1,1)=AL_ViewProjectFrustum(iFrustumIndex,1,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,1,2)=AL_ViewProjectFrustum(iFrustumIndex,1,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,1,3)=AL_ViewProjectFrustum(iFrustumIndex,1,3)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,2,0)=AL_ViewProject(3)+AL_ViewProject(1)
   AL_ViewProjectFrustum(iFrustumIndex,2,1)=AL_ViewProject(7)+AL_ViewProject(5)
   AL_ViewProjectFrustum(iFrustumIndex,2,2)=AL_ViewProject(11)+AL_ViewProject(9)
   AL_ViewProjectFrustum(iFrustumIndex,2,3)=AL_ViewProject(15)+AL_ViewProject(13)
   set vector3 AL_Vector3(1),AL_ViewProjectFrustum(iFrustumIndex,2,0),AL_ViewProjectFrustum(iFrustumIndex,2,1),AL_ViewProjectFrustum(iFrustumIndex,2,2)
   tLength=1.0/Length vector3(AL_Vector3(1))
   AL_ViewProjectFrustum(iFrustumIndex,2,0)=AL_ViewProjectFrustum(iFrustumIndex,2,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,2,1)=AL_ViewProjectFrustum(iFrustumIndex,2,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,2,2)=AL_ViewProjectFrustum(iFrustumIndex,2,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,2,3)=AL_ViewProjectFrustum(iFrustumIndex,2,3)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,3,0)=AL_ViewProject(3)-AL_ViewProject(1)
   AL_ViewProjectFrustum(iFrustumIndex,3,1)=AL_ViewProject(7)-AL_ViewProject(5)
   AL_ViewProjectFrustum(iFrustumIndex,3,2)=AL_ViewProject(11)-AL_ViewProject(9)
   AL_ViewProjectFrustum(iFrustumIndex,3,3)=AL_ViewProject(15)-AL_ViewProject(13)
   AL_ViewProjectFrustum(iFrustumIndex,3,0)=AL_ViewProjectFrustum(iFrustumIndex,3,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,3,1)=AL_ViewProjectFrustum(iFrustumIndex,3,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,3,2)=AL_ViewProjectFrustum(iFrustumIndex,3,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,3,3)=AL_ViewProjectFrustum(iFrustumIndex,3,3)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,4,0)=AL_ViewProject(3)-AL_ViewProject(2)
   AL_ViewProjectFrustum(iFrustumIndex,4,1)=AL_ViewProject(7)-AL_ViewProject(6)
   AL_ViewProjectFrustum(iFrustumIndex,4,2)=AL_ViewProject(11)-AL_ViewProject(10)
   AL_ViewProjectFrustum(iFrustumIndex,4,3)=AL_ViewProject(15)-AL_ViewProject(14)
   set vector3 AL_Vector3(1),AL_ViewProjectFrustum(iFrustumIndex,4,0),AL_ViewProjectFrustum(iFrustumIndex,4,1),AL_ViewProjectFrustum(iFrustumIndex,4,2)
   tLength#=1.0/Length vector3(AL_Vector3(1))
   AL_ViewProjectFrustum(iFrustumIndex,4,0)=AL_ViewProjectFrustum(iFrustumIndex,4,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,4,1)=AL_ViewProjectFrustum(iFrustumIndex,4,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,4,2)=AL_ViewProjectFrustum(iFrustumIndex,4,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,4,3)=AL_ViewProjectFrustum(iFrustumIndex,4,3)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,5,0)=AL_ViewProject(3)+AL_ViewProject( 2)
   AL_ViewProjectFrustum(iFrustumIndex,5,1)=AL_ViewProject(7)+AL_ViewProject( 6)
   AL_ViewProjectFrustum(iFrustumIndex,5,2)=AL_ViewProject(11)+AL_ViewProject(10)
   AL_ViewProjectFrustum(iFrustumIndex,5,3)=AL_ViewProject(15)+AL_ViewProject(14)
   set vector3 AL_Vector3(1),AL_ViewProjectFrustum(iFrustumIndex,5,0),AL_ViewProjectFrustum(iFrustumIndex,5,1),AL_ViewProjectFrustum(iFrustumIndex,5,2)
   tLength=1.0/Length vector3(AL_Vector3(1))
   AL_ViewProjectFrustum(iFrustumIndex,5,0)=AL_ViewProjectFrustum(iFrustumIndex,5,0)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,5,1)=AL_ViewProjectFrustum(iFrustumIndex,5,1)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,5,2)=AL_ViewProjectFrustum(iFrustumIndex,5,2)*tLength
   AL_ViewProjectFrustum(iFrustumIndex,5,3)=AL_ViewProjectFrustum(iFrustumIndex,5,3)*tLength
endfunction
`--------------
` Sphere In Frustum
`--------------
function AL_GetSphereInFrustum(iFrustumIndex as integer,iPosX as float,iPosY as float,iPosZ as float,iRadius as float)
   for e=0 to 5
      if (AL_ViewProjectFrustum(iFrustumIndex,e,0)*iPosX)+(AL_ViewProjectFrustum(iFrustumIndex,e,1)*iPosY)+(AL_ViewProjectFrustum(iFrustumIndex,e,2)*iPosZ)+AL_ViewProjectFrustum(iFrustumIndex,e,3)<=0-iRadius then exitfunction 0
   next e
endfunction 1
`--------------
` Box In Frustum
`--------------
function AL_GetBoxInFrustum(iFrustumIndex as integer,iPosX as float,iPosY as float,iPosZ as float,iSizeX as float,iSizeY as float,iSizeZ as float)
   local tMinX as float
   local tMinY as float
   local tMinZ as float
   local tMaxX as float
   local tMaxY as float
   local tMaxZ as float
   local rCull as integer
   for e=0 to 5
      tMinX=AL_ViewProjectFrustum(iFrustumIndex,e,0)*(iPosX-iSizeX)
      tMaxX=AL_ViewProjectFrustum(iFrustumIndex,e,0)*(iPosX+iSizeX)
      tminY=AL_ViewProjectFrustum(iFrustumIndex,e,1)*(iPosY-iSizeY)
      tMaxY=AL_ViewProjectFrustum(iFrustumIndex,e,1)*(iPosY+iSizeY)
      tMinZ=AL_ViewProjectFrustum(iFrustumIndex,e,2)*(iPosZ-iSizeZ)
      tMaxZ=AL_ViewProjectFrustum(iFrustumIndex,e,2)*(iPosZ+iSizeZ)
      rCull=0
         if tMinX+tMinY+tMinZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      if rCull=0
         if tMaxX+tMinY+tMinZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if tMinX+tMaxY+tMinZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if tMaxX+tMaxY+tMinZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
     endif
      if rCull=0
         if tMinX+tMinY+tMaxZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if tMaxX+tMinY+tMaxZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if tMinX+tMaxY+tMaxZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         if tMaxX+tMaxY+tMaxZ+AL_ViewProjectFrustum(iFrustumIndex,e,3)>0 then rCull=1
      endif
      if rCull=0
         exitfunction 0
      endif
   next e
endfunction 1
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
type AL_EffectData
   Number as integer
   Object as integer
   technique as string
   MotionBlur as integer
endtype
type AL_MotionBlurData
   Inuse as integer
   AttachCount as integer
   MotionBlurAttachStart as integer
endtype
type AL_MotionBlurAttachData
   Object as integer
   ObjectArray as integer
   Limb as integer
endtype
type AL_AlphaEffectData
   Number as integer
   Blocker as boolean
   LightingEnabled as integer
   LightingPosition as AL_Vec3Float
   LightingTrackCamera as boolean
   LightingTrackObject as integer
   Light1 as integer
   LightDis1 as float
   Light2 as integer
   LightDis2 as float
   Light3 as integer
   LightDis3 as float
   Light4 as integer
   LightDis4 as float
   Light5 as integer
   LightDis5 as float
endtype
`--------------
` Add Effect
`--------------
function Effect_Add(iEffect as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         tEffect=AL_EffectArray(iEffect)
         if tEffect=-1
            array insert at bottom AL_Effect()
            inc AL_EffectCount
            AL_Effect(AL_EffectCount).Number=iEffect
            AL_Effect(AL_EffectCount).Object=0
            AL_Effect(AL_EffectCount).technique="Geometry"
            AL_Effect(AL_EffectCount).MotionBlur=-1
            set vector4 AL_Vector4(1),AL_Ambient(1)/255,AL_Ambient(2)/255,AL_Ambient(3)/255,0
            set effect constant vector AL_Effect(AL_EffectCount).Number,"AmbientColor",AL_Vector4(1)
            set vector4 AL_Vector4(1),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
            set effect constant vector AL_Effect(AL_EffectCount).Number,"LightDirection",AL_Vector4(1)
            set vector4 AL_Vector4(1),(AL_DirLightColor.x/255)*AL_Ambient(5),(AL_DirLightColor.y/255)*AL_Ambient(6),(AL_DirLightColor.z/255)*AL_Ambient(7),0
            set effect constant vector AL_Effect(AL_EffectCount).Number,"LightColor",AL_Vector4(1)
            set vector4 AL_Vector4(1),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
            set effect constant vector AL_Effect(AL_EffectCount).Number,"LightDirection",AL_Vector4(1)
            set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
            set vector4 AL_Vector4(2),AL_Fog(3)/255,AL_Fog(4)/255,AL_Fog(5)/255,0
            set vector4 AL_Vector4(3),AL_Fog(6)/255,AL_Fog(7)/255,AL_Fog(8)/255,0
            set effect constant vector AL_Effect(AL_EffectCount).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_Effect(AL_EffectCount).Number,"FogColor1",AL_Vector4(2)
            set effect constant vector AL_Effect(AL_EffectCount).Number,"FogColor2",AL_Vector4(3)
            set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
            set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
            set effect constant vector AL_Effect(AL_EffectCount).Number,"HeightFog",AL_Vector4(1)
            set effect constant vector AL_Effect(AL_EffectCount).Number,"HeightFogColor",AL_Vector4(2)
            set effect constant float AL_Effect(AL_EffectCount).Number,"ClipHeight",Water_Height-(Water_WaveHeight/2)
         endif
      endif
   endif
endfunction AL_EffectCount
`--------------
` Remove Effect
`--------------
function Effect_Remove(iEffect as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         tEffect=AL_EffectArray(iEffect)
         if tEffect>-1
            if AL_Effect(tEffect).MotionBlur>-1
               tMotionBlur=AL_Effect(tEffect).MotionBlur
               for o=0 to 50
                  tMotionBlurAttach=AL_MotionBlur(tMotionBlur).MotionBlurAttachStart
                  if AL_MotionBlurAttach(AL_MotionBlurAttachCount).Object>0 then AL_Object(AL_MotionBlurAttach(tMotionBlurAttach).ObjectArray).MotionBlur=0
                  array delete element AL_Effect(),tMotionBlurAttach
                  dec AL_MotionBlurAttachCount
               next o
               for m=0 to AL_MotionBlurCount
                  if AL_MotionBlur(m).MotionBlurAttachStart>AL_MotionBlur(tMotionBlur).MotionBlurAttachStart
                     dec AL_MotionBlur(m).MotionBlurAttachStart,51
                  endif
               next m
               AL_MotionBlur(tMotionBlur).InUse=0
               AL_MotionBlur(tMotionBlur).AttachCount=0
               AL_MotionBlur(tMotionBlur).MotionBlurAttachStart=0
            endif
            array delete element AL_Effect(),tEffect
            dec AL_EffectCount
         endif
      endif
   endif
endfunction
`--------------
` Set Detail Mapping
`--------------
function Effect_SetDetailMapping(iEffect as integer,iDetail as boolean)
   if AL_Enabled=1
      if iDetail=1
         Effect_SetTechnique(iEffect,"GeometryDetail")
      else
         Effect_SetTechnique(iEffect,"Geometry")
      endif
   endif
endfunction
`--------------
` Set Technique
`--------------
function Effect_SetTechnique(iEffect as integer,iTechnique as string)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         tEffect=AL_EffectArray(iEffect)
         if tEffect>-1 then AL_Effect(tEffect).technique=iTechnique
      endif
   endif
endfunction
`--------------
` Motion Blur effect
`--------------
function Effect_MotionBlur(iEffect as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         local tMotionBlur as integer
         tEffect=AL_EffectArray(iEffect)
         if tEffect>-1
            if AL_Effect(tEffect).MotionBlur=-1
               tMotionBlur=-1
               for m=0 to AL_MotionBlurCount
                  if AL_MotionBlur(m).InUse=0 then tMotionBlur=m
               next m
               if tMotionBlur=-1
                  array insert at bottom AL_MotionBlur()
                  inc AL_MotionBlurCount
                  tMotionBlur=AL_MotionBlurCount
               endif
               AL_Effect(tEffect).MotionBlur=tMotionBlur
               AL_MotionBlur(tMotionBlur).InUse=1
               AL_MotionBlur(tMotionBlur).AttachCount=0
               AL_MotionBlur(tMotionBlur).MotionBlurAttachStart=AL_MotionBlurAttachCount+1
               for o=0 to 50
                  array insert at bottom AL_MotionBlurAttach()
                  inc AL_MotionBlurAttachCount
                  AL_MotionBlurAttach(AL_MotionBlurAttachCount).Object=0
                  AL_MotionBlurAttach(AL_MotionBlurAttachCount).ObjectArray=-1
                  AL_MotionBlurAttach(AL_MotionBlurAttachCount).Limb=-1
               next o
            endif
         endif
      endif
   endif
endfunction
`--------------
` Motion Blur effect Update
`--------------
function Effect_MotionBlurUpdate()
   if AL_Enabled=1 and AL_MotionBlur=1
      local tObject as integer
      local tLimb as integer
      local tMotionBlur as integer
      local tMotionBlurAttach as integer
      local tGetEffect as integer
      view matrix4 AL_Matrix(1)
      projection matrix4 AL_Matrix(2)
      multiply matrix4 AL_Matrix(5),AL_Matrix(1),AL_Matrix(2)
      if AL_SkyEnabled=1 then set effect constant matrix AL_SkyEffect(2),"PreviousVP",AL_Matrix(5)
      for e=0 to AL_EffectCount
         set effect constant matrix AL_Effect(e).Number,"PreviousVP",AL_Matrix(5)
         if AL_Effect(e).MotionBlur>-1
            tMotionBlur=AL_Effect(e).MotionBlur
            if AL_MotionBlur(tMotionBlur).AttachCount>0
               tGetEffect=0
               for o=0 to AL_MotionBlur(tMotionBlur).AttachCount-1
                  tMotionBlurAttach=AL_MotionBlur(tMotionBlur).MotionBlurAttachStart+o
                  if AL_MotionBlurAttach(tMotionBlurAttach).Object>0
                     tObject=AL_MotionBlurAttach(tMotionBlurAttach).Object
                     if AL_Object(AL_MotionBlurAttach(tMotionBlurAttach).ObjectArray).Updated=1
                        if AL_MotionBlurAttach(tMotionBlurAttach).Limb>-1
                           tLimb=AL_MotionBlurAttach(tMotionBlurAttach).Limb
                           rotate x matrix4 AL_Matrix(1),-wrapvalue(object angle x(tObject))*0.0174532778
                           rotate y matrix4 AL_Matrix(2),-wrapvalue(object angle y(tObject))*0.0174532778
                           rotate z matrix4 AL_Matrix(3),-wrapvalue(object angle z(tObject))*0.0174532778
                           multiply matrix4 AL_Matrix(4),AL_Matrix(3),AL_Matrix(2)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                           rotate x matrix4 AL_Matrix(1),-wrapvalue(limb angle x(tObject,tLimb))*0.0174532778
                           rotate y matrix4 AL_Matrix(2),-wrapvalue(limb angle y(tObject,tLimb))*0.0174532778
                           rotate z matrix4 AL_Matrix(3),-wrapvalue(limb angle z(tObject,tLimb))*0.0174532778
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(2)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                           scale matrix4 AL_Matrix(1),(object size x(tObject,1)/object size x(tObject))*(limb scale x(tObject,tLimb)/100),(object size y(tObject,1)/object size y(tObject))*(limb scale y(tObject,tLimb)/100),(object size z(tObject,1)/object size z(tObject))*(limb scale z(tObject,tLimb)/100)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                           transpose matrix4 AL_Matrix(4),AL_Matrix(4)
                           translate matrix4 AL_Matrix(1),limb position x(tObject,tLimb),limb position y(tObject,tLimb),limb position z(tObject,tLimb)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                        else
                           rotate x matrix4 AL_Matrix(1),-wrapvalue(object angle x(tObject))*0.0174532778
                           rotate y matrix4 AL_Matrix(2),-wrapvalue(object angle y(tObject))*0.0174532778
                           rotate z matrix4 AL_Matrix(3),-wrapvalue(object angle z(tObject))*0.0174532778
                           multiply matrix4 AL_Matrix(4),AL_Matrix(3),AL_Matrix(2)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                           scale matrix4 AL_Matrix(1),object size x(tObject,1)/object size x(tObject),object size y(tObject,1)/object size y(tObject),object size z(tObject,1)/object size z(tObject)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                           transpose matrix4 AL_Matrix(4),AL_Matrix(4)
                           translate matrix4 AL_Matrix(1),object position x(tObject),object position y(tObject),object position z(tObject)
                           multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(1)
                        endif
                        if tGetEffect=0 then null=get object effect(tObject,-1):tGetEffect=1
                        set vector4 AL_Vector4(1),get matrix4 element(AL_Matrix(4),0),get matrix4 element(AL_Matrix(4),1),get matrix4 element(AL_Matrix(4),2),get matrix4 element(AL_Matrix(4),3)
                        set effect constant vector element "PreviousWorldx1",o,AL_Vector4(1)
                        set vector4 AL_Vector4(1),get matrix4 element(AL_Matrix(4),4),get matrix4 element(AL_Matrix(4),5),get matrix4 element(AL_Matrix(4),6),get matrix4 element(AL_Matrix(4),7)
                        set effect constant vector element "PreviousWorldx2",o,AL_Vector4(1)
                        set vector4 AL_Vector4(1),get matrix4 element(AL_Matrix(4),8),get matrix4 element(AL_Matrix(4),9),get matrix4 element(AL_Matrix(4),10),get matrix4 element(AL_Matrix(4),11)
                        set effect constant vector element "PreviousWorldx3",o,AL_Vector4(1)
                        set vector4 AL_Vector4(1),get matrix4 element(AL_Matrix(4),12),get matrix4 element(AL_Matrix(4),13),get matrix4 element(AL_Matrix(4),14),get matrix4 element(AL_Matrix(4),15)
                        set effect constant vector element "PreviousWorldx4",o,AL_Vector4(1)
                     endif
                  endif
               next o
               if tGetEffect=1 then release effect pointer
            endif
         endif
      next e
   endif
endfunction
`--------------
` Effect Array
`--------------
function AL_EffectArray(iEffect as integer)
   if AL_Enabled=1
      for e=0 to AL_EffectCount
         if AL_Effect(e).Number=iEffect then exitfunction e
      next e
   endif
endfunction -1
`--------------
` Add Alpha Effect
`--------------
function AlphaEffect_Add(iEffect as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         tEffect=AL_AlphaEffectArray(iEffect)
         if tEffect=-1
            array insert at bottom AL_AlphaEffect()
            inc AL_AlphaEffectCount
            AL_AlphaEffect(AL_AlphaEffectCount).Number=iEffect
            AL_AlphaEffect(AL_AlphaEffectCount).LightingTrackCamera=1
            set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"ViewSize",AL_Vector4(1)
            set vector4 AL_Vector4(1),1,1,1,0
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"AmbientColor",AL_Vector4(1)
            set vector4 AL_Vector4(1),0,0,0,0
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor1",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor2",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor3",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor4",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"LightColor5",AL_Vector4(1)
            set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
            set vector4 AL_Vector4(2),AL_Fog(3)/255,AL_Fog(4)/255,AL_Fog(5)/255,0
            set vector4 AL_Vector4(3),AL_Fog(6)/255,AL_Fog(7)/255,AL_Fog(8)/255,0
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"FogColor1",AL_Vector4(2)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"FogColor2",AL_Vector4(3)
            set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
            set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"HeightFog",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(AL_AlphaEffectCount).Number,"HeightFogColor",AL_Vector4(2)
         endif
      endif
   endif
endfunction AL_AlphaEffectCount
`--------------
` Remove Alpha Effect
`--------------
function AlphaEffect_Remove(iEffect as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         local tEffect as integer
         tEffect=AL_AlphaEffectArray(iEffect)
         AlphaEffect_EnableLighting(iEffect,0)
         if tEffect>-1
            array delete element AL_AlphaEffect(),tEffect
            dec AL_AlphaEffectCount
         endif
      endif
   endif
endfunction
`--------------
` Enable Alpha Lighting
`--------------
function AlphaEffect_EnableLighting(iEffect as integer,iEnable as boolean)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         tEffect=AL_AlphaEffectArray(iEffect)
         if tEffect>-1
            if AL_AlphaEffect(tEffect).LightingEnabled<>iEnable
               AL_AlphaEffect(tEffect).LightingEnabled=iEnable
               if AL_AlphaEffect(tEffect).LightingEnabled>0
                  tAddEffect=0
                  for e=0 to AL_AlphaEffectLightingCount
                     if AL_AlphaEffectLighting(e)=tEffect+1
                        tAddEffect=1
                        exit
                     endif
                  next e
                  if tAddEffect=0
                     array insert at bottom AL_AlphaEffectLighting()
                     inc AL_AlphaEffectLightingCount
                     AL_AlphaEffectLighting(AL_AlphaEffectLightingCount)=tEffect+1
                  endif
                  set vector4 AL_Vector4(1),AL_Ambient(1)/255,AL_Ambient(2)/255,AL_Ambient(3)/255,0
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"AmbientColor",AL_Vector4(1)
                  set vector4 AL_Vector4(1),(AL_DirLightColor.x/255)*AL_Ambient(5),(AL_DirLightColor.y/255)*AL_Ambient(6),(AL_DirLightColor.z/255)*AL_Ambient(7),0
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor",AL_Vector4(1)
                  AlphaEffect_GetclosestLights(tEffect)
               else
                  for e=0 to AL_AlphaEffectLightingCount
                     if AL_AlphaEffectLighting(e)=tEffect+1
                        array delete element AL_AlphaEffectLighting(),e
                        dec AL_AlphaEffectLightingCount
                        exit
                     endif
                  next e
                  AL_AlphaEffect(tEffect).LightingTrackCamera=1
                  AL_AlphaEffect(tEffect).LightingTrackObject=0
                  AL_AlphaEffect(tEffect).Light1=0
                  AL_AlphaEffect(tEffect).Light2=0
                  AL_AlphaEffect(tEffect).Light3=0
                  AL_AlphaEffect(tEffect).Light4=0
                  AL_AlphaEffect(tEffect).Light5=0
                  set vector4 AL_Vector4(1),1,1,1,0
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"AmbientColor",AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor",AL_Vector4(1)
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor1",AL_Vector4(1)
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor2",AL_Vector4(1)
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor3",AL_Vector4(1)
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor4",AL_Vector4(1)
                  set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor5",AL_Vector4(1)
               endif
            endif
         endif
      endif
   endif
endfunction
`--------------
` Set Lighting Positon To Camera
`--------------
function AlphaEffect_SetLightingPositonToCamera(iEffect as integer,iEnable as boolean)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         tEffect=AL_AlphaEffectArray(iEffect)
         if tEffect>-1
            AL_AlphaEffect(tEffect).LightingTrackCamera=iEnable
            AlphaEffect_GetclosestLights(tEffect)
         endif
      endif
   endif
endfunction
`--------------
` Set Lighting Positon To Object
`--------------
function AlphaEffect_SetLightingPositonToObject(iEffect as integer,iObject as integer)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         tEffect=AL_AlphaEffectArray(iEffect)
         if tEffect>-1
            if iObject>0
               if object exist(iObject)=1
                  AL_AlphaEffect(tEffect).LightingTrackObject=iObject
                  AlphaEffect_GetclosestLights(tEffect)
               else
                  AL_AlphaEffect(tEffect).LightingTrackObject=0
               endif
            else
               AL_AlphaEffect(tEffect).LightingTrackObject=0
            endif
         endif
      endif
   endif
endfunction
`--------------
` Set Lighting Positon
`--------------
function AlphaEffect_SetLightingPositon(iEffect as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_Enabled=1
      if effect exist(iEffect)=1
         tEffect=AL_AlphaEffectArray(iEffect)
         if tEffect>-1
            AL_AlphaEffect(tEffect).LightingPosition.x=iPosX
            AL_AlphaEffect(tEffect).LightingPosition.y=iPosY
            AL_AlphaEffect(tEffect).LightingPosition.z=iPosZ
         endif
      endif
   endif
endfunction
`--------------
` Alpha Effect Vertex Lighting Update
`--------------
function AlphaEffect_UpdateLighting()
   if AL_Enabled=1
      local tLightDis as float
      local tSetLight as integer
   `Get 5 closest lights to camera
      tSetLight=0
      tLightDis=0
      inc AL_AlphaLightsUpdate
      if AL_AlphaLightsUpdate>10
         AL_AlphaLightsUpdate=0
         for l=1 to 5
            if AL_LightsToCamera(l)=0
               tSetLight=l
               tLightDis=9999999999
            else
               if AL_LightsToCamera(l)<10000
                  set vector3 AL_Vector3(1),AL_CameraPos.x-AL_PointLight(AL_LightsToCamera(l)-1).Position.x,AL_CameraPos.y-AL_PointLight(AL_LightsToCamera(l)-1).Position.y,AL_CameraPos.z-AL_PointLight(AL_LightsToCamera(l)-1).Position.z
                  if AL_PointLight(AL_LightsToCamera(l)-1).Visible=0 then AL_LightsToCamera(l)=0
               else
                  set vector3 AL_Vector3(1),AL_CameraPos.x-AL_SpotLight(AL_LightsToCamera(l)-10000).Position.x,AL_CameraPos.y-AL_SpotLight(AL_LightsToCamera(l)-10000).Position.y,AL_CameraPos.z-AL_SpotLight(AL_LightsToCamera(l)-10000).Position.z
                  if AL_SpotLight(AL_LightsToCamera(l)-10000).Visible=0 then AL_LightsToCamera(l)=0
               endif
               AL_LightsToCameraDis(l)=length vector3(AL_Vector3(1))
            endif
         next l
         if tLightDis=0
            for l=1 to 5
               if AL_LightsToCameraDis(l)>tLightDis then tSetLight=l:tLightDis=AL_LightsToCameraDis(l)
            next l
         endif
         if tSetLight>0
            for l=0 to AL_PointLightVisibleCount
               tLightNum=AL_PointLightVisible(l)-1
               if AL_PointLight(tLightNum).Visible=1
                  if AL_InDistance(AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,AL_PointLight(tLightNum).Position.x,AL_PointLight(tLightNum).Position.y,AL_PointLight(tLightNum).Position.z,tLightDis)=1
                     if tLightNum<>AL_LightsToCamera(1)-1 and tLightNum<>AL_LightsToCamera(2)-1 and tLightNum<>AL_LightsToCamera(3)-1 and tLightNum<>AL_LightsToCamera(4)-1 and tLightNum<>AL_LightsToCamera(5)-1
                        AL_LightsToCamera(tSetLight)=tLightNum+1
                        exit
                     endif
                  endif
               endif
            next l
            for l=0 to AL_SpotLightVisibleCount
               tLightNum=AL_SpotLightVisible(l)-1
               if AL_SpotLight(tLightNum).Visible=1
                  if AL_InDistance(AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,AL_SpotLight(tLightNum).Position.x,AL_SpotLight(tLightNum).Position.y,AL_SpotLight(tLightNum).Position.z,tLightDis)=1
                     if tLightNum<>AL_LightsToCamera(1)-10000 and tLightNum<>AL_LightsToCamera(2)-10000 and tLightNum<>AL_LightsToCamera(3)-10000 and tLightNum<>AL_LightsToCamera(4)-10000 and tLightNum<>AL_LightsToCamera(5)-10000
                        AL_LightsToCamera(tSetLight)=tLightNum+10000
                        exit
                     endif
                  endif
               endif
            next l
         endif
      endif
   `Update lighting on alpha effects
      for e=0 to AL_AlphaEffectLightingCount
         tEffect=AL_AlphaEffectLighting(e)-1
         if AL_AlphaEffect(tEffect).LightingEnabled>1
            if AL_AlphaEffect(tEffect).Light1>0
               if AL_AlphaEffect(tEffect).Light1<10000
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.z
                  set vector4 AL_Vector4(1),(AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Color.x/255)*AL_Ambient(5),(AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Color.y/255)*AL_Ambient(6),(AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.x,AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.y,AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Position.z,AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Range
                  set vector4 AL_Vector4(3),0,0,0,1
                  if AL_PointLight(AL_AlphaEffect(tEffect).Light1-1).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light1=0
               else
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.z
                  set vector4 AL_Vector4(1),(AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Color.x/255)*AL_Ambient(5),(AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Color.y/255)*AL_Ambient(6),(AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Position.z,AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Range
                  set vector4 AL_Vector4(3),AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Normal.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Normal.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Normal.z,0
                  if AL_SpotLight(AL_AlphaEffect(tEffect).Light1-10000).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light1=0
               endif
               AL_AlphaEffect(tEffect).LightDis1=length vector3(AL_Vector3(1))
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor1",AL_Vector4(1)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightPosition1",AL_Vector4(2)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightNormal1",AL_Vector4(3)
            endif
            if AL_AlphaEffect(tEffect).Light2>0
               if AL_AlphaEffect(tEffect).Light2<10000
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.z
                  set vector4 AL_Vector4(1),(AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Color.x/255)*AL_Ambient(5),(AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Color.y/255)*AL_Ambient(6),(AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.x,AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.y,AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Position.z,AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Range
                  set vector4 AL_Vector4(3),0,0,0,1
                  if AL_PointLight(AL_AlphaEffect(tEffect).Light2-1).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light2=0
               else
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.z
                  set vector4 AL_Vector4(1),(AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Color.x/255)*AL_Ambient(5),(AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Color.y/255)*AL_Ambient(6),(AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Position.z,AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Range
                  set vector4 AL_Vector4(3),AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Normal.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Normal.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Normal.z,0
                  if AL_SpotLight(AL_AlphaEffect(tEffect).Light2-10000).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light2=0
               endif
               AL_AlphaEffect(tEffect).LightDis1=length vector3(AL_Vector3(1))
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor2",AL_Vector4(1)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightPosition2",AL_Vector4(2)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightNormal2",AL_Vector4(3)
            endif
            if AL_AlphaEffect(tEffect).Light3>0
               if AL_AlphaEffect(tEffect).Light3<10000
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.z
                  set vector4 AL_Vector4(1),(AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Color.x/255)*AL_Ambient(5),(AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Color.y/255)*AL_Ambient(6),(AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.x,AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.y,AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Position.z,AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Range
                  set vector4 AL_Vector4(3),0,0,0,1
                  if AL_PointLight(AL_AlphaEffect(tEffect).Light3-1).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light3=0
               else
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.z
                  set vector4 AL_Vector4(1),(AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Color.x/255)*AL_Ambient(5),(AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Color.y/255)*AL_Ambient(6),(AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Position.z,AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Range
                  set vector4 AL_Vector4(3),AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Normal.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Normal.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Normal.z,0
                  if AL_SpotLight(AL_AlphaEffect(tEffect).Light3-10000).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light3=0
               endif
               AL_AlphaEffect(tEffect).LightDis1=length vector3(AL_Vector3(1))
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor3",AL_Vector4(1)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightPosition3",AL_Vector4(2)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightNormal3",AL_Vector4(3)
            endif
            if AL_AlphaEffect(tEffect).Light4>0
               if AL_AlphaEffect(tEffect).Light4<10000
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.z
                  set vector4 AL_Vector4(1),(AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Color.x/255)*AL_Ambient(5),(AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Color.y/255)*AL_Ambient(6),(AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.x,AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.y,AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Position.z,AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Range
                  set vector4 AL_Vector4(3),0,0,0,1
                  if AL_PointLight(AL_AlphaEffect(tEffect).Light4-1).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light4=0
               else
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.z
                  set vector4 AL_Vector4(1),(AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Color.x/255)*AL_Ambient(5),(AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Color.y/255)*AL_Ambient(6),(AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Position.z,AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Range
                  set vector4 AL_Vector4(3),AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Normal.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Normal.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Normal.z,0
                  if AL_SpotLight(AL_AlphaEffect(tEffect).Light4-10000).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light4=0
               endif
               AL_AlphaEffect(tEffect).LightDis1=length vector3(AL_Vector3(1))
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor4",AL_Vector4(1)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightPosition4",AL_Vector4(2)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightNormal4",AL_Vector4(3)
            endif
            if AL_AlphaEffect(tEffect).Light5>0
               if AL_AlphaEffect(tEffect).Light5<10000
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.z
                  set vector4 AL_Vector4(1),(AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Color.x/255)*AL_Ambient(5),(AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Color.y/255)*AL_Ambient(6),(AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.x,AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.y,AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Position.z,AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Range
                  set vector4 AL_Vector4(3),0,0,0,1
                  if AL_PointLight(AL_AlphaEffect(tEffect).Light5-1).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light5=0
               else
                  set vector3 AL_Vector3(1),AL_AlphaEffect(tEffect).LightingPosition.x-AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.x,AL_AlphaEffect(tEffect).LightingPosition.y-AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.y,AL_AlphaEffect(tEffect).LightingPosition.z-AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.z
                  set vector4 AL_Vector4(1),(AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Color.x/255)*AL_Ambient(5),(AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Color.y/255)*AL_Ambient(6),(AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Color.z/255)*AL_Ambient(7),0
                  set vector4 AL_Vector4(2),AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Position.z,AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Range
                  set vector4 AL_Vector4(3),AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Normal.x,AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Normal.y,AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Normal.z,0
                  if AL_SpotLight(AL_AlphaEffect(tEffect).Light5-10000).Visible=0 then set vector4 AL_Vector4(2),0,0,0,0:AL_AlphaEffect(tEffect).Light5=0
               endif
               AL_AlphaEffect(tEffect).LightDis1=length vector3(AL_Vector3(1))
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightColor5",AL_Vector4(1)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightPosition5",AL_Vector4(2)
               set effect constant vector AL_AlphaEffect(tEffect).Number,"LightNormal5",AL_Vector4(3)
            endif
         endif
      next e
   `Apply closest lights
      if AL_AlphaLightsUpdate<10 and AL_AlphaEffectLightingCount>-1
         AL_AlphaEffectLightingNum=0
         repeat
            if AL_AlphaEffectLightingUpdate>AL_AlphaEffectLightingCount then AL_AlphaEffectLightingUpdate=0
            tEffect=AL_AlphaEffectLighting(AL_AlphaEffectLightingUpdate)-1
            if AL_AlphaEffect(tEffect).LightingEnabled>1
               AlphaEffect_GetclosestLights(tEffect)
            endif
            inc AL_AlphaEffectLightingUpdate
            inc AL_AlphaEffectLightingNum
         until AL_AlphaEffectLightingNum>AL_AlphaEffectLightingCount or AL_AlphaEffectLightingNum>AL_AlphaEffectLightingMaxUpdate
      endif
   endif
endfunction
`--------------
` Get 5 closest lights to effects position
`--------------
function AlphaEffect_GetclosestLights(iEffect as integer)
   local tLightDis as float
   local tSetLight as integer
   if AL_AlphaEffect(iEffect).LightingTrackCamera=1
      AL_AlphaEffect(iEffect).Light1=AL_LightsToCamera(1)
      AL_AlphaEffect(iEffect).Light2=AL_LightsToCamera(2)
      AL_AlphaEffect(iEffect).Light3=AL_LightsToCamera(3)
      AL_AlphaEffect(iEffect).Light4=AL_LightsToCamera(4)
      AL_AlphaEffect(iEffect).Light5=AL_LightsToCamera(5)
   else
      if AL_AlphaEffect(iEffect).LightingTrackObject>0
         if object exist(AL_AlphaEffect(iEffect).LightingTrackObject)=1
            AL_AlphaEffect(iEffect).LightingPosition.x=object position x(AL_AlphaEffect(iEffect).LightingTrackObject)
            AL_AlphaEffect(iEffect).LightingPosition.y=object position y(AL_AlphaEffect(iEffect).LightingTrackObject)
            AL_AlphaEffect(iEffect).LightingPosition.z=object position z(AL_AlphaEffect(iEffect).LightingTrackObject)
         else
            AL_AlphaEffect(iEffect).LightingTrackObject=0
         endif
      endif
      tSetLight=0
      tLightDis=0
      if AL_AlphaEffect(iEffect).Light1=0 then tSetLight=1:tLightDis=9999999999
      if AL_AlphaEffect(iEffect).Light2=0 then tSetLight=2:tLightDis=9999999999
      if AL_AlphaEffect(iEffect).Light3=0 then tSetLight=3:tLightDis=9999999999
      if AL_AlphaEffect(iEffect).Light4=0 then tSetLight=4:tLightDis=9999999999
      if AL_AlphaEffect(iEffect).Light5=0 then tSetLight=5:tLightDis=9999999999
      if tLightDis=0
         if AL_AlphaEffect(iEffect).LightDis1>tLightDis then tSetLight=1:tLightDis=AL_AlphaEffect(iEffect).LightDis1
         if AL_AlphaEffect(iEffect).LightDis2>tLightDis then tSetLight=2:tLightDis=AL_AlphaEffect(iEffect).LightDis2
         if AL_AlphaEffect(iEffect).LightDis3>tLightDis then tSetLight=3:tLightDis=AL_AlphaEffect(iEffect).LightDis3
         if AL_AlphaEffect(iEffect).LightDis4>tLightDis then tSetLight=4:tLightDis=AL_AlphaEffect(iEffect).LightDis4
         if AL_AlphaEffect(iEffect).LightDis5>tLightDis then tSetLight=5:tLightDis=AL_AlphaEffect(iEffect).LightDis5
      endif
      if tSetLight>0
         for l=0 to AL_PointLightVisibleCount
             tLightNum=AL_PointLightVisible(l)-1
             if AL_PointLight(tLightNum).Visible=1
               if AL_InDistance(AL_AlphaEffect(iEffect).LightingPosition.x,AL_AlphaEffect(iEffect).LightingPosition.y,AL_AlphaEffect(iEffect).LightingPosition.z,AL_PointLight(tLightNum).Position.x,AL_PointLight(tLightNum).Position.y,AL_PointLight(tLightNum).Position.z,tLightDis)=1
                   if tLightNum<>AL_AlphaEffect(iEffect).Light1-1 and tLightNum<>AL_AlphaEffect(iEffect).Light2-1 and tLightNum<>AL_AlphaEffect(iEffect).Light3-1 and tLightNum<>AL_AlphaEffect(iEffect).Light4-1 and tLightNum<>AL_AlphaEffect(iEffect).Light5-1
                      if tSetLight=1 then AL_AlphaEffect(iEffect).Light1=tLightNum+1
                      if tSetLight=2 then AL_AlphaEffect(iEffect).Light2=tLightNum+1
                      if tSetLight=3 then AL_AlphaEffect(iEffect).Light3=tLightNum+1
                      if tSetLight=4 then AL_AlphaEffect(iEffect).Light4=tLightNum+1
                      if tSetLight=5 then AL_AlphaEffect(iEffect).Light5=tLightNum+1
                      exit
                   endif
                endif
             endif
         next l
         for l=0 to AL_SpotLightVisibleCount
            tLightNum=AL_SpotLightVisible(l)-1
            if AL_SpotLight(tLightNum).Visible=1
               if AL_InDistance(AL_AlphaEffect(iEffect).LightingPosition.x,AL_AlphaEffect(iEffect).LightingPosition.y,AL_AlphaEffect(iEffect).LightingPosition.z,AL_SpotLight(tLightNum).Position.x,AL_SpotLight(tLightNum).Position.y,AL_SpotLight(tLightNum).Position.z,tLightDis)=1
                  if tLightNum<>AL_AlphaEffect(iEffect).Light1-10000 and tLightNum<>AL_AlphaEffect(iEffect).Light2-10000 and tLightNum<>AL_AlphaEffect(iEffect).Light3-10000 and tLightNum<>AL_AlphaEffect(iEffect).Light4-10000 and tLightNum<>AL_AlphaEffect(iEffect).Light5-10000
                     if tSetLight=1 then AL_AlphaEffect(iEffect).Light1=tLightNum+10000
                     if tSetLight=2 then AL_AlphaEffect(iEffect).Light2=tLightNum+10000
                     if tSetLight=3 then AL_AlphaEffect(iEffect).Light3=tLightNum+10000
                     if tSetLight=4 then AL_AlphaEffect(iEffect).Light4=tLightNum+10000
                     if tSetLight=5 then AL_AlphaEffect(iEffect).Light5=tLightNum+10000
                     exit
                  endif
               endif
            endif
         next l
      endif
   endif
endfunction
`--------------
` Alpha Effect Array
`--------------
function AL_AlphaEffectArray(iEffect as integer)
   if AL_Enabled=1
      for e=0 to AL_AlphaEffectCount
         if AL_AlphaEffect(e).Number=iEffect then exitfunction e
      next e
   endif
endfunction -1
`--------------
` Lock Effect To Set Identifiers
`--------------
function Effect_LockIdentifier(iFxfile as string)
   if AL_EffectIdentifierEnabled=0 and file exist(iFxfile)=1
      global AL_EffectIdentifierEnabled as boolean
      global AL_EffectIdentifierFxfile as string
      global AL_EffectIdentifierCount as integer
      global dim AL_EffectIdentifierDefine() as string
      global dim AL_EffectIdentifierValue() as boolean
      AL_EffectIdentifierFxfile=iFxfile
      AL_EffectIdentifierEnabled=1
      AL_EffectIdentifierCount=0
   endif
endfunction
`--------------
` Set Effect Identifier
`--------------
function Effect_SetIdentifier(iDefine as string,iValue as boolean)
   if AL_EffectIdentifierEnabled=1
      array insert at bottom AL_EffectIdentifierDefine()
      array insert at bottom AL_EffectIdentifierValue()
      AL_EffectIdentifierDefine(AL_EffectIdentifierCount)=iDefine
      AL_EffectIdentifierValue(AL_EffectIdentifierCount)=iValue
      inc AL_EffectIdentifierCount
   endif
endfunction
`--------------
` UnLock Effect Identifier
`--------------
function Effect_UnLockIdentifier()
   if AL_EffectIdentifierEnabled=1 and file exist(AL_EffectIdentifierFxfile)=1
      local tFile1 as integer
      local tFile2 as integer
      local tLineStr as string
      local tLine as string
      tFile1=1
      tFile2=1
      repeat
        inc tFile1
      until file open(tFile1)=0
      open to read tFile1,AL_EffectIdentifierFxfile
         repeat
            inc tFile2
         until file open(tFile2)=0
         open to write tFile2,AL_EffectIdentifierFxfile+"_TEMP"
         repeat
            read string tFile1,tLineStr
            if file end(tFile1)=0
               if left$(tLineStr,7)="#define"
                   tLine=right$(tLineStr,len(tLineStr)-8)
                   for i=0 to AL_EffectIdentifierCount-1
                     if lower$(left$(tLine,len(tLine)-2))=lower$(AL_EffectIdentifierDefine(i))
                        tLineStr="#define "+left$(tLine,len(tLine)-2)+" "+str$(AL_EffectIdentifierValue(i))
                     endif
                  next i
               endif
               write string tFile2,tLineStr
            endif
         until file end(tFile1)=1
         close file tFile2
      close file tFile1
      delete file AL_EffectIdentifierFxfile
      rename file AL_EffectIdentifierFxfile+"_TEMP",AL_EffectIdentifierFxfile
      AL_EffectIdentifierEnabled=0
      undim AL_EffectIdentifierDefine()
      undim AL_EffectIdentifierValue()
   endif
endfunction
 `====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
type AL_ObjectData
   Number as integer
   Dynamic as integer
   DynamicTimer as integer
   Updated as integer
   Radius as float
   Mask as integer
   OldMask as integer
   MaskAdvLighting as boolean
   MaskShadow as boolean
   MaskDirShadow as integer
   MaskReflection as boolean
   MotionBlur as boolean
   BoundSize as AL_Vec3Float
   OldPosition as AL_Vec3Integer
   OldPositionf as AL_Vec3Float
   OldAngle as AL_Vec3Integer
   OldScale as AL_Vec3Integer
endtype
type AL_AlphaObjectData
   Number as integer
   AdditiveBlending as boolean
   Mask as integer
   MaskAlpha as boolean
   MaskRefract as boolean
   MaskDistortScatter as boolean
endtype
`--------------
` Add Object
`--------------
function Object_Add(iObject as integer)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tObject as integer
         tObject=AL_ObjectArray(iObject)
         if tObject=-1
            array insert at bottom AL_Object()
            inc AL_ObjectCount
            AL_Object(AL_ObjectCount).Number=iObject
            Object_Mask(iObject,1,1,3,0)
            Object_GetBounds(iObject)
            AL_Object(AL_ObjectCount).BoundSize.x=AL_ObjectBounds(1)
            AL_Object(AL_ObjectCount).BoundSize.y=AL_ObjectBounds(2)
            AL_Object(AL_ObjectCount).BoundSize.z=AL_ObjectBounds(3)
            AL_Object(AL_ObjectCount).Radius=AL_ObjectBounds(4)
            AL_Object(AL_ObjectCount).MotionBlur=0
         endif
      endif
   endif
endfunction AL_ObjectCount
`--------------
` Remove Object
`--------------
function Object_Remove(iObject as integer)
   local tObjectIndex as integer
   tObjectIndex = AL_ObjectArray(iObject) 
   if tObjectIndex > -1
      for o = 0 to AL_ObjectAutoUpdateCount
         if AL_ObjectAutoUpdate(o) - 1 > tObjectIndex then dec AL_ObjectAutoUpdate(o)
      next o
      if AL_Object(tObjectIndex).MotionBlur = 1 then Object_MotionBlurRemove(iObject)
      for m = 0 to AL_MotionBlurAttachCount
         if AL_MotionBlurAttach(m).ObjectArray > tObjectIndex then dec AL_MotionBlurAttach(m).ObjectArray
      next m
      Object_SetAutoUpdate(iObject, 0)
      Object_Update(iObject)
      array delete element AL_Object(), tObjectIndex
      dec AL_ObjectCount
   endif
endfunction
`--------------
` Set Object Auto Update
`--------------
function Object_SetAutoUpdate(iObject as integer,iMode as integer)
   if AL_Enabled=1
      local tObject as integer
      tObject=AL_ObjectArray(iObject)
      if tObject>-1
         if AL_Object(tObject).Dynamic<>iMode
            if iMode=0
               for o=0 to AL_ObjectAutoUpdateCount
                  if AL_ObjectAutoUpdate(o)=tObject+1
                     array delete element AL_ObjectAutoUpdate(),o
                     dec AL_ObjectAutoUpdateCount
                     AL_Object(tObject).Dynamic=0
                     exit
                  endif
               next o
            else
               tAddObject as integer
               tAddObject=0
               for o=0 to AL_ObjectAutoUpdateCount
                  if AL_ObjectAutoUpdate(o)=tObject+1
                     tAddObject=1
                     exit
                  endif
               next o
               if tAddObject=0
                  array insert at bottom AL_ObjectAutoUpdate()
                  inc  AL_ObjectAutoUpdateCount
                  AL_ObjectAutoUpdate(AL_ObjectAutoUpdateCount)=tObject+1
                  AL_Object(tObject).Dynamic=1
               endif
            endif
         endif
      endif
   endif
endfunction
`--------------
` Set Object Shadow
`--------------
function Object_SetShadow(iObject as integer,iShadow as boolean,iDirShadow as integer)
   if AL_Enabled=1
      tObject=AL_ObjectArray(iObject)
      Object_Mask(iObject,AL_Object(tObject).MaskAdvLighting,iShadow,iDirShadow,AL_Object(tObject).MaskReflection)
   endif
endfunction
`--------------
` Set Object Reflection
`--------------
function Object_SetReflection(iObject as integer,iReflection as boolean)
   if AL_Enabled=1
      tObject=AL_ObjectArray(iObject)
      Object_Mask(iObject,AL_Object(tObject).MaskAdvLighting,AL_Object(tObject).MaskShadow,AL_Object(tObject).MaskDirShadow,iReflection)
   endif
endfunction
`--------------
` Set Object Mask
`--------------
function Object_Mask(iObject as integer,iAdvLighting as boolean,iShadow as boolean,iDirShadow as integer,iReflection as boolean)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tMask as integer
         local tObject as integer
         tMask=0
         tObject=AL_ObjectArray(iObject)
         if iAdvLighting=1
            tMask=(2^AL_Camera(1))+(2^AL_Camera(2))
         endif
         if iReflection=1
            tMask=tMask+(2^AL_Camera(3))
         endif
         if iShadow>0
            tMask=tMask+(2^AL_ShadowMapCamera(1))
         endif
         if iDirShadow>0
            if iDirShadow=1 then tMask=tMask+(2^AL_ShadowMapCamera(6))
            if iDirShadow=2 then tMask=tMask+(2^AL_ShadowMapCamera(6))+(2^AL_ShadowMapCamera(7))
            if iDirShadow=3 then tMask=tMask+(2^AL_ShadowMapCamera(6))+(2^AL_ShadowMapCamera(7))+(2^AL_ShadowMapCamera(8))
         endif
         set object mask iObject,tMask
         if tObject>-1
            AL_Object(tObject).Mask=tMask
            AL_Object(tObject).MaskAdvLighting=iAdvLighting
            AL_Object(tObject).MaskShadow=iShadow
            AL_Object(tObject).MaskDirShadow=iDirShadow
            AL_Object(tObject).MaskReflection=iReflection
         endif
      endif
   endif
endfunction
`--------------
` Update Object
`--------------
function Object_Update(iObject as integer)
   if AL_Enabled=1
      local tObject as integer
      tObject=AL_ObjectArray(iObject)
      if tObject>-1
         if AL_Object(tObject).MaskShadow>0
            if AL_Object(tObject).Dynamic=1
               AL_Object(tObject).OldPosition.X=AL_Object(tObject).OldPosition.X+999999
            else
               AL_Object(tObject).DynamicTimer=0
               Object_UpdateObject(tObject)
            endif
         else
            AL_Object(tObject).Updated=1
         endif
      endif
   endif
endfunction
`--------------
` Object Motion Blur
`--------------
function Object_SetMotionBlur(iObject as integer,iLimb as integer,iEffect as integer)
   local tMotionBlurAttach as integer
   tMotionBlurAttach=-1
   if AL_Enabled=1
      if object exist(iObject)=1
         if effect exist(iEffect)=1
            local tObject as integer
            local tLimb as integer
            local tEffect as integer
            local tMotionBlur as integer
            tObject=AL_ObjectArray(iObject)
            if tObject>-1
               if AL_Object(tObject).Dynamic=1
                  tEffect=AL_EffectArray(iEffect)
                  if tEffect>-1
                     if AL_Effect(tEffect).MotionBlur>-1
                        tMotionBlur=AL_Effect(tEffect).MotionBlur
                        for o=0 to AL_MotionBlur(tMotionBlur).AttachCount-1
                           if AL_MotionBlurAttach(AL_MotionBlur(tMotionBlur).MotionBlurAttachStart+o).Object=0 then tMotionBlurAttach=AL_MotionBlur(tMotionBlur).MotionBlurAttachStart+o
                        next o
                        if tMotionBlurAttach=-1
                           if AL_MotionBlur(tMotionBlur).AttachCount<50
                              tMotionBlurAttach=AL_MotionBlur(tMotionBlur).MotionBlurAttachStart+AL_MotionBlur(tMotionBlur).AttachCount
                              inc AL_MotionBlur(tMotionBlur).AttachCount
                           endif
                        endif
                        if tMotionBlurAttach>-1
                           AL_MotionBlurAttach(tMotionBlurAttach).Object=iObject
                           AL_MotionBlurAttach(tMotionBlurAttach).ObjectArray=tObject
                           AL_Object(tObject).MotionBlur=1
                           if iLimb>-1
                              AL_MotionBlurAttach(tMotionBlurAttach).Limb=iLimb
                              lock vertexdata for limb iObject,iLimb,1
                                 for v=0 to get vertexdata vertex count()-1
                                    set vertexdata uv v,1,tMotionBlurAttach-AL_MotionBlur(tMotionBlur).MotionBlurAttachStart,0
                                 next v
                              unlock vertexdata
                              set limb effect iObject,iLimb,iEffect
                           else
                              AL_MotionBlurAttach(tMotionBlurAttach).Limb=-1
                              tLimb=0
                              repeat
                                 lock vertexdata for limb iObject,tLimb,1
                                    for v=0 to get vertexdata vertex count()-1
                                       set vertexdata uv v,1,tMotionBlurAttach-AL_MotionBlur(tMotionBlur).MotionBlurAttachStart,0
                                    next v
                                 unlock vertexdata
                                 inc tLimb
                              until limb exist(iObject,tLimb)=0
                              set object effect iObject,iEffect
                           endif
                        endif
                     endif
                  endif
               endif
            endif
         endif
      endif
   endif
endfunction tMotionBlurAttach
`--------------
` Remove Motion Blur
`--------------
function Object_MotionBlurRemove(iObject as integer)
   if AL_Enabled=1
      local tObject as integer
      tObject=AL_ObjectArray(iObject)
      if tObject>-1
         AL_Object(tObject).MotionBlur=0
         for m=0 to AL_MotionBlurAttachCount
            if AL_MotionBlurAttach(m).Object=iObject
               AL_MotionBlurAttach(m).Object=0
               AL_MotionBlurAttach(m).ObjectArray=-1
               AL_MotionBlurAttach(m).Limb=-1
            endif
         next m
      endif
   endif
endfunction
`--------------
` Add Alpha Object
`--------------
function AlphaObject_Add(iObject as integer)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tObject as integer
         tObject=AL_AlphaObjectArray(iObject)
         if tObject=-1
            array insert at bottom AL_AlphaObject()
            inc AL_AlphaObjectCount
            AL_AlphaObject(AL_AlphaObjectCount).Number=iObject
            AlphaObject_Mask(iObject,1,0,0)
            set object transparency iObject,2
            texture object iObject,0,AL_Image(2)
         endif
      endif
   endif
endfunction AL_AlphaObjectCount
`--------------
` Remove Alpha Object
`--------------
function AlphaObject_Remove(iObject as integer)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tObject as integer
         tObject=AL_AlphaObjectArray(iObject)
         if tObject>-1
            array delete element AL_AlphaObject(),tObject
            dec AL_AlphaObjectCount
         endif
      endif
   endif
endfunction
`--------------
` Set Alpha Object Mask
`--------------
function AlphaObject_Mask(iObject as integer,iAlpha as boolean,iRefract as boolean,iDistortScatter as boolean)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tMask as integer
         local tObject as integer
         tMask=0
         tObject=AL_AlphaObjectArray(iObject)
         if iAlpha=1
            tMask=2^AL_Camera(9)
         endif
         if iRefract=1 and AL_RefractionEnabled=1
            tMask=tMask+(2^AL_Camera(7))
         endif
         if iDistortScatter=1 and (AL_DistortionEnabled=1 or AL_ScatteringEnabled=1)
            tMask=tMask+(2^AL_Camera(5))
         endif
         set object mask iObject,tMask
         if tObject>-1
            AL_AlphaObject(tObject).Mask=tMask
            AL_AlphaObject(tObject).MaskAlpha=iAlpha
            AL_AlphaObject(tObject).MaskRefract=iRefract
            AL_AlphaObject(tObject).MaskDistortScatter=iDistortScatter
         endif
      endif
   endif
endfunction
`--------------
` Alpha Object Additive Blending
`--------------
function AlphaObject_AdditiveBlending(iObject as integer,iAdditiveBlending as boolean)
   if AL_Enabled=1
      if object exist(iObject)=1
         local tObject as integer
         tObject=AL_AlphaObjectArray(iObject)
         if tObject>-1
            AL_AlphaObject(tObject).AdditiveBlending=iAdditiveBlending
            if iAdditiveBlending=1
               ghost object on iObject
            else
               ghost object off iObject
            endif
         endif
      endif
   endif
endfunction
`--------------
` Get Object Update
`--------------
function Object_UpdateObject(iObject as integer)
   local tLightNum as integer
   local tShadowMap as integer
   local tShadowMapSide as integer
   AL_Ldx(1)=object position x(AL_Object(iObject).Number)
   AL_Ldy(1)=object position y(AL_Object(iObject).Number)
   AL_Ldz(1)=object position z(AL_Object(iObject).Number)
   AL_Ldx(2)=AL_Object(iObject).OldPositionf.x
   AL_Ldy(2)=AL_Object(iObject).OldPositionf.y
   AL_Ldz(2)=AL_Object(iObject).OldPositionf.z
   AL_Object(iObject).Updated=1
   for d=1 to AL_SpotShadowMapCount
      if AL_SpotShadowMap(d).InUse=1
         tLightNum=AL_SpotShadowMap(d).Number
         move object AL_SpotLight(tLightNum).Object,AL_SpotLight(tLightNum).Range/2
         AL_Ldx(3)=object position x(AL_SpotLight(tLightNum).Object)
         AL_LdY(3)=object position y(AL_SpotLight(tLightNum).Object)
         AL_LdZ(3)=object position z(AL_SpotLight(tLightNum).Object)
         move object AL_SpotLight(tLightNum).Object,-AL_SpotLight(tLightNum).Range/2
         AL_Ldx(4)=AL_Object(iObject).BoundSize.x+AL_SpotLight(tLightNum).Range*1.5
         AL_Ldy(4)=AL_Object(iObject).BoundSize.y+AL_SpotLight(tLightNum).Range*1.5
         AL_Ldz(4)=AL_Object(iObject).BoundSize.z+AL_SpotLight(tLightNum).Range*1.5
         for c=1 to 2
            if AL_InDistance(AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),(AL_Object(iObject).Radius)+AL_SpotLight(tLightNum).Range)=1
               if AL_BoxCollision(AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_Ldx(4),AL_Ldy(4),AL_Ldz(4))=1
                  if AL_GetSphereInFrustum(d,AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Object(iObject).Radius)=1
                     if AL_GetBoxInFrustum(d,AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Object(iObject).BoundSize.X/2,AL_Object(iObject).BoundSize.Y/2,AL_Object(iObject).BoundSize.Z/2)
                        if AL_SpotShadowMap(d).Update=0
                           AL_SpotShadowMap(d).Update=2
                           if AL_Object(iObject).DynamicTimer=0 then AL_SpotShadowMap(d).LastUpdate=1
                        endif
                     endif
                  endif
               endif
            endif
         next c
      endif
   next d
   for d=1 to AL_PointShadowMapCount
       if AL_PointShadowMap(d).InUse=1
          tLightNum=AL_PointShadowMap(d).Number
          AL_Ldx(3)=AL_PointLight(tLightNum).Position.x
          AL_LdY(3)=AL_PointLight(tLightNum).Position.y
          AL_LdZ(3)=AL_PointLight(tLightNum).Position.z
          AL_Ldx(4)=AL_Object(iObject).BoundSize.X+(AL_PointLight(tLightNum).Range*2)
          AL_Ldy(4)=AL_Object(iObject).BoundSize.Y+(AL_PointLight(tLightNum).Range*2)
          AL_Ldz(4)=AL_Object(iObject).BoundSize.Z+(AL_PointLight(tLightNum).Range*2)
          for c=1 to 2
            if AL_InDistance(AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),(AL_Object(iObject).Radius)+AL_PointLight(tLightNum).Range)=1
               if AL_BoxCollision(AL_Ldx(c),AL_Ldy(c),AL_Ldz(c),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_Ldx(4),AL_Ldy(4),AL_Ldz(4))=1
                  AL_Ldx(5)=AL_Ldx(c)-AL_Ldx(3)
                  AL_LdY(5)=AL_Ldy(c)-AL_Ldy(3)
                  AL_LdZ(5)=AL_Ldz(c)-AL_Ldz(3)
                  tShadowMapSide=d*6
                  if AL_Ldx(c)+(AL_Object(iObject).BoundSize.X/2)>AL_Ldx(3)
                    if AL_Ldy(3)<AL_Ldy(c)+((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.X/2)+AL_Ldx(5))
                       if AL_Ldy(3)>AL_Ldy(c)-((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.X/2)+AL_Ldx(5))
                          if AL_Ldz(3)<AL_Ldz(c)+((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.X/2)+AL_Ldx(5))
                             if AL_Ldz(3)>AL_Ldz(c)-((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.X/2)+AL_Ldx(5))
                                if AL_PointShadowSide(tShadowMapSide+0).Update=0
                                  AL_PointShadowSide(tShadowMapSide+0).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+0).LastUpdate=1
                               endif
                             endif
                          endif
                       endif
                    endif
                  endif
                  if AL_Ldy(c)+(AL_Object(iObject).BoundSize.y/2)>AL_Ldy(3)
                     if AL_Ldx(3)<AL_Ldx(c)+((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Y/2)+AL_Ldy(5))
                        if AL_Ldx(3)>AL_Ldx(c)-((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Y/2)+AL_Ldy(5))
                           if AL_Ldz(3)<AL_Ldz(c)+((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.Y/2)+AL_Ldy(5))
                              if AL_Ldz(3)>AL_Ldz(c)-((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.Y/2)+AL_Ldy(5))
                                if AL_PointShadowSide(tShadowMapSide+1).Update=0
                                  AL_PointShadowSide(tShadowMapSide+1).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+1).LastUpdate=1
                                endif
                              endif
                           endif
                        endif
                     endif
                  endif
                  if AL_Ldz(c)+(AL_Object(iObject).BoundSize.z/2)>AL_Ldz(3)
                     if AL_Ldx(3)<AL_Ldx(c)+((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Z/2)+AL_Ldz(5))
                        if AL_Ldx(3)>AL_Ldx(c)-((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Z/2)+AL_Ldz(5))
                           if AL_Ldy(3)<AL_Ldy(c)+((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.Z/2)+AL_Ldz(5))
                              if AL_Ldy(3)>AL_Ldy(c)-((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.Z/2)+AL_Ldz(5))
                                if AL_PointShadowSide(tShadowMapSide+2).Update=0
                                  AL_PointShadowSide(tShadowMapSide+2).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+2).LastUpdate=1
                                endif
                              endif
                           endif
                        endif
                     endif
                  endif
                   if AL_Ldx(c)-(AL_Object(iObject).BoundSize.X/2)<AL_Ldx(3)
                     if AL_Ldy(3)<AL_Ldy(c)+((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.X/2)-AL_Ldx(5))
                        if AL_Ldy(3)>AL_Ldy(c)-((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.X/2)-AL_Ldx(5))
                           if AL_Ldz(3)<AL_Ldz(c)+((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.X/2)-AL_Ldx(5))
                              if AL_Ldz(3)>AL_Ldz(c)-((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.X/2)-AL_Ldx(5))
                                if AL_PointShadowSide(tShadowMapSide+3).Update=0
                                  AL_PointShadowSide(tShadowMapSide+3).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+3).LastUpdate=1
                                endif
                              endif
                           endif
                        endif
                     endif
                  endif
                  if AL_Ldy(c)-(AL_Object(iObject).BoundSize.y/2)<AL_Ldy(3)
                     if AL_Ldx(3)<AL_Ldx(c)+((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Y/2)-AL_Ldy(5))
                        if AL_Ldx(3)>AL_Ldx(c)-((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Y/2)-AL_Ldy(5))
                           if AL_Ldz(3)<AL_Ldz(c)+((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.Y/2)-AL_Ldy(5))
                              if AL_Ldz(3)>AL_Ldz(c)-((AL_Object(iObject).BoundSize.Z/2)+(AL_Object(iObject).BoundSize.Y/2)-AL_Ldy(5))
                                if AL_PointShadowSide(tShadowMapSide+4).Update=0
                                  AL_PointShadowSide(tShadowMapSide+4).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+4).LastUpdate=1
                                endif
                              endif
                           endif
                        endif
                     endif
                  endif
                  if AL_Ldz(c)-(AL_Object(iObject).BoundSize.z/2)<AL_Ldz(3)
                     if AL_Ldx(3)<AL_Ldx(c)+((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Z/2)-AL_Ldz(5))
                        if AL_Ldx(3)>AL_Ldx(c)-((AL_Object(iObject).BoundSize.X/2)+(AL_Object(iObject).BoundSize.Z/2)-AL_Ldz(5))
                           if AL_Ldy(3)<AL_Ldy(c)+((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.Z/2)-AL_Ldz(5))
                              if AL_Ldy(3)>AL_Ldy(c)-((AL_Object(iObject).BoundSize.Y/2)+(AL_Object(iObject).BoundSize.Z/2)-AL_Ldz(5))
                                if AL_PointShadowSide(tShadowMapSide+5).Update=0
                                  AL_PointShadowSide(tShadowMapSide+5).Update=2
                                  if AL_Object(iObject).DynamicTimer=0 then AL_PointShadowSide(tShadowMapSide+5).LastUpdate=1
                                endif
                              endif
                           endif
                        endif
                     endif
                  endif
                endif
             endif
          next c
       endif
   next d
   AL_Object(iObject).OldPositionf.x=object position x(AL_Object(iObject).Number)
   AL_Object(iObject).OldPositionf.y=object position y(AL_Object(iObject).Number)
   AL_Object(iObject).OldPositionf.z=object position z(AL_Object(iObject).Number)
endfunction
`--------------
` Get Object Auto Update
`--------------
function Object_AutoUpdateObject()
   if AL_Enabled=1
      local tLightNum as integer
      local tObjectNum as integer
      local tShadowMap as integer
      local tShadowMapSide as integer
      local tDifference as integer
      for o=0 to AL_ObjectAutoUpdateCount
         tObjectNum=AL_ObjectAutoUpdate(o)-1
         AL_Object(tObjectNum).Updated=0
         if AL_Object(tObjectNum).MaskShadow>0
            tDifference=0
            if AL_Object(tObjectNum).OldPosition.x<>int(object position x(AL_Object(tObjectNum).Number)/AL_WorldSize) then tDifference=1
            if AL_Object(tObjectNum).OldPosition.y<>int(object position y(AL_Object(tObjectNum).Number)/AL_WorldSize) then tDifference=1
            if AL_Object(tObjectNum).OldPosition.z<>int(object position z(AL_Object(tObjectNum).Number)/AL_WorldSize) then tDifference=1
            if AL_Object(tObjectNum).OldAngle.x<>int(object Angle x(AL_Object(tObjectNum).Number)) then tDifference=2
            if AL_Object(tObjectNum).OldAngle.y<>int(object Angle y(AL_Object(tObjectNum).Number)) then tDifference=2
            if AL_Object(tObjectNum).OldAngle.z<>int(object Angle z(AL_Object(tObjectNum).Number)) then tDifference=2
            if AL_Object(tObjectNum).OldScale.x<>int(object Size x(AL_Object(tObjectNum).Number,1)/AL_WorldSize) then tDifference=2
            if AL_Object(tObjectNum).OldScale.y<>int(object Size y(AL_Object(tObjectNum).Number,1)/AL_WorldSize) then tDifference=2
            if AL_Object(tObjectNum).OldScale.z<>int(object Size z(AL_Object(tObjectNum).Number,1)/AL_WorldSize) then tDifference=2
            if tDifference>0
               if tDifference=2
                  Object_GetBounds(AL_Object(tObjectNum).Number)
                  AL_Object(tObjectNum).BoundSize.x=AL_ObjectBounds(1)
                  AL_Object(tObjectNum).BoundSize.y=AL_ObjectBounds(2)
                  AL_Object(tObjectNum).BoundSize.z=AL_ObjectBounds(3)
                  AL_Object(tObjectNum).Radius=AL_ObjectBounds(4)
               endif
               AL_Object(tObjectNum).OldPosition.x=int(object position x(AL_Object(tObjectNum).Number)/AL_WorldSize)
               AL_Object(tObjectNum).OldPosition.y=int(object position y(AL_Object(tObjectNum).Number)/AL_WorldSize)
               AL_Object(tObjectNum).OldPosition.z=int(object position z(AL_Object(tObjectNum).Number)/AL_WorldSize)
               AL_Object(tObjectNum).OldAngle.x=int(object Angle x(AL_Object(tObjectNum).Number))
               AL_Object(tObjectNum).OldAngle.y=int(object Angle y(AL_Object(tObjectNum).Number))
               AL_Object(tObjectNum).OldAngle.z=int(object Angle z(AL_Object(tObjectNum).Number))
               AL_Object(tObjectNum).OldScale.x=int(object Size x(AL_Object(tObjectNum).Number,1)/AL_WorldSize)
               AL_Object(tObjectNum).OldScale.y=int(object Size y(AL_Object(tObjectNum).Number,1)/AL_WorldSize)
               AL_Object(tObjectNum).OldScale.z=int(object Size z(AL_Object(tObjectNum).Number,1)/AL_WorldSize)
               Object_UpdateObject(tObjectNum)
               AL_Object(tObjectNum).DynamicTimer=AL_ObjectDynamicTimer
            endif
         endif
         if AL_Object(tObjectNum).DynamicTimer>0
            dec AL_Object(tObjectNum).DynamicTimer
            if AL_Object(tObjectNum).DynamicTimer=0
               AL_Ldx(1)=object position x(AL_Object(tObjectNum).Number)
               AL_Ldy(1)=object position y(AL_Object(tObjectNum).Number)
               AL_Ldz(1)=object position z(AL_Object(tObjectNum).Number)
               for d=1 to AL_SpotShadowMapCount
                  if AL_SpotShadowMap(d).InUse=1
                     tLightNum=AL_SpotShadowMap(d).Number
                     move object AL_SpotLight(tLightNum).Object,AL_SpotLight(tLightNum).Range/2
                     AL_Ldx(3)=object position x(AL_SpotLight(tLightNum).Object)
                     AL_LdY(3)=object position y(AL_SpotLight(tLightNum).Object)
                     AL_LdZ(3)=object position z(AL_SpotLight(tLightNum).Object)
                     move object AL_SpotLight(tLightNum).Object,-AL_SpotLight(tLightNum).Range/2
                     AL_Ldx(4)=AL_Object(tObjectNum).BoundSize.X+AL_SpotLight(tLightNum).Range*1.5
                     AL_Ldy(4)=AL_Object(tObjectNum).BoundSize.Y+AL_SpotLight(tLightNum).Range*1.5
                     AL_Ldz(4)=AL_Object(tObjectNum).BoundSize.Z+AL_SpotLight(tLightNum).Range*1.5
                     if AL_InDistance(AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),(AL_Object(tObjectNum).Radius)+AL_SpotLight(tLightNum).Range)=1
                        if AL_BoxCollision(AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_Ldx(4),AL_Ldy(4),AL_Ldz(4))=1
                           if AL_GetSphereInFrustum(d,AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Object(tObjectNum).Radius)=1
                              if AL_GetBoxInFrustum(d,AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Object(tObjectNum).BoundSize.X/2,AL_Object(tObjectNum).BoundSize.Y/2,AL_Object(tObjectNum).BoundSize.Z/2)
                                 AL_SpotShadowMap(d).LastUpdate=1
                              endif
                           endif
                        endif
                     endif
                  endif
               next d
               for d=1 to AL_PointShadowMapCount
                  if AL_PointShadowMap(d).InUse=1
                     tLightNum=AL_PointShadowMap(d).Number
                     AL_Ldx(3)=AL_PointLight(tLightNum).Position.x
                     AL_LdY(3)=AL_PointLight(tLightNum).Position.y
                     AL_LdZ(3)=AL_PointLight(tLightNum).Position.z
                     AL_Ldx(4)=AL_Object(tObjectNum).BoundSize.x+(AL_PointLight(tLightNum).Range*2)
                     AL_Ldy(4)=AL_Object(tObjectNum).BoundSize.y+(AL_PointLight(tLightNum).Range*2)
                     AL_Ldz(4)=AL_Object(tObjectNum).BoundSize.z+(AL_PointLight(tLightNum).Range*2)
                     if AL_InDistance(AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),(AL_Object(tObjectNum).Radius)+AL_PointLight(tLightNum).Range)=1
                        if AL_BoxCollision(AL_Ldx(1),AL_Ldy(1),AL_Ldz(1),AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_Ldx(4),AL_Ldy(4),AL_Ldz(4))=1
                            AL_Ldx(5)=AL_Ldx(1)-AL_Ldx(3)
                            AL_LdY(5)=AL_Ldy(1)-AL_Ldy(3)
                            AL_LdZ(5)=AL_Ldz(1)-AL_Ldz(3)
                            tShadowMapSide=d*6
                            if AL_Ldx(1)+(AL_Object(tObjectNum).BoundSize.X/2)>AL_Ldx(3)
                              if AL_Ldy(3)<AL_Ldy(1)+((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.X/2)+AL_Ldx(5))
                                 if AL_Ldy(3)>AL_Ldy(1)-((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.X/2)+AL_Ldx(5))
                                    if AL_Ldz(3)<AL_Ldz(1)+((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.X/2)+AL_Ldx(5))
                                       if AL_Ldz(3)>AL_Ldz(1)-((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.X/2)+AL_Ldx(5))
                                          AL_PointShadowSide(tShadowMapSide+0).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                           if AL_Ldy(1)+(AL_Object(tObjectNum).BoundSize.y/2)>AL_Ldy(3)
                              if AL_Ldx(3)<AL_Ldx(1)+((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Y/2)+AL_Ldy(5))
                                 if AL_Ldx(3)>AL_Ldx(1)-((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Y/2)+AL_Ldy(5))
                                    if AL_Ldz(3)<AL_Ldz(1)+((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.Y/2)+AL_Ldy(5))
                                       if AL_Ldz(3)>AL_Ldz(1)-((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.Y/2)+AL_Ldy(5))
                                          AL_PointShadowSide(tShadowMapSide+1).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                           if AL_Ldz(1)+(AL_Object(tObjectNum).BoundSize.z/2)>AL_Ldz(3)
                              if AL_Ldx(3)<AL_Ldx(1)+((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Z/2)+AL_Ldz(5))
                                 if AL_Ldx(3)>AL_Ldx(1)-((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Z/2)+AL_Ldz(5))
                                    if AL_Ldy(3)<AL_Ldy(1)+((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.Z/2)+AL_Ldz(5))
                                       if AL_Ldy(3)>AL_Ldy(1)-((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.Z/2)+AL_Ldz(5))
                                          AL_PointShadowSide(tShadowMapSide+2).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                            if AL_Ldx(1)-(AL_Object(tObjectNum).BoundSize.X/2)<AL_Ldx(3)
                              if AL_Ldy(3)<AL_Ldy(1)+((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.X/2)-AL_Ldx(5))
                                 if AL_Ldy(3)>AL_Ldy(1)-((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.X/2)-AL_Ldx(5))
                                    if AL_Ldz(3)<AL_Ldz(1)+((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.X/2)-AL_Ldx(5))
                                       if AL_Ldz(3)>AL_Ldz(1)-((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.X/2)-AL_Ldx(5))
                                          AL_PointShadowSide(tShadowMapSide+3).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                           if AL_Ldy(1)-(AL_Object(tObjectNum).BoundSize.y/2)<AL_Ldy(3)
                              if AL_Ldx(3)<AL_Ldx(1)+((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Y/2)-AL_Ldy(5))
                                 if AL_Ldx(3)>AL_Ldx(1)-((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Y/2)-AL_Ldy(5))
                                    if AL_Ldz(3)<AL_Ldz(1)+((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.Y/2)-AL_Ldy(5))
                                       if AL_Ldz(3)>AL_Ldz(1)-((AL_Object(tObjectNum).BoundSize.Z/2)+(AL_Object(tObjectNum).BoundSize.Y/2)-AL_Ldy(5))
                                          AL_PointShadowSide(tShadowMapSide+4).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                           if AL_Ldz(1)-(AL_Object(tObjectNum).BoundSize.z/2)<AL_Ldz(3)
                              if AL_Ldx(3)<AL_Ldx(1)+((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Z/2)-AL_Ldz(5))
                                 if AL_Ldx(3)>AL_Ldx(1)-((AL_Object(tObjectNum).BoundSize.X/2)+(AL_Object(tObjectNum).BoundSize.Z/2)-AL_Ldz(5))
                                    if AL_Ldy(3)<AL_Ldy(1)+((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.Z/2)-AL_Ldz(5))
                                       if AL_Ldy(3)>AL_Ldy(1)-((AL_Object(tObjectNum).BoundSize.Y/2)+(AL_Object(tObjectNum).BoundSize.Z/2)-AL_Ldz(5))
                                          AL_PointShadowSide(tShadowMapSide+5).LastUpdate=1
                                       endif
                                    endif
                                 endif
                              endif
                           endif
                        endif
                     endif
                  endif
               next d
            endif
         endif
      next o
   endif
endfunction
`--------------
` Get Object Boxed Rotation Size
`--------------
function Object_GetBounds(iObject as integer)
   if AL_Enabled=1
      if object exist(iObject)=1
         AL_ObjectBounds(1)=0
         AL_ObjectBounds(2)=0
         AL_ObjectBounds(3)=0
         local tSizeX as float
         local tSizeY as float
         local tSizeZ as float
         tSizeX=object size x(iObject,1)
         tSizeY=object size y(iObject,1)
         tSizeZ=object size z(iObject,1)
         rotate x matrix4 AL_Matrix(1),wrapvalue(object angle x(iObject))*0.0174532778
         rotate y matrix4 AL_Matrix(2),wrapvalue(object angle y(iObject))*0.0174532778
         rotate z matrix4 AL_Matrix(3),wrapvalue(object angle z(iObject))*0.0174532778
         multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
         multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
         set vector3 AL_Vector3(1),tSizeX,tSizeY,tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),tSizeX,-tSizeY,tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),-tSizeX,tSizeY,tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),-tSizeX,-tSizeY,tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),tSizeX,tSizeY,-tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),tSizeX,-tSizeY,-tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),-tSizeX,tSizeY,-tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         set vector3 AL_Vector3(1),-tSizeX,-tSizeY,-tSizeZ
         transform coords vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
         if abs(x vector3(AL_Vector3(2)))>AL_ObjectBounds(1) then AL_ObjectBounds(1)=abs(x vector3(AL_Vector3(2)))
         if abs(y vector3(AL_Vector3(2)))>AL_ObjectBounds(2) then AL_ObjectBounds(2)=abs(y vector3(AL_Vector3(2)))
         if abs(z vector3(AL_Vector3(2)))>AL_ObjectBounds(3) then AL_ObjectBounds(3)=abs(z vector3(AL_Vector3(2)))
         AL_ObjectBounds(1)=AL_ObjectBounds(1)+(AL_WorldSize*5)
         AL_ObjectBounds(2)=AL_ObjectBounds(2)+(AL_WorldSize*5)
         AL_ObjectBounds(3)=AL_ObjectBounds(3)+(AL_WorldSize*5)
         AL_ObjectBounds(4)=AL_ObjectBounds(1)
         if AL_ObjectBounds(2)>AL_ObjectBounds(4) then AL_ObjectBounds(4)=AL_ObjectBounds(2)
         if AL_ObjectBounds(3)>AL_ObjectBounds(4) then AL_ObjectBounds(4)=AL_ObjectBounds(3)
      endif
   endif
endfunction
`--------------
` Get Object Array
`--------------
function AL_ObjectArray(iObject as integer)
   if AL_Enabled=1
      for o=0 to AL_ObjectCount
         if AL_Object(o).Number=iObject then exitfunction o
      next o
   endif
endfunction -1
`--------------
` Get Alpha Rendering Object Array
`--------------
function AL_AlphaObjectArray(iObject as integer)
   if AL_Enabled=1
      for o=0 to AL_AlphaObjectCount
         if AL_AlphaObject(o).Number=iObject then exitfunction o
      next o
   endif
endfunction -1
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
type AL_LightData
   InUse as boolean
   CullMode as boolean
   Visible as boolean
   Distance as float
   Object as integer
   Effect as integer
   ShadowMap as integer
   ShadowSize as float
   Texture as integer
   Shadowed as boolean
   ShadowQuality as integer
   Position as AL_Vec3Float
   Angle as AL_Vec3Float
   Normal as AL_Vec3Float
   Color as AL_Vec3Float
   Roll as float
   FOV as float
   Range as float
   Attenuation as float
   ShadowRange as float
   LensFlare as integer
endtype
`#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Spot.dba"
`#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Point.dba"
`#include "modules/Advanced Lighting/Include/Advanced Lighting/AL_Directional.dba"
`--------------
` Ambient
`--------------
function AdvLighting_SetAmbient(iRed as float,iGreen as float,iBlue as float)
   if AL_Enabled=1
      if AL_Ambient(1)<>iRed or AL_Ambient(2)<>iGreen or AL_Ambient(3)<>iBlue
         AL_Ambient(1)=iRed
         AL_Ambient(2)=iGreen
         AL_Ambient(3)=iBlue
         AL_Ambient(5)=1+(((255-AL_Ambient(1))/255)*AL_AmbientAdjust)
         AL_Ambient(6)=1+(((255-AL_Ambient(2))/255)*AL_AmbientAdjust)
         AL_Ambient(7)=1+(((255-AL_Ambient(3))/255)*AL_AmbientAdjust)
         if AL_Ambient(5)>1 then AL_Ambient(5)=1
         if AL_Ambient(6)>1 then AL_Ambient(6)=1
         if AL_Ambient(7)>1 then AL_Ambient(7)=1
         set vector4 AL_Vector4(1),AL_Ambient(1)/255,AL_Ambient(2)/255,AL_Ambient(3)/255,0
         set effect constant vector AL_AmbientEffect,"AmbientColor",AL_Vector4(1)
         if AL_DirLightInUse=1 then set effect constant vector AL_DirLightEffect,"AmbientColor",AL_Vector4(1)
         for e=0 to AL_EffectCount:set effect constant vector AL_Effect(e).Number,"AmbientColor",AL_Vector4(1):next e
         for e=0 to AL_AlphaEffectLightingCount:set effect constant vector AL_AlphaEffect(AL_AlphaEffectLighting(e)-1).Number,"AmbientColor",AL_Vector4(1):next e
         if AL_DirLightInUse=1
            set vector4 AL_Vector4(1),(AL_DirLightColor.X/255)*AL_Ambient(5),(AL_DirLightColor.Y/255)*AL_Ambient(6),(AL_DirLightColor.Z/255)*AL_Ambient(7),0
            set effect constant vector AL_DirLightEffect,"LightColor",AL_Vector4(1)
         endif
         for l=0 to AL_PointLightCount
            if AL_PointLight(l).InUse=1
               set vector4 AL_Vector4(1),(AL_PointLight(l).Color.X/255)*AL_Ambient(5),(AL_PointLight(l).Color.Y/255)*AL_Ambient(6),(AL_PointLight(l).Color.Z/255)*AL_Ambient(7),0
               set effect constant vector AL_PointLight(l).Effect,"LightColor",AL_Vector4(1)
            endif
         next l
         for l=0 to AL_SpotLightCount
            if AL_SpotLight(l).InUse=1
               set vector4 AL_Vector4(1),(AL_SpotLight(l).Color.X/255)*AL_Ambient(5),(AL_SpotLight(l).Color.Y/255)*AL_Ambient(6),(AL_SpotLight(l).Color.Z/255)*AL_Ambient(7),0
               set effect constant vector AL_SpotLight(l).Effect,"LightColor",AL_Vector4(1)
            endif
         next l
      endif
   endif
endfunction
`--------------
` Ambient Texture
`--------------
function AdvLighting_SetAmbientTexture(iTexture as integer)
   if AL_Enabled=1
      if iTexture>0
         if image exist(iTexture)=1
            AL_Ambient(4)=iTexture
            texture object AL_AmbientObject,2,iTexture
            set effect technique AL_AmbientEffect,"AmbientCube"
            if AL_DirLightInUse=1
               texture object AL_DirLightObject,2,iTexture
               if AL_DirLightshadowQuality=0 then set effect technique AL_DirLightEffect,"AmbientCubeDirectional"
               if AL_DirLightshadowQuality>0 then set effect technique AL_DirLightEffect,"AmbientCubeDirectionalShadow"
            endif
         endif
      else
         AL_Ambient(4)=0
         set effect technique AL_AmbientEffect,"Ambient"
         if AL_DirLightInUse=1
            if AL_DirLightshadowQuality=0 then set effect technique AL_DirLightEffect,"AmbientDirectional"
            if AL_DirLightshadowQuality>0 then set effect technique AL_DirLightEffect,"AmbientDirectionalShadow"
         endif
      endif
   endif
endfunction
`--------------
` Fog
`--------------
function AdvLighting_SetFog(iRange as float,iPower as float,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_Enabled=1
      if AL_Fog(1)<>iRange or AL_Fog(2)<>iPower or AL_Fog(3)<>iRed1 or AL_Fog(4)<>iGreen1 or AL_Fog(5)<>iBlue1 or AL_Fog(6)<>iRed2 or AL_Fog(7)<>iGreen2 or AL_Fog(8)<>iBlue2
         AL_Fog(1)=iRange
         AL_Fog(2)=iPower
         AL_Fog(3)=iRed1
         AL_Fog(4)=iGreen1
         AL_Fog(5)=iBlue1
         AL_Fog(6)=iRed2
         AL_Fog(7)=iGreen2
         AL_Fog(8)=iBlue2
         set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
         set vector4 AL_Vector4(2),AL_Fog(3)/255,AL_Fog(4)/255,AL_Fog(5)/255,0
         set vector4 AL_Vector4(3),AL_Fog(6)/255,AL_Fog(7)/255,AL_Fog(8)/255,0
         set effect constant vector AL_AmbientEffect,"FogRange",AL_Vector4(1)
         set effect constant vector AL_AmbientEffect,"FogColor1",AL_Vector4(2)
         set effect constant vector AL_AmbientEffect,"FogColor2",AL_Vector4(3)
         if AL_DirLightInUse=1
            set effect constant vector AL_DirLightEffect,"FogRange",AL_Vector4(1)
            set effect constant vector AL_DirLightEffect,"FogColor1",AL_Vector4(2)
            set effect constant vector AL_DirLightEffect,"FogColor2",AL_Vector4(3)
         endif
         for l=0 to AL_SpotLightCount
            if AL_SpotLight(l).InUse=1 then set effect constant vector AL_SpotLight(l).Effect,"FogRange",AL_Vector4(1)
         next l
         for l=0 to AL_PointLightCount
            if AL_PointLight(l).InUse=1 then set effect constant vector AL_PointLight(l).Effect,"FogRange",AL_Vector4(1)
         next l
         for e=0 to AL_EffectCount
            set effect constant vector AL_Effect(e).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_Effect(e).Number,"FogColor1",AL_Vector4(2)
            set effect constant vector AL_Effect(e).Number,"FogColor2",AL_Vector4(3)
         next e
         for e=0 to AL_AlphaEffectCount
            set effect constant vector AL_AlphaEffect(e).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(e).Number,"FogColor1",AL_Vector4(2)
            set effect constant vector AL_AlphaEffect(e).Number,"FogColor2",AL_Vector4(3)
         next e
         if AL_FogAreaEnabled=1
            for f=0 to AL_FogAreaCount
               set effect constant vector AL_FogArea(f).Effect,"FogRange",AL_Vector4(1)
            next f
         endif
         if AL_SkyEnabled=1
            set effect constant vector AL_SkyEffect(1),"FogRange",AL_Vector4(1)
            set effect constant vector AL_SkyEffect(1),"FogColor1",AL_Vector4(2)
            set effect constant vector AL_SkyEffect(1),"FogColor2",AL_Vector4(3)
         endif
         if AL_CloudsEnable=1 then set effect constant vector AL_CloudsEffect(2),"FogColor",AL_Vector4(2)
      endif
   endif
endfunction
`--------------
` Height Fog
`--------------
function AdvLighting_SetHeightFog(iHeight as float,iFade as float,iExponential as float,iRange as float,iPower as float,iRed as float,iGreen as float,iBlue as float,iAlpha as float)
   if AL_Enabled=1
      if AL_Fog(9)<>iHeight or AL_Fog(10)<>iFade or AL_Fog(11)<>iExponential or AL_Fog(12)<>iRange or AL_Fog(13)<>iPower or AL_Fog(14)<>iRed or AL_Fog(15)<>iGreen or AL_Fog(16)<>iBlue or AL_Fog(17)<>iAlpha
         AL_Fog(9)=iHeight
         AL_Fog(10)=iFade
         AL_Fog(11)=iExponential
         AL_Fog(12)=iRange
         AL_Fog(13)=iPower
         AL_Fog(14)=iRed
         AL_Fog(15)=iGreen
         AL_Fog(16)=iBlue
         AL_Fog(17)=iAlpha
         set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
         set vector4 AL_Vector4(2),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
         set vector4 AL_Vector4(3),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
         set effect constant vector AL_AmbientEffect,"FogRange",AL_Vector4(1)
         set effect constant vector AL_AmbientEffect,"HeightFog",AL_Vector4(2)
         set effect constant vector AL_AmbientEffect,"HeightFogColor",AL_Vector4(3)
         if AL_DirLightInUse=1
            set effect constant vector AL_DirLightEffect,"FogRange",AL_Vector4(1)
            set effect constant vector AL_DirLightEffect,"HeightFog",AL_Vector4(2)
            set effect constant vector AL_DirLightEffect,"HeightFogColor",AL_Vector4(3)
         endif
         for l=0 to AL_SpotLightCount
            if AL_SpotLight(l).InUse=1
               set effect constant vector AL_SpotLight(l).Effect,"FogRange",AL_Vector4(1)
               set effect constant vector AL_SpotLight(l).Effect,"HeightFog",AL_Vector4(2)
               set effect constant vector AL_SpotLight(l).Effect,"HeightFogColor",AL_Vector4(3)
            endif
         next l
         for l=0 to AL_PointLightCount
            if AL_PointLight(l).InUse=1
               set effect constant vector AL_PointLight(l).Effect,"FogRange",AL_Vector4(1)
               set effect constant vector AL_PointLight(l).Effect,"HeightFog",AL_Vector4(2)
               set effect constant vector AL_PointLight(l).Effect,"HeightFogColor",AL_Vector4(3)
            endif
         next l
         for e=0 to AL_EffectCount
            set effect constant vector AL_Effect(e).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_Effect(e).Number,"HeightFog",AL_Vector4(2)
            set effect constant vector AL_Effect(e).Number,"HeightFogColor",AL_Vector4(3)
         next e
         for e=0 to AL_AlphaEffectCount
            set effect constant vector AL_AlphaEffect(e).Number,"FogRange",AL_Vector4(1)
            set effect constant vector AL_AlphaEffect(e).Number,"HeightFog",AL_Vector4(2)
            set effect constant vector AL_AlphaEffect(e).Number,"HeightFogColor",AL_Vector4(3)
         next e
      endif
   endif
endfunction
type AL_LensFlareData
   InUse as boolean
   Visible as boolean
   UpDate as boolean
   SubFlareCount as integer
   SubFlareStart as integer
   Position as AL_Vec3Float
   Color as AL_Vec3Float
endtype
type AL_SubFlareData
   AlphaTosurface as float
   Atlas as AL_Vec2Float
   Offset as AL_Vec3Float
   Falloff as AL_Vec3Float
   Scale as AL_Vec3Float
   Color as AL_Vec3Float
endtype
type AL_FlareObjectData
   Object as integer
   Effect as integer
   Update as boolean
   ObjectUpdate as boolean
endtype
`--------------
` Make Lens Flare
`--------------
function LensFlare_Create(iSubFlareCount as integer)
   local tLensFlare as integer
   if AL_LensFlareEnabled=0
      global AL_LensFlareEnabled as boolean
      global AL_LensFlareUpdate as boolean
      global AL_LensFlareCount as integer
      global AL_LensFlareObjectUpdate as boolean
      global AL_LensFlareImage as integer
      global AL_LensFlareMesh as integer
      global AL_SubFlareCount as integer
      global AL_SubFlareArrayCount as integer
      AL_LensFlareEnabled=1
      AL_LensFlareCount=-1
      AL_SubFlareCount=-1
      AL_SubFlareArrayCount=-1
      AL_FlareObjectCount(1)=-1
      AL_FlareObjectCount(0)=100
      AL_LensFlareMesh=find free mesh()
      load mesh AL_Directory+"Resources/Flare.dbm",AL_LensFlareMesh
      AL_LensFlareImage=find free image()
      load Image AL_Directory+"Resources/Lens Flare.dds",AL_LensFlareImage
   endif
   tLensFlare=-1
   for f=0 to AL_LensFlareCount
      if AL_LensFlare(f).InUse=0 then tLensFlare=f
   next f
   if tLensFlare=-1
      array insert at bottom AL_LensFlare()
      inc AL_LensFlareCount
      tLensFlare=AL_LensFlareCount
      inc AL_FlareObjectCount(0)
      if AL_FlareObjectCount(0)>99
         AL_FlareObjectCount(0)=0
         array insert at bottom AL_FlareObject()
         inc AL_FlareObjectCount(1)
         AL_FlareObject(AL_FlareObjectCount(1)).Effect=find free effect()
         load effect AL_Directory+"Alpha/Particles/Lens Flare.fx",AL_FlareObject(AL_FlareObjectCount(1)).Effect,0,1
         AlphaEffect_Add(AL_FlareObject(AL_FlareObjectCount(1)).Effect)
         AL_FlareObject(AL_FlareObjectCount(1)).Object=find free object()
         make object AL_FlareObject(AL_FlareObjectCount(1)).Object,AL_LensFlareMesh,0
         set object effect AL_FlareObject(AL_FlareObjectCount(1)).Object,AL_FlareObject(AL_FlareObjectCount(1)).Effect
      endif
   endif
   AL_LensFlare(tLensFlare).InUse=1
   AL_LensFlare(tLensFlare).Visible=1
   AL_LensFlare(tLensFlare).UpDate=1
   AL_LensFlare(tLensFlare).Position.x=0
   AL_LensFlare(tLensFlare).Position.y=0
   AL_LensFlare(tLensFlare).Position.z=0
   AL_LensFlare(tLensFlare).Color.x=255
   AL_LensFlare(tLensFlare).Color.y=255
   AL_LensFlare(tLensFlare).Color.z=255
   AL_LensFlare(tLensFlare).SubFlareCount=iSubFlareCount
   AL_LensFlare(tLensFlare).SubFlareStart=AL_SubFlareCount+1
   for f=0 to iSubFlareCount
      inc AL_SubFlareCount
      if AL_SubFlareCount>AL_SubFlareArrayCount
         array insert at bottom AL_SubFlare()
         inc AL_SubFlareArrayCount
      endif
      AL_SubFlare(AL_SubFlareCount).AlphaTosurface=0
      AL_SubFlare(AL_SubFlareCount).Atlas.x=0
      AL_SubFlare(AL_SubFlareCount).Atlas.y=0
      AL_SubFlare(AL_SubFlareCount).Offset.x=0
      AL_SubFlare(AL_SubFlareCount).Offset.y=1000
      AL_SubFlare(AL_SubFlareCount).Offset.z=0.5
      AL_SubFlare(AL_SubFlareCount).Falloff.x=0
      AL_SubFlare(AL_SubFlareCount).Falloff.y=0
      AL_SubFlare(AL_SubFlareCount).Falloff.z=0
      AL_SubFlare(AL_SubFlareCount).Scale.x=0.2
      AL_SubFlare(AL_SubFlareCount).Scale.y=0.2
      AL_SubFlare(AL_SubFlareCount).Scale.z=0.5
      AL_SubFlare(AL_SubFlareCount).Color.x=1
      AL_SubFlare(AL_SubFlareCount).Color.y=1
      AL_SubFlare(AL_SubFlareCount).Color.z=1
   next f
   AL_LensFlareUpdate=1
   AL_LensFlareObjectUpdate=1
   AL_FlareObject(tLensFlare/100).Update=1
   AL_FlareObject(tLensFlare/100).ObjectUpdate=1
endfunction tLensFlare
`--------------
` Lens Flare Update
`--------------
function LensFlare_Update()
   if AL_LensFlareEnabled=1
      tVertex as integer
      tSubFlare as integer
      tMesh as boolean
      tEndVal as integer
      if AL_LensFlareObjectUpdate=1
         for o=0 to AL_FlareObjectCount(1)
            if AL_FlareObject(o).ObjectUpdate=1
               tVertex=0
               tMesh=0
               delete object AL_FlareObject(o).Object
               make object AL_FlareObject(o).Object,AL_LensFlareMesh,0
               lock vertexdata for limb AL_FlareObject(o).Object,0,2
               tEndVal=(o*100)+99
               if o=AL_FlareObjectCount(1) then tEndVal=AL_LensFlareCount
               for f=o*100 to tEndVal
                  if AL_LensFlare(f).InUse=1
                     tSubFlare=AL_LensFlare(f).SubFlareStart
                     for s=0 to AL_LensFlare(f).SubFlareCount
                        if tMesh=1 then add mesh to vertexdata AL_LensFlareMesh
                        tMesh=1
                        for v=0 to 3
                           set vertexdata position tVertex,AL_SubFlare(tSubFlare).Scale.x,AL_SubFlare(tSubFlare).Scale.y,AL_SubFlare(tSubFlare).Scale.z
                           set vertexdata normals tVertex,AL_SubFlare(tSubFlare).Color.x,AL_SubFlare(tSubFlare).Color.y,AL_SubFlare(tSubFlare).Color.z
                           set vertexdata uv tVertex,1,f-(o*100),AL_SubFlare(tSubFlare).Offset.z
                           set vertexdata uv tVertex,2,AL_SubFlare(tSubFlare).Offset.x,AL_SubFlare(tSubFlare).Offset.y
                           set vertexdata uv tVertex,3,AL_SubFlare(tSubFlare).Falloff.x,AL_SubFlare(tSubFlare).AlphaTosurface
                           set vertexdata uv tVertex,4,AL_SubFlare(tSubFlare).Falloff.y,AL_SubFlare(tSubFlare).Falloff.z
                           set vertexdata uv tVertex,5,AL_SubFlare(tSubFlare).Atlas.x,AL_SubFlare(tSubFlare).Atlas.y
                           inc tVertex
                        next v
                        inc tSubFlare
                     next s
                  endif
               next f
               unlock vertexdata
               set object effect AL_FlareObject(o).Object,AL_FlareObject(o).Effect
               texture object AL_FlareObject(o).Object,0,AL_Image(2)
               texture object AL_FlareObject(o).Object,1,AL_Image(5)
               texture object AL_FlareObject(o).Object,2,AL_LensFlareImage
               set object mask AL_FlareObject(o).Object,(2^AL_Camera(5))+(2^AL_Camera(9))
               AL_FlareObject(o).ObjectUpdate=0
            endif
         next o
         AL_LensFlareObjectUpdate=0
      endif
      if AL_LensFlareUpdate=1
         for o=0 to AL_FlareObjectCount(1)
            if AL_FlareObject(o).Update=1
               null=get object effect(AL_FlareObject(o).Object,0)
               tEndVal=(o*100)+99
               if o=AL_FlareObjectCount(1) then tEndVal=AL_LensFlareCount
               for f=o*100 to tEndVal
                  if AL_LensFlare(f).UpDate=1
                     if AL_LensFlare(f).Visible=1
                        set vector4 AL_Vector4(1),AL_LensFlare(f).Position.x,AL_LensFlare(f).Position.y,AL_LensFlare(f).Position.z,0
                        set effect constant vector element "LensFlarePosition",f-(o*100),AL_Vector4(1)
                        set vector4 AL_Vector4(1),AL_LensFlare(f).Color.x/255,AL_LensFlare(f).Color.y/255,AL_LensFlare(f).Color.z/255,0
                        set effect constant vector element "LensFlareColor",f-(o*100),AL_Vector4(1)
                     else
                        set vector4 AL_Vector4(1),0,-9999999999,0,0
                        set effect constant vector element "LensFlarePosition",f-(o*100),AL_Vector4(1)
                     endif
                     AL_LensFlare(f).UpDate=0
                  endif
               next f
               release effect pointer
               AL_FlareObject(o).Update=0
            endif
         next o
         AL_LensFlareUpdate=0
      endif
      for o=0 to AL_FlareObjectCount(1)
         position object AL_FlareObject(o).Object,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         rotate object AL_FlareObject(o).Object,AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      next o
   endif
endfunction
`--------------
` Delete Lens Flare
`--------------
function LensFlare_Delete(iLensFlare as integer)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         AL_LensFlare(iLensFlare).InUse=0
         for f=AL_LensFlare(iLensFlare).SubFlareStart to AL_SubFlareCount-AL_LensFlare(iLensFlare).SubFlareCount
            AL_SubFlare(f)=AL_SubFlare(f+AL_LensFlare(iLensFlare).SubFlareCount)
         next f
         for f=0 to AL_LensFlareCount
            if AL_LensFlare(f).InUse=1
               if AL_LensFlare(f).SubFlareStart>AL_LensFlare(iLensFlare).SubFlareStart
                  AL_LensFlare(f).SubFlareStart=AL_LensFlare(f).SubFlareStart-AL_LensFlare(iLensFlare).SubFlareCount
               endif
            endif
         next f
         dec AL_SubFlareCount,AL_LensFlare(iLensFlare).SubFlareCount
         AL_LensFlareObjectUpdate=1
         AL_FlareObject(iLensFlare/100).ObjectUpdate=1
      endif
   endif
endfunction
`--------------
` Set Lens Flare Visible
`--------------
function LensFlare_SetVisible(iLensFlare as integer,iVisible as integer)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if AL_LensFlare(iLensFlare).Visible<>iVisible
            AL_LensFlare(iLensFlare).Visible=iVisible
            AL_LensFlare(iLensFlare).UpDate=1
            AL_FlareObject(iLensFlare/100).Update=1
            AL_LensFlareUpdate=1
         endif
      endif
   endif
endfunction
`--------------
` Set Lens Flare Position
`--------------
function LensFlare_SetPosition(iLensFlare as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         AL_LensFlare(iLensFlare).Position.x=iPosX
         AL_LensFlare(iLensFlare).Position.y=iPosY
         AL_LensFlare(iLensFlare).Position.z=iPosZ
         AL_LensFlare(iLensFlare).UpDate=1
         AL_FlareObject(iLensFlare/100).Update=1
         AL_LensFlareUpdate=1
      endif
   endif
endfunction
`--------------
` Set Lens Flare Color
`--------------
function LensFlare_SetColor(iLensFlare as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         AL_LensFlare(iLensFlare).Color.x=iRed
         AL_LensFlare(iLensFlare).Color.y=iGreen
         AL_LensFlare(iLensFlare).Color.z=iBlue
         AL_LensFlare(iLensFlare).UpDate=1
         AL_FlareObject(iLensFlare/100).Update=1
         AL_LensFlareUpdate=1
      endif
   endif
endfunction
`--------------
` Set Lens Flare To Directional Light
`--------------
function LensFlare_SetToDirLight(iLensFlare as integer)
   if AL_LensFlareEnabled=1
      if AL_DirLightInUse=1
         if iLensFlare>-1
            if AL_LensFlare(iLensFlare).InUse=1
               AL_DirLightLensFlare.x=iLensFlare
               AL_DirLightLensFlare.y=int(iLensFlare/100)
               AL_DirLightLensFlare.z=iLensFlare-(AL_DirLightLensFlare.y*100)
               LensFlare_SetColor(iLensFlare,AL_DirLightColor.x,AL_DirLightColor.y,AL_DirLightColor.z)
            endif
         else
            AL_DirLightLensFlare.x=-1
         endif
      endif
   endif
endfunction
`--------------
` Set Lens Flare To Spot Light
`--------------
function LensFlare_SetToSpotLight(iLensFlare as integer,iLight as integer)
   if AL_LensFlareEnabled=1
      if AL_SpotLight(iLight).InUse=1
         if iLensFlare>-1
            if AL_LensFlare(iLensFlare).InUse=1
               AL_SpotLight(iLight).LensFlare=iLensFlare
               LensFlare_SetPosition(iLensFlare,AL_SpotLight(iLight).Position.x,AL_SpotLight(iLight).Position.y,AL_SpotLight(iLight).Position.z)
               LensFlare_SetColor(iLensFlare,AL_SpotLight(iLight).Color.x,AL_SpotLight(iLight).Color.y,AL_SpotLight(iLight).Color.z)
            endif
         else
            AL_SpotLight(iLight).LensFlare=-1
         endif
      endif
   endif
endfunction
`--------------
` Set Lens Flare To Point Light
`--------------
function LensFlare_SetToPointLight(iLensFlare as integer,iLight as integer)
   if AL_LensFlareEnabled=1
      if AL_PointLight(iLight).InUse=1
         if iLensFlare>-1
            if AL_LensFlare(iLensFlare).InUse=1
               AL_PointLight(iLight).LensFlare=iLensFlare
               LensFlare_SetPosition(iLensFlare,AL_PointLight(iLight).Position.x,AL_PointLight(iLight).Position.y,AL_PointLight(iLight).Position.z)
               LensFlare_SetColor(iLensFlare,AL_PointLight(iLight).Color.x,AL_PointLight(iLight).Color.y,AL_PointLight(iLight).Color.z)
            endif
         else
            AL_PointLight(iLight).LensFlare=-1
         endif
      endif
   endif
endfunction
`--------------
` Set Sub Flare Atlas
`--------------
function LensFlare_SetSubFlareAtlas(iLensFlare as integer,iSubFlare as integer,iAtlas as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if iSubFlare<AL_LensFlare(iLensFlare).SubFlareCount+1
            tSubFlare as integer
            tAtlasX as float
            tAtlasy as float
            iAtlas=iAtlas-1
            tAtlasX=iAtlas-(int(iAtlas/4)*4)
            tAtlasy=int(iAtlas/4)
            tSubFlare=AL_LensFlare(iLensFlare).SubFlareStart+iSubFlare
            AL_SubFlare(tSubFlare).Atlas.x=tAtlasX/4
            AL_SubFlare(tSubFlare).Atlas.y=tAtlasY/4
            AL_LensFlareObjectUpdate=1
            AL_FlareObject(iLensFlare/100).ObjectUpdate=1
         endif
      endif
   endif
endfunction
`--------------
` Set Sub Flare Scale
`--------------
function LensFlare_SetSubFlareScale(iLensFlare as integer,iSubFlare as integer,iScaleX as float,iScaleY as float,iViewScale as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if iSubFlare<AL_LensFlare(iLensFlare).SubFlareCount+1
            tSubFlare as integer
            tSubFlare=AL_LensFlare(iLensFlare).SubFlareStart+iSubFlare
            AL_SubFlare(tSubFlare).Scale.x=iScaleX
            AL_SubFlare(tSubFlare).Scale.y=iScaleY
            AL_SubFlare(tSubFlare).Scale.z=iViewScale
            AL_LensFlareObjectUpdate=1
            AL_FlareObject(iLensFlare/100).ObjectUpdate=1
         endif
      endif
   endif
endfunction
`--------------
` Set Sub Flare Offset
`--------------
function LensFlare_SetSubFlareOffset(iLensFlare as integer,iSubFlare as integer,iOffset as float,iZshift as float,iRoll as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if iSubFlare<AL_LensFlare(iLensFlare).SubFlareCount+1
            tSubFlare as integer
            tSubFlare=AL_LensFlare(iLensFlare).SubFlareStart+iSubFlare
            AL_SubFlare(tSubFlare).Offset.x=iOffset
            if iSubFlare=0 then AL_SubFlare(tSubFlare).Offset.x=0
            AL_SubFlare(tSubFlare).Offset.y=iZshift
            AL_SubFlare(tSubFlare).Offset.z=iRoll
            AL_LensFlareObjectUpdate=1
            AL_FlareObject(iLensFlare/100).ObjectUpdate=1
         endif
      endif
   endif
endfunction
`--------------
` Set Sub Flare Color
`--------------
function LensFlare_SetSubFlareColor(iLensFlare as integer,iSubFlare as integer,iRed as float,iGreen as float,iBlue as float,iAlphaTosurface as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if iSubFlare<AL_LensFlare(iLensFlare).SubFlareCount+1
            tSubFlare as integer
            tSubFlare=AL_LensFlare(iLensFlare).SubFlareStart+iSubFlare
            AL_SubFlare(tSubFlare).Color.x=iRed/255
            AL_SubFlare(tSubFlare).Color.y=iGreen/255
            AL_SubFlare(tSubFlare).Color.z=iBlue/255
            AL_SubFlare(tSubFlare).AlphaTosurface=iAlphaTosurface
            AL_LensFlareObjectUpdate=1
            AL_FlareObject(iLensFlare/100).ObjectUpdate=1
         endif
      endif
   endif
endfunction
`--------------
` Set Sub Flare Falloff
`--------------
function LensFlare_SetSubFlareFalloff(iLensFlare as integer,iSubFlare as integer,iFalloff as float,iInnerFade as float,iEdgeFade as float)
   if AL_LensFlareEnabled=1
      if AL_LensFlare(iLensFlare).InUse=1
         if iSubFlare<AL_LensFlare(iLensFlare).SubFlareCount+1
            tSubFlare as integer
            tSubFlare=AL_LensFlare(iLensFlare).SubFlareStart+iSubFlare
            AL_SubFlare(tSubFlare).Falloff.x=iFalloff
            AL_SubFlare(tSubFlare).Falloff.y=iInnerFade
            AL_SubFlare(tSubFlare).Falloff.z=iEdgeFade
            AL_LensFlareObjectUpdate=1
            AL_FlareObject(iLensFlare/100).ObjectUpdate=1
         endif
      endif
   endif
endfunction
type AL_FogAreaData
   InUse as boolean
   Visible as boolean
   InVolume as boolean
   Object as integer
   Effect as integer
   Color as AL_Vec3Float
   Alpha as float
   Range as AL_Vec3Float
   Position as AL_Vec3Float
   Direction as AL_Vec3Float
   Angle as AL_Vec3Float
   Scale as AL_Vec3Float
endtype
`--------------
` Make Fog Area
`--------------
function FogArea_Create(iType as integer)
   local tFogArea as integer
   if AL_FogAreaEnabled=0
      global AL_FogAreaEnabled as boolean
      global dim AL_FogArea() as AL_FogAreaData
      AL_FogAreaEnabled=1
   endif
   tFogArea=-1
   for f=0 to AL_FogAreaCount
      if AL_FogArea(f).InUse=0 then tFogArea=f
   next f
   if tFogArea=-1
      array insert at bottom AL_FogArea()
      inc AL_FogAreaCount
      tFogArea=AL_FogAreaCount
   endif
   AL_FogArea(tFogArea).InUse=1
   AL_FogArea(tFogArea).Object=find free object()
   make object box AL_FogArea(tFogArea).Object,-100,-100,-100
   AL_FogArea(tFogArea).Effect=find free effect()
   if iType=0 then load effect AL_Directory+"Alpha/Fog/Fog.fx",AL_FogArea(tFogArea).Effect,0,1
   if iType=1 then load effect AL_Directory+"Alpha/Fog/Water Fog.fx",AL_FogArea(tFogArea).Effect,0,1
   convert object fvf AL_FogArea(tFogArea).Object,0x002
   offset limb AL_FogArea(tFogArea).Object,0,0,0,50
   set object effect AL_FogArea(tFogArea).Object,AL_FogArea(FogA).Effect
   texture object AL_FogArea(tFogArea).Object,0,AL_Image(2)
   texture object AL_FogArea(tFogArea).Object,1,AL_Image(7)
   set object transparency AL_FogArea(tFogArea).Object,2
   set object mask AL_FogArea(tFogArea).Object,2^AL_Camera(7)
   set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
   set effect constant vector AL_FogArea(tFogArea).Effect,"ViewSize",AL_Vector4(1)
   set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
   set effect constant vector AL_FogArea(tFogArea).Effect,"FogRange",AL_Vector4(1)
   FogArea_SetOrientation(tFogArea,0,0,0,0,0,0,100,100,100)
   FogArea_SetColor(tFogArea,64,64,64,1)
   FogArea_SetColor2(tFogArea,64,64,64)
   FogArea_SetRange(tFogArea,100,100,0)
   FogArea_Visible(tFogArea,1)
endfunction tFogArea
`--------------
` Delete Fog Area
`--------------
function FogArea_Delete(iFogArea as integer)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         delete object AL_FogArea(iFogArea).Object
         delete effect AL_FogArea(iFogArea).Effect
         AL_FogArea(iFogArea).InUse=0
         AL_FogArea(iFogArea).Visible=0
      endif
   endif
endfunction
`--------------
` Update Fog Area
`--------------
function FogArea_Update()
   if AL_FogAreaEnabled=1
      local tDist as float
      local tIntencity as float
      for f=0 to AL_FogAreaCount
         if AL_FogArea(f).InUse=1 and AL_FogArea(f).Visible=1
            rotate x matrix4 AL_Matrix(1),AL_FogArea(f).Angle.x/57.295
            rotate y matrix4 AL_Matrix(2),AL_FogArea(f).Angle.y/57.295
            rotate z matrix4 AL_Matrix(3),AL_FogArea(f).Angle.z/57.295
            multiply matrix4 AL_Matrix(1),AL_Matrix(1),AL_Matrix(2)
            multiply matrix4 AL_Matrix(1),AL_Matrix(1),AL_Matrix(3)
            set vector3 AL_Vector3(1),AL_FogArea(f).Position.x-AL_CameraPos.x,AL_FogArea(f).Position.y-AL_CameraPos.y,AL_FogArea(f).Position.z-AL_CameraPos.z
            transform coords vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(1)
            if AL_DistortionEnabled=1 or AL_ScatteringEnabled=1
               if x vector3(AL_Vector3(1))<AL_FogArea(f).Scale.x/2 and x vector3(AL_Vector3(1))>-AL_FogArea(f).Scale.x/2 and y vector3(AL_Vector3(1))<AL_FogArea(f).Scale.y/2 and y vector3(AL_Vector3(1))>-AL_FogArea(f).Scale.y/2 and z vector3(AL_Vector3(1))>0 and z vector3(AL_Vector3(1))<AL_FogArea(f).Scale.z
                  if AL_FogArea(f).InVolume=0
                     AL_FogArea(f).InVolume=1
                     set object mask AL_FogArea(f).Object,(2^AL_Camera(7))+(2^AL_Camera(5))
                  endif
               else
                  if AL_FogArea(f).InVolume=1
                     AL_FogArea(f).InVolume=0
                     set object mask AL_FogArea(f).Object,2^AL_Camera(7)
                  endif
               endif
            endif
            tDist=z vector3(AL_Vector3(1))-(AL_FogArea(f).Scale.z+(AL_FogArea(f).Range.z/4))
            tIntencity=AL_FogArea(f).Range.y
            if tDist<0
               tIntencity=AL_FogArea(f).Range.y+(tDist*4)
               if tIntencity<0 then tIntencity=0
            endif
            set effect constant float AL_FogArea(f).Effect,"AreaFogIntencity",1-(tIntencity/AL_FogArea(f).Range.y)
            set vector4 AL_Vector4(1),AL_FogArea(iFogArea).Range.x,AL_FogArea(iFogArea).Range.y*(tIntencity/AL_FogArea(f).Range.y),AL_FogArea(f).Range.y*5,AL_FogArea(f).InVolume
            set effect constant vector AL_FogArea(iFogArea).Effect,"AreaFogRange",AL_Vector4(1)
         endif
      next f
   endif
endfunction
`--------------
` Set Area Fog Visible
`--------------
function FogArea_Visible(iFogArea as integer,iVisible as integer)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         if AL_FogArea(iFogArea).Visible=0 and iVisible=1
            AL_FogArea(iFogArea).Visible=1
            show object AL_FogArea(iFogArea).Object
            exclude object off AL_FogArea(iFogArea).Object
         endif
         if AL_FogArea(iFogArea).Visible=1 and iVisible<>1
            AL_FogArea(iFogArea).Visible=0
            hide object AL_FogArea(iFogArea).Object
            exclude object on AL_FogArea(iFogArea).Object
         endif
      endif
   endif
endfunction
`--------------
` Set Area Fog Orientation
`--------------
function FogArea_SetOrientation(iFogArea as integer,iPosX as float,iPosY as float,iPosZ as float,iAngX as float,iAngY as float,iAngZ as float,iScaleX as float,iScaleY as float,iScaleZ as float)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         AL_FogArea(iFogArea).Position.x=iPosX
         AL_FogArea(iFogArea).Position.y=iPosY
         AL_FogArea(iFogArea).Position.z=iPosZ
         AL_FogArea(iFogArea).Scale.x=iScaleX
         AL_FogArea(iFogArea).Scale.y=iScaleY
         AL_FogArea(iFogArea).Scale.z=iScaleZ
         AL_FogArea(iFogArea).Angle.x=wrapvalue(iAngX)
         AL_FogArea(iFogArea).Angle.y=wrapvalue(iAngY)
         AL_FogArea(iFogArea).Angle.z=wrapvalue(iAngZ)
         rotate x matrix4 AL_Matrix(1),AL_FogArea(iFogArea).Angle.x/57.295
         rotate y matrix4 AL_Matrix(2),AL_FogArea(iFogArea).Angle.y/57.295
         rotate z matrix4 AL_Matrix(3),AL_FogArea(iFogArea).Angle.z/57.295
         multiply matrix4 AL_Matrix(1),AL_Matrix(1),AL_Matrix(2)
         multiply matrix4 AL_Matrix(1),AL_Matrix(1),AL_Matrix(3)
         set vector3 AL_Vector3(1),0,0,1
         transform normals vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(1)
         AL_FogArea(iFogArea).Direction.x=x vector3(AL_Vector3(1))
         AL_FogArea(iFogArea).Direction.y=y vector3(AL_Vector3(1))
         AL_FogArea(iFogArea).Direction.z=z vector3(AL_Vector3(1))
         set vector4 AL_Vector4(1),-AL_FogArea(iFogArea).Direction.x,-AL_FogArea(iFogArea).Direction.y,-AL_FogArea(iFogArea).Direction.z,0
         set effect constant vector AL_FogArea(iFogArea).Effect,"AreaFogDirection",AL_Vector4(1)
         set vector4 AL_Vector4(1),AL_FogArea(iFogArea).Position.x+(AL_FogArea(iFogArea).Direction.x*(AL_FogArea(iFogArea).Scale.z)),AL_FogArea(iFogArea).Position.y+(AL_FogArea(iFogArea).Direction.y*(AL_FogArea(iFogArea).Scale.z)),AL_FogArea(iFogArea).Position.z+(AL_FogArea(iFogArea).Direction.z*(AL_FogArea(iFogArea).Scale.z)),0
         set effect constant vector AL_FogArea(iFogArea).Effect,"AreaFogPosition",AL_Vector4(1)
         set effect constant float AL_FogArea(iFogArea).Effect,"AreaFogZScale",AL_FogArea(iFogArea).Scale.z
         build ortho lhmatrix4 AL_Matrix(1),AL_FogArea(iFogArea).Scale.x+(AL_FogArea(iFogArea).Scale.x/500),AL_FogArea(iFogArea).Scale.y+(AL_FogArea(iFogArea).Scale.y/500),0,0
         set vector3 AL_Vector3(1),0,0,0
         set vector3 AL_Vector3(2),AL_FogArea(iFogArea).Direction.x,AL_FogArea(iFogArea).Direction.y,AL_FogArea(iFogArea).Direction.z
         set vector3 AL_Vector3(3),0,1,0
         build lookat lhmatrix4 AL_Matrix(2),AL_Vector3(1),AL_Vector3(2),AL_Vector3(3)
         multiply matrix4 AL_Matrix(1),AL_Matrix(2),AL_Matrix(1)
         set effect constant matrix AL_FogArea(iFogArea).Effect,"AreaFogProjMatrix",AL_Matrix(1)
         position object AL_FogArea(iFogArea).Object,iPosX,iPosY,iPosZ
         rotate object AL_FogArea(iFogArea).Object,iAngX,iAngY,iAngZ
         scale object AL_FogArea(iFogArea).Object,iScaleX,iScaleY,iScaleZ
      endif
   endif
endfunction
`--------------
` Set Area Fog Color
`--------------
function FogArea_SetColor(iFogArea as integer,iRed as float,iGreen as float,iBlue as float,iAlpha as float)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         AL_FogArea(iFogArea).Color.x=iRed
         AL_FogArea(iFogArea).Color.y=iGreen
         AL_FogArea(iFogArea).Color.z=iBlue
         AL_FogArea(iFogArea).Alpha=iAlpha
         set vector4 AL_Vector4(1),AL_FogArea(iFogArea).Color.x/255,AL_FogArea(iFogArea).Color.y/255,AL_FogArea(iFogArea).Color.z/255,AL_FogArea(iFogArea).Alpha/255
         set effect constant vector AL_FogArea(iFogArea).Effect,"AreaFogColor",AL_Vector4(1)
      endif
   endif
endfunction
`--------------
` Set Area Fog Color 2
`--------------
function FogArea_SetColor2(iFogArea as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
         set effect constant vector AL_FogArea(iFogArea).Effect,"AreaFogColor2",AL_Vector4(1)
      endif
   endif
endfunction
`--------------
` Set Area Fog Range
`--------------
function FogArea_SetRange(iFogArea as integer,iRange as float,iZRange as float,iZFall as float)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         AL_FogArea(iFogArea).Range.x=iRange
         AL_FogArea(iFogArea).Range.y=iZRange
         AL_FogArea(iFogArea).Range.z=iZFall
      endif
   endif
endfunction
`--------------
` Set Area Fog Caustics
`--------------
function FogArea_SetCaustics(iFogArea as integer,iTexture as integer,iDirX as float,iDirY as float,iDirZ as float,iScale as float)
   if AL_FogAreaEnabled=1 and iFogArea>-1 and iFogArea<AL_FogAreaCount+1
      if AL_FogArea(iFogArea).InUse=1
         if iTexture>0 then texture object AL_FogArea(tFogArea).Object,2,iTexture
         set vector3 AL_Vector3(1),0,0,0
         set vector3 AL_Vector3(2),iDirX,iDirY,iDirZ
         set vector3 AL_Vector3(3),0,1,0
         build lookat lhmatrix4 AL_Matrix(1),AL_Vector3(1),AL_Vector3(2),AL_Vector3(3)
         build ortho lhmatrix4 AL_Matrix(2),iScale,iScale,0,1
         multiply matrix4 AL_Matrix(1),AL_Matrix(1),AL_Matrix(2)
         set effect constant matrix AL_FogArea(iFogArea).Effect,"CausticProjMatrix",AL_Matrix(1)
      endif
   endif
endfunction
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
type AL_SpotShadowMapData
   InUse as boolean
   Number as integer
   Object as integer
   ShadowMap as integer
   Static as integer
   Update as integer
   LastUpdate as integer
   ShadowSize as float
   UpdateTimer as float
   DynamicTimer as integer
   UpdateMode as integer
   Position as AL_Vec3Integer
   Positionf as AL_Vec3Float
   Angle as AL_Vec3Integer
   Anglef as AL_Vec3Float
   FOV as integer
   FOVf as float
   Range as integer
   Rangef as float
   UpdateFromTerrainP as AL_Vec2Float
   UpdateFromTerrainN as AL_Vec2Float
endtype
`--------------
` Add Spot Light
`--------------
function SpotLight_Create(iSpecular as boolean,iSubSurface as boolean,iShadow as integer,iSize as integer)
   local tLight as integer
   tLight=-1
   if AL_Enabled=1
      for l=0 to AL_SpotLightCount
         if AL_SpotLight(l).InUse=0 then tLight=l
      next l
      if tLight=-1
         array insert at bottom AL_SpotLight()
         inc AL_SpotLightCount
         tLight=AL_SpotLightCount
      endif
      AL_SpotLight(tLight).InUse=1
      AL_SpotLight(tLight).Object=find free object()
      AL_SpotLight(tLight).Effect=find free effect()
      AL_SpotLight(tLight).Lensflare=-1
      load object AL_Directory+"Resources/Spot.dbo",AL_SpotLight(tLight).Object
      if iShadow=0
         load effect AL_Directory+"Lighting/Spot/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_SpotLight(tLight).Effect,0,1
         AL_SpotLight(tLight).Shadowed=0
      else
         load effect AL_Directory+"Lighting/Spot Shadow/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_SpotLight(tLight).Effect,0,1
         AL_SpotLight(tLight).Shadowed=1
      endif
      set object effect AL_SpotLight(tLight).Object,AL_SpotLight(tLight).Effect
      texture object AL_SpotLight(tLight).Object,0,AL_Image(1)
      texture object AL_SpotLight(tLight).Object,1,AL_Image(2)
      texture object AL_SpotLight(tLight).Object,2,AL_Image(7)
      set object mask AL_SpotLight(tLight).Object,2^AL_Camera(7)
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_SpotLight(tLight).Effect,"ViewSize",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
      set effect constant vector AL_SpotLight(tLight).Effect,"FogRange",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
      set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
      set effect constant vector AL_SpotLight(tLight).Effect,"HeightFog",AL_Vector4(1)
      set effect constant vector AL_SpotLight(tLight).Effect,"HeightFogColor",AL_Vector4(2)
      SpotLight_SetVisible(tLight,1)
      SpotLight_SetPosition(tLight,0,0,0)
      SpotLight_SetAngle(tLight,0,0,0,80)
      SpotLight_SetColor(tLight,255,255,255)
      SpotLight_SetRange(tLight,500)
      SpotLight_SetAttenuation(tLight,4)
      SpotLight_SetSpecularPower(tLight,128)
      SpotLight_SetShadow(tLight,iShadow,iSize,0)
   endif
endfunction tLight
`--------------
` Delete Spot Light
`--------------
function SpotLight_Delete(iLight as integer)
   if AL_SpotLightInUse(iLight)=1
      SpotLight_SetVisible(iLight,0)
      delete effect AL_SpotLight(iLight).Effect
      delete object AL_SpotLight(iLight).Object
      AL_SpotLight(iLight).InUse=0
      AL_SpotLight(iLight).Effect=0
      AL_SpotLight(iLight).Object=0
   endif
endfunction
`--------------
` Set Spot Light Visible
`--------------
function SpotLight_SetVisible(iLight as integer,iVisible as boolean)
   if AL_SpotLightInUse(iLight)=1
      if AL_SpotLight(iLight).Visible=1 and iVisible<>1
         AL_SpotLight(iLight).Visible=0
         for l=0 to AL_SpotLightVisibleCount-1
            if AL_SpotLightVisible(l)=iLight+1
               array delete element AL_SpotLightVisible(),l
               dec AL_SpotLightVisibleCount
               exit
            endif
         next l
         exclude object on AL_SpotLight(iLight).Object
         hide object AL_SpotLight(iLight).Object
         if AL_SpotLight(iLight).ShadowMap>0
            set effect technique AL_SpotLight(iLight).Effect,"Spot"
            AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).InUse=0
            AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).Number=0
            AL_SpotLight(iLight).ShadowMap=0
         endif
         if AL_SpotLight(iLight).LensFlare>-1 then LensFlare_SetVisible(AL_SpotLight(iLight).LensFlare,0)
      endif
      if AL_SpotLight(iLight).Visible=0 and iVisible<>0
         AL_SpotLight(iLight).Visible=1
         tAddVisible as integer
         tAddVisible=0
         for l=0 to AL_SpotLightVisibleCount
            if AL_SpotLightVisible(l)=iLight+1
               tAddVisible=1
               exit
            endif
         next l
         if tAddVisible=0
            array insert at bottom AL_SpotLightVisible()
            inc AL_SpotLightVisibleCount
            AL_SpotLightVisible(AL_SpotLightVisibleCount)=iLight+1
         endif
         exclude object off AL_SpotLight(iLight).Object
         show object AL_SpotLight(iLight).Object
         if AL_SpotLight(iLight).LensFlare>-1 then LensFlare_SetVisible(AL_SpotLight(iLight).LensFlare,0)
      endif
   endif
endfunction
`--------------
` Set Spot Light Texture
`--------------
function SpotLight_SetTexture(iLight as integer,iTexture as integer)
   if AL_SpotLightInUse(iLight)=1
      if iTexture>0
         if image exist(iTexture)=1
            AL_SpotLight(iLight).Texture=iTexture
            texture object AL_SpotLight(iLight).Object,2,AL_SpotLight(iLight).Texture
         endif
      endif
   endif
endfunction
`--------------
` Set Spot Light Position
`--------------
function SpotLight_SetPosition(iLight as integer,iPositionX as float,iPositionY as float,iPositionZ as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Position.x=iPositionX
      AL_SpotLight(iLight).Position.y=iPositionY
      AL_SpotLight(iLight).Position.z=iPositionZ
      set vector4 AL_Vector4(1),AL_SpotLight(iLight).Position.x,AL_SpotLight(iLight).Position.y,AL_SpotLight(iLight).Position.z,0
      set effect constant vector AL_SpotLight(iLight).Effect,"LightPosition",AL_Vector4(1)
      position object AL_SpotLight(iLight).Object,AL_SpotLight(iLight).Position.x,AL_SpotLight(iLight).Position.y,AL_SpotLight(iLight).Position.z
      if AL_SpotLight(iLight).LensFlare>-1 then LensFlare_SetPosition(AL_SpotLight(iLight).LensFlare,AL_SpotLight(iLight).Position.x,AL_SpotLight(iLight).Position.y,AL_SpotLight(iLight).Position.z)
   endif
endfunction
`--------------
` Set Spot Light Angle
`--------------
function SpotLight_SetAngle(iLight as integer,iAngleX as float,iAngleY as float,iAngleZ as float,iFov as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Angle.x=wrapvalue(iAngleX)
      AL_SpotLight(iLight).Angle.y=wrapvalue(iAngleY)
      AL_SpotLight(iLight).Angle.z=wrapvalue(iAngleZ)
      AL_SpotLight(iLight).FOV=iFov
      set current camera AL_ShadowMapCamera(1)
      position camera AL_ShadowMapCamera(1),0,0,0
      Rotate camera AL_ShadowMapCamera(1),AL_SpotLight(iLight).Angle.x,AL_SpotLight(iLight).Angle.y,AL_SpotLight(iLight).Angle.z
      set camera range AL_ShadowMapCamera(1),AL_SpotLight(iLight).Range*0.005,AL_SpotLight(iLight).Range
      set camera fov AL_ShadowMapCamera(1),AL_SpotLight(iLight).FOV
      set camera aspect AL_ShadowMapCamera(1),1
      roll camera right AL_ShadowMapCamera(1),AL_SpotLight(iLight).Roll
      view matrix4 AL_Matrix(1)
      projection matrix4 AL_Matrix(2)
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
      set effect constant matrix AL_SpotLight(iLight).Effect,"LightProjMatrix",AL_Matrix(3)
      rotate object AL_SpotLight(iLight).Object,iAngleX,iAngleY,iAngleZ
      scale object AL_SpotLight(iLight).Object,(AL_SpotLight(iLight).FOV^1.2)*(AL_SpotLight(iLight).Range/100),(AL_SpotLight(iLight).FOV^1.2)*(AL_SpotLight(iLight).Range/100),AL_SpotLight(iLight).Range
      set current camera AL_CurrentCamera
      rotate x matrix4 AL_Matrix(1),AL_SpotLight(iLight).Angle.x/57.295
      rotate y matrix4 AL_Matrix(2),AL_SpotLight(iLight).Angle.y/57.295
      rotate z matrix4 AL_Matrix(3),AL_SpotLight(iLight).Angle.z/57.295
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set vector3 AL_Vector3(1),0,0,1
      transform normals vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(4)
      AL_SpotLight(iLight).Normal.x=x vector3(AL_Vector3(1))
      AL_SpotLight(iLight).Normal.y=y vector3(AL_Vector3(1))
      AL_SpotLight(iLight).Normal.z=z vector3(AL_Vector3(1))
   endif
endfunction
`--------------
` Roll Spot Light Projection
`--------------
function SpotLight_SetRoll(iLight as integer,iRoll as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Roll=iRoll
      set current camera AL_ShadowMapCamera(1)
      position camera AL_ShadowMapCamera(1),0,0,0
      Rotate camera AL_ShadowMapCamera(1),AL_SpotLight(iLight).Angle.x,AL_SpotLight(iLight).Angle.y,AL_SpotLight(iLight).Angle.z
      set camera range AL_ShadowMapCamera(1),AL_SpotLight(iLight).Range*0.005,AL_SpotLight(iLight).Range
      set camera fov AL_ShadowMapCamera(1),AL_SpotLight(iLight).FOV
      set camera aspect AL_ShadowMapCamera(1),1
      roll camera right AL_ShadowMapCamera(1),AL_SpotLight(iLight).Roll
      view matrix4 AL_Matrix(1)
      projection matrix4 AL_Matrix(2)
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
      set effect constant matrix AL_SpotLight(iLight).Effect,"LightProjMatrix",AL_Matrix(3)
      set current camera AL_CurrentCamera
   endif
endfunction
`--------------
` Color Spot Light
`--------------
function SpotLight_SetColor(iLight as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Color.x=iRed
      AL_SpotLight(iLight).Color.y=iGreen
      AL_SpotLight(iLight).Color.z=iBlue
      set vector4 AL_Vector4(1),(AL_SpotLight(iLight).Color.x/255)*AL_Ambient(5),(AL_SpotLight(iLight).Color.y/255)*AL_Ambient(6),(AL_SpotLight(iLight).Color.z/255)*AL_Ambient(7),0
      set effect constant vector AL_SpotLight(iLight).Effect,"LightColor",AL_Vector4(1)
      if AL_SpotLight(iLight).LensFlare>-1 then LensFlare_SetColor(AL_SpotLight(iLight).LensFlare,AL_SpotLight(iLight).Color.x,AL_SpotLight(iLight).Color.y,AL_SpotLight(iLight).Color.z)
   endif
endfunction
`--------------
` Set Spot Light Range
`--------------
function SpotLight_SetRange(iLight as integer,iRange as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Range=iRange
      scale object AL_SpotLight(iLight).Object,(AL_SpotLight(iLight).FOV^1.2)*(AL_SpotLight(iLight).Range/100),(AL_SpotLight(iLight).FOV^1.2)*(AL_SpotLight(iLight).Range/100),AL_SpotLight(iLight).Range
      set effect constant float AL_SpotLight(iLight).Effect,"LightRange",AL_SpotLight(iLight).Range
   endif
endfunction
`--------------
` Set Spot Light Attenuation
`--------------
function SpotLight_SetAttenuation(iLight as integer,iAttenuation as float)
   if AL_SpotLightInUse(iLight)=1
      AL_SpotLight(iLight).Attenuation=iAttenuation
      set effect constant float AL_SpotLight(iLight).Effect,"AttenuationPower",AL_SpotLight(iLight).Attenuation
   endif
endfunction
`--------------
` Set Spot Light Specular Power
`--------------
function SpotLight_SetSpecularPower(iLight as integer,iSpecular as float)
   if AL_SpotLightInUse(iLight)=1
      set effect constant float AL_SpotLight(iLight).Effect,"SpecularPower",iSpecular
   endif
endfunction
`--------------
` Set Spot Light Shadow
`--------------
function SpotLight_SetShadow(iLight as integer,iShadow as integer,iSize as float,iShadowRange as float)
   if AL_SpotLightInUse(iLight)=1
      if AL_SpotLight(iLight).Shadowed=1
         if AL_SpotLight(iLight).ShadowQuality<>iShadow or AL_SpotLight(iLight).ShadowSize<>iSize
            AL_SpotLight(iLight).ShadowQuality=iShadow
            AL_SpotLight(iLight).ShadowSize=iSize
            AL_SpotLight(iLight).ShadowRange=AL_ShadowRange
            if iShadowRange>0 then AL_SpotLight(iLight).ShadowRange=iShadowRange
            if AL_SpotLight(iLight).ShadowMap>0
               set effect technique AL_SpotLight(iLight).Effect,"Spot"
               AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).InUse=0
               AL_SpotShadowMap(AL_SpotLight(iLight).ShadowMap).Number=0
               AL_SpotLight(iLight).ShadowMap=0
            endif
         endif
      endif
   endif
endfunction
`--------------
` Get Spot Light Visible
`--------------
function SpotLight_GetVisible(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Visible
endfunction tReturn
`--------------
` Get Spot Light Position X
`--------------
function SpotLight_GetPositionX(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Position.x
endfunction tReturn
`--------------
` Get Spot Light Position Y
`--------------
function SpotLight_GetPositionY(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Position.y
endfunction tReturn
`--------------
` Get Spot Light Position Z
`--------------
function SpotLight_GetPositionZ(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Position.z
endfunction tReturn
`--------------
` Get Spot Light Angle X
`--------------
function SpotLight_GetAngleX(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Angle.x
endfunction tReturn
`--------------
` Get Spot Light Angle Y
`--------------
function SpotLight_GetAngleY(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Angle.y
endfunction tReturn
`--------------
` Get Spot Light Angle Z
`--------------
function SpotLight_GetAngleZ(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Angle.z
endfunction tReturn
`--------------
` Get Spot Light Fov
`--------------
function SpotLight_GetFOV(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).FOV
endfunction tReturn
`--------------
` Get Spot Light Roll
`--------------
function SpotLight_GetRoll(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Roll
endfunction tReturn
`--------------
` Get Spot Light Color Red
`--------------
function SpotLight_GetColorRed(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Color.x
endfunction tReturn
`--------------
` Get Spot Light Color Green
`--------------
function SpotLight_GetColorGreen(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Color.y
endfunction tReturn
`--------------
` Get Spot Light Color Blue
`--------------
function SpotLight_GetColorBlue(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Color.z
endfunction tReturn
`--------------
` Get Spot Light Range
`--------------
function SpotLight_GetRange(iLight as integer)
   local tReturn as float
   if AL_SpotLightInUse(iLight)=1 then tReturn=AL_SpotLight(iLight).Range
endfunction tReturn
`--------------
` Update Shadowed Spot Lights
`--------------
function SpotLight_Update()
   if AL_Enabled=1
      local tLightNum as integer
      local tFarDist as integer
      local tShadowMap as integer
      local tCull as integer
      tFarDist=0
      tShadowMap=0
      for d=1 to AL_SpotShadowMapCount
         if AL_SpotShadowMap(d).InUse=1
            tLightNum=AL_SpotShadowMap(d).Number
            if AL_SpotLight(tLightNum).Distance>tFarDist
               tFarDist=AL_SpotLight(tLightNum).Distance
               tShadowMap=d
            endif
         else
            tFarDist=9999999
            tShadowMap=d
            exit
         endif
      next d
      for d=1 to AL_SpotShadowMapCount
         if AL_SpotShadowMap(d).DynamicTimer>0
            dec AL_SpotShadowMap(d).DynamicTimer
         endif
      next d
      for l=0 to AL_SpotLightVisibleCount
         tLightNum=AL_SpotLightVisible(l)-1
         if AL_SpotLight(tLightNum).ShadowQuality>0
            tCull=2
            move object AL_SpotLight(tLightNum).Object,AL_SpotLight(tLightNum).Range/2
            AL_Ldx(3)=object position x(AL_SpotLight(tLightNum).Object)
            AL_LdY(3)=object position y(AL_SpotLight(tLightNum).Object)
            AL_LdZ(3)=object position z(AL_SpotLight(tLightNum).Object)
            move object AL_SpotLight(tLightNum).Object,-AL_SpotLight(tLightNum).Range/2
            set vector3 AL_Vector3(1),AL_CameraPos.x-AL_SpotLight(tLightNum).Position.x,AL_CameraPos.y-AL_SpotLight(tLightNum).Position.y,AL_CameraPos.z-AL_SpotLight(tLightNum).Position.z
            AL_SpotLight(tLightNum).Distance=length vector3(AL_Vector3(1))
            if AL_SpotLight(tLightNum).Distance<AL_SpotLight(tLightNum).ShadowRange+AL_SpotLight(tLightNum).Range
               tCull=AL_GetSphereInFrustum(0,AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_SpotLight(tLightNum).Range*0.75)
            endif
            if tCull<>AL_SpotLight(tLightNum).CullMode
               AL_SpotLight(tLightNum).CullMode=tCull
                if tCull=1 or tCull=2
                   exclude object off AL_SpotLight(tLightNum).Object
               else
                  exclude object on AL_SpotLight(tLightNum).Object
               endif
               if tCull=0 or tCull=2
                  if AL_SpotLight(tLightNum).ShadowMap>0
                     set effect technique AL_SpotLight(tLightNum).Effect,"Spot"
                     AL_SpotShadowMap(AL_SpotLight(tLightNum).ShadowMap).InUse=0
                     AL_SpotShadowMap(AL_SpotLight(tLightNum).ShadowMap).Number=0
                     AL_SpotLight(tLightNum).ShadowMap=0
                  endif
               endif
             endif
             if tCull=1
               set vector3 AL_Vector3(1),AL_CameraPos.x-AL_SpotLight(tLightNum).Position.x,AL_CameraPos.y-AL_SpotLight(tLightNum).Position.y,AL_CameraPos.z-AL_SpotLight(tLightNum).Position.z
               if length vector3(AL_Vector3(1))<tFarDist and AL_SpotLight(tLightNum).ShadowMap=0
                  if AL_SpotShadowMap(tShadowMap).InUse>0
                     set effect technique AL_SpotLight(AL_SpotShadowMap(tShadowMap).Number).Effect,"Spot"
                     AL_SpotLight(AL_SpotShadowMap(tShadowMap).Number).ShadowMap=0
                  endif
                  AL_SpotLight(tLightNum).ShadowMap=tShadowMap
                  AL_SpotShadowMap(tShadowMap).InUse=1
                  AL_SpotShadowMap(tShadowMap).Number=tLightNum
                  AL_SpotShadowMap(tShadowMap).Update=1
                  if AL_SpotShadowMap(tShadowMap).ShadowMap>0 then texture object AL_SpotLight(tLightNum).Object,3,AL_SpotShadowMap(tShadowMap).ShadowMap
                  exit
               endif
            endif
         endif
      next l
   endif
endfunction
`--------------
` Render Spot Light
`--------------
function SpotLight_Render()
   if AL_Enabled=1
      local tLightNum as integer
      local tObjectNum as integer
      local tDifference as integer
      local tShadowLod as integer
      local tShadowFormat as integer
      local tSyncMask as integer
      if AL_SpotShadowMapCount>0
         AL_ShadowMapNum=0
         repeat
            if AL_SpotShadowUpdate>AL_SpotShadowMapCount then AL_SpotShadowUpdate=1
            if AL_SpotShadowMap(AL_SpotShadowUpdate).InUse=1
               tLightNum=AL_SpotShadowMap(AL_SpotShadowUpdate).Number
               tShadowLod=4
               if AL_SpotLight(tLightNum).Distance<AL_SpotLight(tLightNum).Range*6 then tShadowLod=2
               if AL_SpotLight(tLightNum).Distance<AL_SpotLight(tLightNum).Range*3 then tShadowLod=1
               tShadowFormat=113
               if tShadowLod=4 then tShadowFormat=34
               tDifference=0
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.x<>int(AL_SpotLight(tLightNum).Position.x/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.y<>int(AL_SpotLight(tLightNum).Position.y/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Position.z<>int(AL_SpotLight(tLightNum).Position.z/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.x<>int(AL_SpotLight(tLightNum).Angle.x) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.y<>int(AL_SpotLight(tLightNum).Angle.y) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.z<>int(AL_SpotLight(tLightNum).Angle.z) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).FOV<>int(AL_SpotLight(tLightNum).FOV) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Range<>int(AL_SpotLight(tLightNum).Range/AL_WorldSize) then tDifference=1
               if AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize<>int(AL_SpotLight(tLightNum).ShadowSize/tShadowLod) then tDifference=1
               if tDifference=1
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.x=int(AL_SpotLight(tLightNum).Position.x/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.y=int(AL_SpotLight(tLightNum).Position.y/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Position.z=int(AL_SpotLight(tLightNum).Position.z/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.x=int(AL_SpotLight(tLightNum).Angle.x)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.y=int(AL_SpotLight(tLightNum).Angle.y)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Angle.z=int(AL_SpotLight(tLightNum).Angle.z)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).FOV=int(AL_SpotLight(tLightNum).FOV)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Range=int(AL_SpotLight(tLightNum).Range/AL_WorldSize)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize=int(AL_SpotLight(tLightNum).ShadowSize/tShadowLod)
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x=AL_SpotLight(tLightNum).Position.x
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y=AL_SpotLight(tLightNum).Position.y
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z=AL_SpotLight(tLightNum).Position.z
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x=AL_SpotLight(tLightNum).Angle.x
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y=AL_SpotLight(tLightNum).Angle.y
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z=AL_SpotLight(tLightNum).Angle.z
                  AL_SpotShadowMap(AL_SpotShadowUpdate).FOVf=AL_SpotLight(tLightNum).FOV
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef=AL_SpotLight(tLightNum).Range
                  AL_SpotShadowMap(AL_SpotShadowUpdate).DynamicTimer=AL_SpotDynamicTimer
                  AL_SpotShadowMap(AL_SpotShadowUpdate).Update=1
               endif
               Terrain_LightSpotUpdate(AL_SpotShadowUpdate)
               if AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer>0
                  dec AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer
                  if AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer<0 then AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer=0
               endif
               if AL_SpotShadowMap(AL_SpotShadowUpdate).Update>0
                  if AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer=0
                     AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer=AL_SpotLight(tLightNum).Distance-AL_SpotLight(tLightNum).Range
                     if AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer<0 then AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer=0
                     AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer=(AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateTimer/AL_ShadowRange)*10.0
                     inc AL_ShadowMapUpdate
                     Terrain_LightCull(AL_SpotLight(tLightNum).Position.x,AL_SpotLight(tLightNum).Position.y,AL_SpotLight(tLightNum).Position.z,AL_SpotLight(tLightNum).Range)
                     set effect constant float AL_SpotLight(tLightNum).Effect,"ShadowSize",(0.5/AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize)+0.5
                     set vector4 AL_Vector4(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z,0
                     set vector4 AL_Vector4(2),AL_ShadowBias,-AL_ShadowBias,0,0
                     set effect constant vector AL_SpotLight(tLightNum).Effect,"ShadowPosition",AL_Vector4(1)
                     if tShadowLod=4
                        set effect technique AL_SpotLight(tLightNum).Effect,"SpotVsm"
                     else
                        set effect technique AL_SpotLight(tLightNum).Effect,"SpotEvsm"
                     endif
                     for e=0 to AL_EffectCount
                        set effect constant vector AL_Effect(e).Number,"ShadowPosition",AL_Vector4(1)
                        set effect constant float AL_Effect(e).Number,"LightRange",AL_SpotLight(tLightNum).Range
                        set effect constant vector AL_Effect(e).Number,"ShadowBias",AL_Vector4(2)
                        if tShadowLod=4
                           set effect technique AL_Effect(e).Number,"DepthMapVsm"
                        else
                           set effect technique AL_Effect(e).Number,"DepthMapEvsm"
                        endif
                     next e
                     set vector4 AL_Vector4(1),0.5/AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,0.5/AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,0,0
                     set effect constant vector AL_ShadowMapEffect(1),"ViewSize",AL_Vector4(1)
                     set vector4 AL_Vector4(1),AL_ShadowOffset/AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_ShadowOffset/AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,0,0
                     set effect constant vector AL_ShadowMapEffect(4),"BlurOffset",AL_Vector4(1)
                     if AL_SpotShadowMap(AL_SpotShadowUpdate).DynamicTimer>0
                        AL_SpotShadowMap(AL_SpotShadowUpdate).Update=1
                     endif
                     if AL_SpotShadowMap(AL_SpotShadowUpdate).Object=0
                        AL_SpotShadowMap(AL_SpotShadowUpdate).Object=find free object()
                        make object plain AL_SpotShadowMap(AL_SpotShadowUpdate).Object,2,2,1
                        set object effect AL_SpotShadowMap(AL_SpotShadowUpdate).Object,AL_ShadowMapEffect(1)
                        hide object AL_SpotShadowMap(AL_SpotShadowUpdate).Object
                        exclude object on AL_SpotShadowMap(AL_SpotShadowUpdate).Object
                     endif
                     if AL_SpotShadowMap(AL_SpotShadowUpdate).Update=1
                        AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateMode=1
                        AL_SpotShadowMap(AL_SpotShadowUpdate).LastUpdate=1
                        if AL_SpotLight(tLightNum).ShadowQuality=1
                           if AL_CurrentShadowMapImage(1)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap or AL_CurrentShadowMapSize(1)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat
                              if AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=0 then AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=find free image()
                              delete camera AL_ShadowMapCamera(1)
                              AL_CreateCamera(AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(1),1
                              texture object AL_SpotLight(tLightNum).Object,3,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                              AL_CurrentShadowMapImage(1)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                              AL_CurrentShadowMapSize(1)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(1)=tShadowFormat
                           endif
                        else
                           if AL_CurrentShadowMapImage(5)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap or AL_CurrentShadowMapSize(5)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(5)<>tShadowFormat
                              if AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=0 then AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=find free image()
                              delete camera AL_ShadowMapCamera(5)
                              AL_CreateCamera(AL_ShadowMapCamera(5),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(5),1
                              set camera range AL_ShadowMapCamera(5),1,2
                              texture object AL_SpotLight(tLightNum).Object,3,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                              AL_CurrentShadowMapImage(5)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                              AL_CurrentShadowMapSize(5)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(5)=tShadowFormat
                           endif
                           if AL_CurrentShadowMapImage(1)<>AL_ShadowMapTexture(1) or AL_CurrentShadowMapSize(1)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat
                              if AL_ShadowMapTexture(1)=0 then AL_ShadowMapTexture(1)=find free image()
                              delete camera AL_ShadowMapCamera(1)
                              AL_CreateCamera(AL_ShadowMapCamera(1),AL_ShadowMapTexture(1),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(1),1
                              AL_CurrentShadowMapImage(1)=AL_ShadowMapTexture(1)
                              AL_CurrentShadowMapSize(1)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(1)=tShadowFormat
                              AL_ShadowMapObjectTexture(1)=-1
                           endif
                           if AL_ShadowMapObjectTexture(1)<>AL_ShadowMapTexture(1)
                              AL_ShadowMapObjectTexture(1)=AL_ShadowMapTexture(1)
                              texture object AL_ShadowMapObject(1),0,AL_ShadowMapTexture(1)
                           endif
                           show object AL_ShadowMapObject(1)
                           exclude object off AL_ShadowMapObject(1)
                        endif
                        set current camera AL_ShadowMapCamera(1)
                        position camera AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z
                        Rotate camera AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z
                        set camera range AL_ShadowMapCamera(1),(AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef*0.005),AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef
                        set camera fov AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).FOVf
                        position object AL_ShadowMapObject(0),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z
                        Rotate object AL_ShadowMapObject(0),AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z
                        view matrix4 AL_Matrix(1)
                        projection matrix4 AL_Matrix(2)
                        multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
                        set effect constant matrix AL_SpotLight(tLightNum).Effect,"ShadowProjMatrix",AL_Matrix(3)
                        AL_GetViewProjectFrustum(AL_SpotShadowUpdate,-1)
                        if tShadowLod=4
                           set effect technique AL_ShadowMapEffect(0),"Vsm"
                           set effect technique AL_ShadowMapEffect(4),"Vsm"
                        else
                           set effect technique AL_ShadowMapEffect(0),"Evsm"
                           set effect technique AL_ShadowMapEffect(4),"Evsm"
                        endif
                        if AL_SpotLight(tLightNum).ShadowQuality=1
                           sync mask (2^AL_ShadowMapCamera(1))
                        else
                           sync mask (2^AL_ShadowMapCamera(1))+(2^AL_ShadowMapCamera(5))
                        endif
                        fastsync
                     endif
                     if AL_SpotShadowMap(AL_SpotShadowUpdate).Update=2
                        AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateMode=2
                        if AL_CurrentShadowMapImage(5)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap or AL_CurrentShadowMapSize(5)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(5)<>tShadowFormat*2
                           if AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=0 then AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap=find free image()
                           delete camera AL_ShadowMapCamera(5)
                           AL_CreateCamera(AL_ShadowMapCamera(5),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                           set camera aspect AL_ShadowMapCamera(5),1
                           set camera range AL_ShadowMapCamera(5),1,2
                           texture object AL_SpotLight(tLightNum).Object,3,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                           AL_CurrentShadowMapImage(5)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowMap
                           AL_CurrentShadowMapSize(5)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                           AL_CurrentShadowMapFormat(5)=tShadowFormat*2
                        endif
                        if AL_SpotLight(tLightNum).ShadowQuality=1
                           set object mask AL_SpotShadowMap(AL_SpotShadowUpdate).Object,2^AL_ShadowMapCamera(5)
                        else
                           if AL_CurrentShadowMapImage(4)<>AL_ShadowMapTexture(4) or AL_CurrentShadowMapSize(4)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(4)<>tShadowFormat*2
                              if AL_ShadowMapTexture(4)=0 then AL_ShadowMapTexture(4)=find free image()
                              delete camera AL_ShadowMapCamera(4)
                              AL_CreateCamera(AL_ShadowMapCamera(4),AL_ShadowMapTexture(4),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(4),1
                              set camera range AL_ShadowMapCamera(4),1,2
                              AL_CurrentShadowMapImage(4)=AL_ShadowMapTexture(4)
                              AL_CurrentShadowMapSize(4)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(4)=tShadowFormat*2
                              AL_ShadowMapObjectTexture(1)=-1
                           endif
                           if AL_ShadowMapObjectTexture(1)<>AL_ShadowMapTexture(4)
                              AL_ShadowMapObjectTexture(1)=AL_ShadowMapTexture(4)
                              texture object AL_ShadowMapObject(1),0,AL_ShadowMapTexture(4)
                           endif
                           show object AL_ShadowMapObject(1):exclude object off AL_ShadowMapObject(1)
                           set object mask AL_SpotShadowMap(AL_SpotShadowUpdate).Object,2^AL_ShadowMapCamera(4)
                        endif
                        if AL_CurrentShadowMapImage(2)<>AL_ShadowMapTexture(2) or AL_CurrentShadowMapSize(2)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(2)<>tShadowFormat*2
                           if AL_ShadowMapTexture(2)=0 then AL_ShadowMapTexture(2)=find free image()
                           delete camera AL_ShadowMapCamera(2)
                           AL_CreateCamera(AL_ShadowMapCamera(2),AL_ShadowMapTexture(2),AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                           set camera aspect AL_ShadowMapCamera(2),1
                           texture object AL_SpotShadowMap(AL_SpotShadowUpdate).Object,1,AL_ShadowMapTexture(2)
                           AL_CurrentShadowMapImage(2)=AL_ShadowMapTexture(2)
                           AL_CurrentShadowMapSize(2)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                           AL_CurrentShadowMapFormat(2)=tShadowFormat*2
                        endif
                        tSyncMask=0
                        if AL_SpotShadowMap(AL_SpotShadowUpdate).LastUpdate=1
                           if AL_CurrentShadowMapImage(1)<>AL_SpotShadowMap(AL_SpotShadowUpdate).Static or AL_CurrentShadowMapSize(1)<>AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat*2
                              if AL_SpotShadowMap(AL_SpotShadowUpdate).Static=0 then AL_SpotShadowMap(AL_SpotShadowUpdate).Static=find free image()
                              delete camera AL_ShadowMapCamera(1)
                              AL_CreateCamera(AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Static,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(1),1
                              texture object AL_SpotShadowMap(AL_SpotShadowUpdate).Object,0,AL_SpotShadowMap(AL_SpotShadowUpdate).Static
                              AL_CurrentShadowMapImage(1)=AL_SpotShadowMap(AL_SpotShadowUpdate).Static
                              AL_CurrentShadowMapSize(1)=AL_SpotShadowMap(AL_SpotShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(1)=tShadowFormat*2
                           endif
                           AL_SpotShadowMap(AL_SpotShadowUpdate).UpdateMode=3
                           AL_SpotShadowMap(AL_SpotShadowUpdate).LastUpdate=0
                           position camera AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z
                           Rotate camera AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z
                           set camera range AL_ShadowMapCamera(1),(AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef*0.005),AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef
                           set camera fov AL_ShadowMapCamera(1),AL_SpotShadowMap(AL_SpotShadowUpdate).FOVf
                           tSyncMask=2^AL_ShadowMapCamera(1)
                        endif
                        position camera AL_ShadowMapCamera(2),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z
                        Rotate camera AL_ShadowMapCamera(2),AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z
                        set camera range AL_ShadowMapCamera(2),(AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef*0.005),AL_SpotShadowMap(AL_SpotShadowUpdate).Rangef
                        set camera fov AL_ShadowMapCamera(2),AL_SpotShadowMap(AL_SpotShadowUpdate).FOVf
                        position object AL_ShadowMapObject(0),AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Positionf.z
                        Rotate object AL_ShadowMapObject(0),AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.x,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.y,AL_SpotShadowMap(AL_SpotShadowUpdate).Anglef.z
                        if tShadowLod=4
                           set effect technique AL_ShadowMapEffect(0),"Vsm"
                           set effect technique AL_ShadowMapEffect(1),"Vsm"
                           set effect technique AL_ShadowMapEffect(4),"Vsm"
                        else
                           set effect technique AL_ShadowMapEffect(0),"Evsm"
                           set effect technique AL_ShadowMapEffect(1),"Evsm"
                           set effect technique AL_ShadowMapEffect(4),"Evsm"
                        endif
                        show object AL_SpotShadowMap(AL_SpotShadowUpdate).Object:exclude object off AL_SpotShadowMap(AL_SpotShadowUpdate).Object
                        for o=0 to AL_ObjectAutoUpdateCount
                           tObjectNum=AL_ObjectAutoUpdate(o)-1
                           if AL_Object(tObjectNum).MaskShadow>0 and AL_Object(tObjectNum).DynamicTimer>0
                              set object mask AL_Object(tObjectNum).Number,2^AL_ShadowMapCamera(2)
                           endif
                        next o
                        if AL_SpotLight(tLightNum).ShadowQuality=1
                           sync mask tSyncMask+(2^AL_ShadowMapCamera(2))+(2^AL_ShadowMapCamera(5))
                        else
                           sync mask tSyncMask+(2^AL_ShadowMapCamera(2))+(2^AL_ShadowMapCamera(4))+(2^AL_ShadowMapCamera(5))
                        endif
                        fastsync
                        for o=0 to AL_ObjectAutoUpdateCount
                            tObjectNum=AL_ObjectAutoUpdate(o)-1
                            if AL_Object(tObjectNum).MaskShadow>0 and AL_Object(tObjectNum).DynamicTimer>0
                               set object mask AL_Object(tObjectNum).Number,AL_Object(tObjectNum).Mask
                            endif
                        next o
                        hide object AL_SpotShadowMap(AL_SpotShadowUpdate).Object:exclude object on AL_SpotShadowMap(AL_SpotShadowUpdate).Object
                     endif
                     if AL_SpotLight(tLightNum).ShadowQuality=2 then hide object AL_ShadowMapObject(1):exclude object on AL_ShadowMapObject(1)
                     AL_SpotShadowMap(AL_SpotShadowUpdate).Update=0
                  endif
               endif
            endif
            inc AL_SpotShadowUpdate
            inc AL_ShadowMapNum
         until AL_ShadowMapNum>AL_SpotShadowMapCount-1 or AL_ShadowMapUpdate>AL_MaxSpotShadowUpdate-1
      endif
   endif
endfunction
`--------------
` Spot Light In Use
`--------------
function AL_SpotLightInUse(iLight)
   if AL_Enabled=1 and iLight>-1 and iLight<AL_SpotLightCount+1
      if AL_SpotLight(iLight).InUse=1
         Exitfunction 1
      endif
   endif
endfunction 0
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
type AL_PointShadowMapData
   InUse as boolean
   Number as integer
   ShadowMap1 as integer
   ShadowMap2 as integer
   ShadowMap3 as integer
   ShadowSize as float
   UpdateTimer as float
   DynamicTimer as integer
   Position as AL_Vec3Integer
   Positionf as AL_Vec3Float
   Angle as AL_Vec3Integer
   Range as integer
   Rangef as float
   UpdateFromTerrainP as AL_Vec2Float
   UpdateFromTerrainN as AL_Vec2Float
endtype
type AL_PointShadowSideData
   Object as integer
   Static as integer
   Update as integer
   UpdateSide as boolean
   Format as integer
   LastUpdate as integer
   UpdateMode as integer
   Angle as AL_Vec3Integer
endtype
`--------------
` Create Point Light
`--------------
function PointLight_Create(iSpecular as boolean,iSubSurface as boolean,iShadow as integer,iSize as integer)
   local tLight as integer
   tLight=-1
   if AL_Enabled=1
      for l=0 to AL_PointLightCount
         if AL_PointLight(l).InUse=0 then tLight=l
      next l
      if tLight=-1
         array insert at bottom AL_PointLight()
         inc AL_PointLightCount
         tLight=AL_PointLightCount
      endif
      AL_PointLight(tLight).InUse=1
      AL_PointLight(tLight).Object=find free object()
      AL_PointLight(tLight).Effect=find free effect()
      AL_PointLight(tLight).Lensflare=-1
      load object AL_Directory+"Resources/Point.dbo",AL_PointLight(tLight).Object
      if iShadow=0
         load effect AL_Directory+"Lighting/Point/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_PointLight(tLight).Effect,0,1
         AL_PointLight(tLight).Shadowed=0
      else
         load effect AL_Directory+"Lighting/Point Shadow/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_PointLight(tLight).Effect,0,1
         AL_PointLight(tLight).Shadowed=1
      endif
      set object effect AL_PointLight(tLight).Object,AL_PointLight(tLight).Effect
      texture object AL_PointLight(tLight).Object,0,AL_Image(1)
      texture object AL_PointLight(tLight).Object,1,AL_Image(2)
      texture object AL_PointLight(tLight).Object,2,AL_Image(0)
      set object mask AL_PointLight(tLight).Object,2^AL_Camera(7)
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_PointLight(tLight).Effect,"ViewSize",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
      set effect constant vector AL_PointLight(tLight).Effect,"FogRange",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
      set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
      set effect constant vector AL_PointLight(tLight).Effect,"HeightFog",AL_Vector4(1)
      set effect constant vector AL_PointLight(tLight).Effect,"HeightFogColor",AL_Vector4(2)
      PointLight_SetVisible(tLight,1)
      PointLight_SetPosition(tLight,0,0,0)
      PointLight_SetAngle(tLight,0,0,0)
      PointLight_SetColor(tLight,255,255,255)
      PointLight_SetRange(tLight,500)
      PointLight_SetAttenuation(tLight,2)
      PointLight_SetSpecularPower(tLight,128)
      PointLight_SetShadow(tLight,iShadow,iSize,0)
   endif
endfunction tLight
`--------------
` Create Point Light Cube
`--------------
function PointLight_CreateCubeLight(iSpecular as boolean,iSubSurface as boolean,iShadow as integer,iSize as integer)
   local tLight as integer
   tLight=-1
   if AL_Enabled=1
      for l=0 to AL_PointLightCount
         if AL_PointLight(l).InUse=0 then tLight=l
      next l
      if tLight=-1
         array insert at bottom AL_PointLight()
         inc AL_PointLightCount
         tLight=AL_PointLightCount
      endif
      AL_PointLight(tLight).InUse=1
      AL_PointLight(tLight).Object=find free object()
      AL_PointLight(tLight).Effect=find free effect()
      AL_PointLight(tLight).Lensflare=-1
      load object AL_Directory+"Resources/Point.dbo",AL_PointLight(tLight).Object
      if iShadow=0
         load effect AL_Directory+"Lighting/Cube/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_PointLight(tLight).Effect,0,1
         AL_PointLight(tLight).Shadowed=0
      else
         load effect AL_Directory+"Lighting/Cube Shadow/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_PointLight(tLight).Effect,0,1
         AL_PointLight(tLight).Shadowed=1
      endif
      set object effect AL_PointLight(tLight).Object,AL_PointLight(tLight).Effect
      texture object AL_PointLight(tLight).Object,0,AL_Image(1)
      texture object AL_PointLight(tLight).Object,1,AL_Image(2)
      texture object AL_PointLight(tLight).Object,2,AL_Image(0)
      set object mask AL_PointLight(tLight).Object,2^AL_Camera(7)
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_PointLight(tLight).Effect,"ViewSize",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
      set effect constant vector AL_PointLight(tLight).Effect,"FogRange",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
      set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
      set effect constant vector AL_PointLight(tLight).Effect,"HeightFog",AL_Vector4(1)
      set effect constant vector AL_PointLight(tLight).Effect,"HeightFogColor",AL_Vector4(2)
      PointLight_SetVisible(tLight,1)
      PointLight_SetPosition(tLight,0,0,0)
      PointLight_SetAngle(tLight,0,0,0)
      PointLight_SetColor(tLight,255,255,255)
      PointLight_SetRange(tLight,500)
      PointLight_SetAttenuation(tLight,4)
      PointLight_SetSpecularPower(tLight,40)
      PointLight_SetShadow(tLight,iShadow,iSize,0)
   endif
endfunction tLight
`--------------
` Delete Point Light
`--------------
function PointLight_Delete(iLight as integer)
   if AL_PointLightInUse(iLight)=1
      PointLight_SetVisible(iLight,0)
      delete effect AL_PointLight(iLight).Effect
      delete object AL_PointLight(iLight).Object
      AL_PointLight(iLight).InUse=0
      AL_PointLight(iLight).Effect=0
      AL_PointLight(iLight).Object=0
   endif
endfunction
`--------------
` Set Point Light Visible
`--------------
function PointLight_SetVisible(iLight as integer,iVisible as boolean)
   if AL_PointLightInUse(iLight)=1
      if AL_PointLight(iLight).Visible=1 and iVisible<>1
         AL_PointLight(iLight).Visible=0
         for l=0 to AL_PointLightVisibleCount
             if AL_PointLightVisible(l)=iLight+1
                array delete element AL_PointLightVisible(),l
                dec AL_PointLightVisibleCount
                exit
             endif
         next l
         exclude object on  AL_PointLight(iLight).Object
         hide object  AL_PointLight(iLight).Object
         if AL_PointLight(iLight).ShadowMap>0
            set effect technique AL_PointLight(iLight).Effect,"Point"
            AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).InUse=0
            AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).Number=0
            AL_PointLight(iLight).ShadowMap=0
         endif
         if AL_PointLight(iLight).LensFlare>-1 then LensFlare_SetVisible(AL_PointLight(iLight).LensFlare,0)
      endif
      if AL_PointLight(iLight).Visible=0 and iVisible<>0
         AL_PointLight(iLight).Visible=1
         tAddVisible as integer
         tAddVisible=0
         for l=0 to AL_PointLightVisibleCount
             if AL_PointLightVisible(l)=iLight+1
                tAddVisible=1
                exit
             endif
         next l
         if tAddVisible=0
            array insert at bottom AL_PointLightVisible()
            inc AL_PointLightVisibleCount
            AL_PointLightVisible(AL_PointLightVisibleCount)=iLight+1
         endif
         exclude object off AL_PointLight(iLight).Object
         show object AL_PointLight(iLight).Object
         if AL_PointLight(iLight).LensFlare>-1 then LensFlare_SetVisible(AL_PointLight(iLight).LensFlare,1)
      endif
   endif
endfunction
`--------------
` Set Point Light Cube Texture
`--------------
function PointLight_SetCubeTexture(iLight as integer,iTexture as integer)
   if AL_PointLightInUse(iLight)=1
      if iTexture>0
         if image exist(iTexture)=1
            AL_PointLight(iLight).Texture=iTexture
            texture object AL_PointLight(iLight).Object,6,AL_PointLight(iLight).Texture
         endif
      endif
   endif
endfunction
`--------------
` Set Point Light Position
`--------------
function PointLight_SetPosition(iLight as integer,iPosX as float,iPosY as float,iPosZ as float)
   if AL_PointLightInUse(iLight)=1
      AL_PointLight(iLight).Position.x=iPosX
      AL_PointLight(iLight).Position.y=iPosY
      AL_PointLight(iLight).Position.z=iPosZ
      set vector4 AL_Vector4(1),AL_PointLight(iLight).Position.x,AL_PointLight(iLight).Position.y,AL_PointLight(iLight).Position.z,0
      set effect constant vector AL_PointLight(iLight).Effect,"LightPosition",AL_Vector4(1)
      position object AL_PointLight(iLight).Object,AL_PointLight(iLight).Position.x,AL_PointLight(iLight).Position.y,AL_PointLight(iLight).Position.z
      if AL_PointLight(iLight).LensFlare>-1 then LensFlare_SetPosition(AL_PointLight(iLight).LensFlare,AL_PointLight(iLight).Position.x,AL_PointLight(iLight).Position.y,AL_PointLight(iLight).Position.z)
   endif
endfunction
`--------------
` Set Point Light Angle
`--------------
function PointLight_SetAngle(iLight as integer,iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_PointLightInUse(iLight)=1
      AL_PointLight(iLight).Angle.x=wrapvalue(iAngleX)
      AL_PointLight(iLight).Angle.y=wrapvalue(iAngleY)
      AL_PointLight(iLight).Angle.z=wrapvalue(iAngleZ)
      rotate x matrix4 AL_Matrix(1),wrapvalue(AL_PointLight(iLight).Angle.x)/57.295
      rotate y matrix4 AL_Matrix(2),wrapvalue(AL_PointLight(iLight).Angle.y)/57.295
      rotate z matrix4 AL_Matrix(3),wrapvalue(AL_PointLight(iLight).Angle.z)/57.295
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set effect constant matrix AL_PointLight(iLight).Effect,"LightAngle",AL_Matrix(4)
   endif
endfunction
`--------------
` Color Point Light
`--------------
function PointLight_SetColor(iLight as integer,iRed as float,iGreen as float,iBlue as float)
   if AL_PointLightInUse(iLight)=1
      AL_PointLight(iLight).Color.x=iRed
      AL_PointLight(iLight).Color.y=iGreen
      AL_PointLight(iLight).Color.z=iBlue
      set vector4 AL_Vector4(1),(AL_PointLight(iLight).Color.x/255)*AL_Ambient(5),(AL_PointLight(iLight).Color.y/255)*AL_Ambient(6),(AL_PointLight(iLight).Color.z/255)*AL_Ambient(7),0
      set effect constant vector AL_PointLight(iLight).Effect,"LightColor",AL_Vector4(1)
      if AL_PointLight(iLight).LensFlare>-1 then LensFlare_SetColor(AL_PointLight(iLight).LensFlare,AL_PointLight(iLight).Color.x,AL_PointLight(iLight).Color.y,AL_PointLight(iLight).Color.z)
   endif
endfunction
`--------------
` Set point Light Range
`--------------
function PointLight_SetRange(iLight as integer,iRange as float)
   if AL_PointLightInUse(iLight)=1
      AL_PointLight(iLight).Range=iRange
      scale object AL_PointLight(iLight).Object,AL_PointLight(iLight).Range,AL_PointLight(iLight).Range,AL_PointLight(iLight).Range
      set effect constant float AL_PointLight(iLight).Effect,"LightRange",AL_PointLight(iLight).Range
   endif
endfunction
`--------------
` Set Point Light Attenuation
`--------------
function PointLight_SetAttenuation(iLight as integer,iAttenuation as float)
   if AL_PointLightInUse(iLight)=1
      AL_PointLight(iLight).Attenuation=iAttenuation
      set effect constant float AL_PointLight(iLight).Effect,"AttenuationPower",AL_PointLight(iLight).Attenuation
   endif
endfunction
`--------------
` Set Point Light Specular Power
`--------------
function PointLight_SetSpecularPower(iLight as integer,iSpecular as float)
   if AL_PointLightInUse(iLight)=1
      set effect constant float AL_PointLight(iLight).Effect,"SpecularPower",iSpecular
   endif
endfunction
`--------------
` Set Point Light Shadow
`--------------
function PointLight_SetShadow(iLight as integer,iShadow as integer,iSize as float,iShadowRange as float)
   if AL_PointLightInUse(iLight)=1
      if AL_PointLight(iLight).Shadowed=1
         if AL_PointLight(iLight).ShadowQuality<>iShadow or AL_PointLight(iLight).ShadowSize<>iSize
            AL_PointLight(iLight).ShadowQuality=iShadow
            AL_PointLight(iLight).ShadowSize=iSize
            AL_PointLight(iLight).ShadowRange=AL_ShadowRange
            if iShadowRange>0 then AL_PointLight(iLight).ShadowRange=iShadowRange
            if AL_PointLight(iLight).ShadowMap>0
               set effect technique AL_PointLight(iLight).Effect,"Point"
               AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).InUse=0
               AL_PointShadowMap(AL_PointLight(iLight).ShadowMap).Number=0
               AL_PointLight(iLight).ShadowMap=0
            endif
         endif
      endif
   endif
endfunction
`--------------
` Get Point Light Visible
`--------------
function PointLight_GetVisible(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Visible
endfunction tReturn
`--------------
` Get Point Light Position  X
`--------------
function PointLight_GetPositionX(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Position.x
endfunction tReturn
`--------------
` Get Point Light Position  Y
`--------------
function PointLight_GetPositionY(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Position.y
endfunction tReturn
`--------------
` Get Point Light Position  Z
`--------------
function PointLight_GetPositionZ(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Position.z
endfunction tReturn
`--------------
` Get Point Light Angle X
`--------------
function PointLight_GetAngleX(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Angle.x
endfunction tReturn
`--------------
` Get Point Light Angle Y
`--------------
function PointLight_GetAngleY(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Angle.y
endfunction tReturn
`--------------
` Get Point Light Angle Z
`--------------
function PointLight_GetAngleZ(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Angle.z
endfunction tReturn
`--------------
` Get Point Light Color Red
`--------------
function PointLight_GetColorRed(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Color.x
endfunction tReturn
`--------------
` Get Point Light Color Green
`--------------
function PointLight_GetColorGreen(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Color.y
endfunction tReturn
`--------------
` Get Point Light Color Blue
`--------------
function PointLight_GetColorBlue(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Color.z
endfunction tReturn
`--------------
` Get Point Light Range
`--------------
function PointLight_GetRange(iLight as integer)
   local tReturn as float
   if AL_PointLightInUse(iLight)=1 then tReturn=AL_PointLight(iLight).Range
endfunction tReturn
`--------------
` Update Shadowed Point Lights
`--------------
function PointLight_Update()
   if AL_Enabled=1
      local tLightNum as integer
      local tFarDist as integer
      local tShadowMap as integer
      local tShadowMapSide as integer
      tCull as integer
      tFarDist=0
      tShadowMap=0
      for d=1 to AL_PointShadowMapCount
         if AL_PointShadowMap(d).InUse=1
            tLightNum=AL_PointShadowMap(d).Number
            set vector3 AL_Vector3(1),AL_CameraPos.x-AL_PointLight(tLightNum).Position.x,AL_CameraPos.y-AL_PointLight(tLightNum).Position.y,AL_CameraPos.z-AL_PointLight(tLightNum).Position.z
            if length vector3(AL_Vector3(1))>tFarDist
               tFarDist=length vector3(AL_Vector3(1))
               tShadowMap=d
            endif
         else
            tFarDist=9999999
            tShadowMap=d
            exit
         endif
      next d
      for d=1 to AL_PointShadowMapCount
         if AL_PointShadowMap(d).DynamicTimer>0
            dec AL_PointShadowMap(d).DynamicTimer
         endif
      next d
      for l=0 to AL_PointLightVisibleCount
          tLightNum=AL_PointLightVisible(l)-1
          if AL_PointLight(tLightNum).ShadowQuality>0
             tCull=2
             AL_LdX(3)=AL_PointLight(tLightNum).Position.x
             AL_LdY(3)=AL_PointLight(tLightNum).Position.y
             AL_LdZ(3)=AL_PointLight(tLightNum).Position.z
             set vector3 AL_Vector3(1),AL_CameraPos.x-AL_LdX(3),AL_CameraPos.y-AL_LdY(3),AL_CameraPos.z-AL_LdZ(3)
             AL_PointLight(tLightNum).Distance=length vector3(AL_Vector3(1))
             if AL_PointLight(tLightNum).Distance<AL_PointLight(tLightNum).ShadowRange+AL_PointLight(tLightNum).Range
                tCull=AL_GetSphereInFrustum(0,AL_Ldx(3),AL_Ldy(3),AL_Ldz(3),AL_PointLight(tLightNum).Range)
             endif
             if tCull<>AL_PointLight(tLightNum).CullMode
                AL_PointLight(tLightNum).CullMode=tCull
                if tCull=1 or tCull=2
                   exclude object off AL_PointLight(tLightNum).Object
                else
                  exclude object on AL_PointLight(tLightNum).Object
                endif
                if tCull=0 or tCull=2
                   if AL_PointLight(tLightNum).ShadowMap>0
                     set effect technique AL_PointLight(tLightNum).Effect,"Point"
                      AL_PointShadowMap(AL_PointLight(tLightNum).ShadowMap).InUse=0
                      AL_PointShadowMap(AL_PointLight(tLightNum).ShadowMap).Number=0
                      AL_PointLight(tLightNum).ShadowMap=0
                   endif
                endif
             endif
             if tCull=1
               if AL_PointLight(tLightNum).Distance<tFarDist and AL_PointLight(tLightNum).ShadowMap=0
                  if AL_PointShadowMap(tShadowMap).InUse>0
                     set effect technique AL_PointLight(AL_PointShadowMap(tShadowMap).Number).Effect,"Point"
                     AL_PointLight(AL_PointShadowMap(tShadowMap).Number).ShadowMap=0
                  endif
                  AL_PointLight(tLightNum).ShadowMap=tShadowMap
                  AL_PointShadowMap(tShadowMap).InUse=1
                  AL_PointShadowMap(tShadowMap).Number=tLightNum
                  AL_PointShadowMap(tShadowMap).UpdateTimer=0
                  tShadowMapSide=tShadowMap*6
                  for s=0 to 5
                     AL_PointShadowSide(tShadowMapSide+s).Update=1
                  next s
                  exit
               endif
            endif
         endif
      next l
   endif
endfunction
`--------------
` Render Point Light Shadow Maps
`--------------
function PointLight_Render()
   if AL_Enabled=1
      local tLightNum as integer
      local tObjectNum as integer
      local tShadowMap as integer
      local tShadowMapSide as integer
      local tIndex as integer
      local tDifference as integer
      local tShadowLod as integer
      local tShadowFormat as integer
      local tSyncMask as integer
      local tShadowCamera as integer
      local tShadowOffset as float
      local tFov as float
      local dim tSideUpdated(2) as integer
      if AL_PointShadowMapCount>0
         AL_ShadowMapNum=0
         AL_ShadowMapUpdate=0
         repeat
         if AL_PointShadowUpdate>AL_PointShadowMapCount then AL_PointShadowUpdate=1
            if AL_PointShadowMap(AL_PointShadowUpdate).InUse=1
               tLightNum=AL_PointShadowMap(AL_PointShadowUpdate).Number
               tShadowMapSide=AL_PointShadowUpdate*6
               tShadowLod=4
               if AL_PointLight(tLightNum).Distance<AL_PointLight(tLightNum).Range*6 then tShadowLod=2
               if AL_PointLight(tLightNum).Distance<AL_PointLight(tLightNum).Range*3 then tShadowLod=1
               tShadowFormat=113
               if tShadowLod=4 then tShadowFormat=34
               tDifference=0
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.x<>int(AL_PointLight(tLightNum).Position.x/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.y<>int(AL_PointLight(tLightNum).Position.y/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Position.z<>int(AL_PointLight(tLightNum).Position.z/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).Range<>int(AL_PointLight(tLightNum).Range/AL_WorldSize) then tDifference=1
               if AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize<>int(AL_PointLight(tLightNum).ShadowSize/tShadowLod) then tDifference=1
               if tDifference=1
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.x=int(AL_PointLight(tLightNum).Position.x/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.y=int(AL_PointLight(tLightNum).Position.y/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Position.z=int(AL_PointLight(tLightNum).Position.z/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).Range=int(AL_PointLight(tLightNum).Range/AL_WorldSize)
                  AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize=int(AL_PointLight(tLightNum).ShadowSize/tShadowLod)
                  AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x=AL_PointLight(tLightNum).Position.x
                  AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y=AL_PointLight(tLightNum).Position.y
                  AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z=AL_PointLight(tLightNum).Position.z
                  AL_PointShadowMap(AL_PointShadowUpdate).Rangef=AL_PointLight(tLightNum).Range
                  AL_PointShadowMap(AL_PointShadowUpdate).DynamicTimer=AL_PointDynamicTimer
                  for s=0 to 5
                     AL_PointShadowSide(tShadowMapSide+s).Update=1
                  next s
               endif
               Terrain_LightPointUpdate(AL_PointShadowUpdate)
               if AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer>0
                  dec AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer
                  if AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer<0 then AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer=0
               endif
               if AL_PointShadowSide(tShadowMapSide+0).Update>0 or AL_PointShadowSide(tShadowMapSide+1).Update>0 or AL_PointShadowSide(tShadowMapSide+2).Update>0 or AL_PointShadowSide(tShadowMapSide+3).Update>0 or AL_PointShadowSide(tShadowMapSide+4).Update>0 or AL_PointShadowSide(tShadowMapSide+5).Update>0
                  if AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer=0
                     AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer=AL_PointLight(tLightNum).Distance-AL_PointLight(tLightNum).Range
                     if AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer<0 then AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer=0
                     AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer=(AL_PointShadowMap(AL_PointShadowUpdate).UpdateTimer/AL_ShadowRange)*10.0
                     inc AL_ShadowMapUpdate
                     Terrain_LightCull(AL_PointLight(tLightNum).Position.x,AL_PointLight(tLightNum).Position.y,AL_PointLight(tLightNum).Position.z,AL_PointLight(tLightNum).Range*2)
                     tShadowOffset=1-(14.0/AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize)
                     tFov=90+(55.0-(55.0*tShadowOffset))
                     set vector4 AL_Vector4(1),tShadowOffset*0.5,tShadowOffset,0,0
                     set effect constant vector AL_PointLight(tLightNum).Effect,"ShadowSize",AL_Vector4(1)
                     set vector4 AL_Vector4(1),(0.25-(0.25*tShadowOffset))+(0.5/(AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2)),(0.5-(0.5*tShadowOffset))+(0.5/AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize),0.5+(0.25-(0.25*tShadowOffset))+(0.5/(AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2)),(0.5-(0.5*tShadowOffset))+(0.5/AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize)
                     set effect constant vector AL_PointLight(tLightNum).Effect,"ShadowOffset",AL_Vector4(1)
                     set vector4 AL_Vector4(1),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z,0
                     set vector4 AL_Vector4(2),AL_ShadowBias,-AL_ShadowBias,0,0
                     set effect constant vector AL_PointLight(tLightNum).Effect,"ShadowPosition",AL_Vector4(1)
                     if tShadowLod=4
                        set effect technique AL_PointLight(tLightNum).Effect,"PointVsm"
                     else
                        set effect technique AL_PointLight(tLightNum).Effect,"PointEvsm"
                     endif
                     for e=0 to AL_EffectCount
                        set effect constant vector AL_Effect(e).Number,"ShadowPosition",AL_Vector4(1)
                        set effect constant float AL_Effect(e).Number,"LightRange",AL_PointLight(tLightNum).Range
                        set effect constant vector AL_Effect(e).Number,"ShadowBias",AL_Vector4(2)
                        if tShadowLod=4
                           set effect technique AL_Effect(e).Number,"DepthMapVsm"
                        else
                           set effect technique AL_Effect(e).Number,"DepthMapEvsm"
                        endif
                     next e
                     set vector4 AL_Vector4(1),0.5/(AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2),0.5/AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,0,0
                     set effect constant vector AL_ShadowMapEffect(2),"ViewSize",AL_Vector4(1)
                     set effect constant vector AL_ShadowMapEffect(3),"ViewSize",AL_Vector4(1)
                     set effect constant vector AL_ShadowMapEffect(5),"ViewSize",AL_Vector4(1)
                     set effect constant vector AL_ShadowMapEffect(6),"ViewSize",AL_Vector4(1)
                     set vector4 AL_Vector4(1),AL_ShadowOffset/(AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2),AL_ShadowOffset/(AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize),0,0
                     set effect constant vector AL_ShadowMapEffect(4),"BlurOffset",AL_Vector4(1)
                     set effect constant vector AL_ShadowMapEffect(5),"BlurOffset",AL_Vector4(1)
                     set effect constant vector AL_ShadowMapEffect(6),"BlurOffset",AL_Vector4(1)
                     for s=0 to 5
                        if AL_PointShadowMap(AL_PointShadowUpdate).DynamicTimer>0
                           AL_PointShadowSide(tShadowMapSide+s).Update=1
                        endif
                        if AL_PointShadowSide(tShadowMapSide+s).Object=0
                           AL_PointShadowSide(tShadowMapSide+s).Object=find free object()
                           make object plain AL_PointShadowSide(tShadowMapSide+s).Object,2,2,1
                           if s=0 or s=2 or s=4 then set object effect AL_PointShadowSide(tShadowMapSide+s).Object,AL_ShadowMapEffect(2)
                           if s=1 or s=3 or s=5 then set object effect AL_PointShadowSide(tShadowMapSide+s).Object,AL_ShadowMapEffect(3)
                           hide object AL_PointShadowSide(tShadowMapSide+s).Object
                           exclude object on AL_PointShadowSide(tShadowMapSide+s).Object
                        endif
                        AL_PointShadowSide(tShadowMapSide+s).UpdateSide=0
                        if AL_PointShadowSide(tShadowMapSide+s).Update>0 then AL_PointShadowSide(tShadowMapSide+s).UpdateSide=1
                     next s
                     tSideUpdated(0)=0
                     tSideUpdated(1)=2
                     tSideUpdated(2)=4
                     if AL_PointShadowSide(tShadowMapSide+1).Update>0 then tSideUpdated(0)=1
                     if AL_PointShadowSide(tShadowMapSide+3).Update>0 then tSideUpdated(1)=3
                     if AL_PointShadowSide(tShadowMapSide+5).Update>0 then tSideUpdated(2)=5
                     for s=0 to 5
                        tIndex=floor(s/2)
                        if AL_PointShadowSide(tShadowMapSide+s).Update=1
                           AL_PointShadowSide(tShadowMapSide+s).UpdateMode=1
                           AL_PointShadowSide(tShadowMapSide+s).LastUpdate=1
                           if tIndex=0
                              if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1=find free image()
                              tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1
                           endif
                           if tIndex=1
                              if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2=find free image()
                              tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2
                           endif
                           if tIndex=2
                              if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3=find free image()
                              tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3
                           endif
                           if AL_PointLight(tLightNum).ShadowQuality=1
                              if AL_CurrentShadowMapImage(1)<>tShadowMap or AL_CurrentShadowMapSize(1)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat
                                 delete camera AL_ShadowMapCamera(1)
                                 AL_CreateCamera(AL_ShadowMapCamera(1),tShadowMap,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                 set camera aspect AL_ShadowMapCamera(1),1
                                 texture object AL_PointLight(tLightNum).Object,tIndex+3,tShadowMap
                                 AL_CurrentShadowMapImage(1)=tShadowMap
                                 AL_CurrentShadowMapSize(1)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                 AL_CurrentShadowMapFormat(1)=tShadowFormat
                              endif
                          else
                              if AL_CurrentShadowMapImage(5)<>tShadowMap or AL_CurrentShadowMapSize(5)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(5)<>tShadowFormat
                                 delete camera AL_ShadowMapCamera(5)
                                 AL_CreateCamera(AL_ShadowMapCamera(5),tShadowMap,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                 set camera aspect AL_ShadowMapCamera(5),1
                                 set camera range AL_ShadowMapCamera(5),1,2
                                 texture object AL_PointLight(tLightNum).Object,tIndex+3,tShadowMap
                                 AL_CurrentShadowMapImage(5)=tShadowMap
                                 AL_CurrentShadowMapSize(5)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                 AL_CurrentShadowMapFormat(5)=tShadowFormat
                              endif
                              if AL_CurrentShadowMapImage(1)<>AL_ShadowMapTexture(1) or AL_CurrentShadowMapSize(1)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat
                                 if AL_ShadowMapTexture(1)=0 then AL_ShadowMapTexture(1)=find free image()
                                 delete camera AL_ShadowMapCamera(1)
                                 AL_CreateCamera(AL_ShadowMapCamera(1),AL_ShadowMapTexture(1),AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                 set camera aspect AL_ShadowMapCamera(1),1
                                 AL_CurrentShadowMapImage(1)=AL_ShadowMapTexture(1)
                                 AL_CurrentShadowMapSize(1)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                 AL_CurrentShadowMapFormat(1)=tShadowFormat
                                 AL_ShadowMapObjectTexture(1)=-1
                              endif
                              if AL_ShadowMapObjectTexture(1)<>AL_ShadowMapTexture(1)
                                 AL_ShadowMapObjectTexture(1)=AL_ShadowMapTexture(1)
                                 texture object AL_ShadowMapObject(1),0,AL_ShadowMapTexture(1)
                              endif
                              show object AL_ShadowMapObject(1):exclude object off AL_ShadowMapObject(1)
                           endif
                           set current camera AL_ShadowMapCamera(1)
                           position camera AL_ShadowMapCamera(1),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z
                           Rotate camera AL_ShadowMapCamera(1),AL_PointShadowSide(tShadowMapSide+s).Angle.x,AL_PointShadowSide(tShadowMapSide+s).Angle.y,0
                           set camera range AL_ShadowMapCamera(1),(AL_PointShadowMap(AL_PointShadowUpdate).Rangef*0.005),AL_PointShadowMap(AL_PointShadowUpdate).Rangef
                           set camera fov AL_ShadowMapCamera(1),tFov
                           if s=0 or s=2 or s=4
                              set camera view AL_ShadowMapCamera(1),0,0,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                           else
                              set camera view AL_ShadowMapCamera(1),AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,0,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                           endif
                           position object AL_ShadowMapObject(0),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z
                           Rotate object AL_ShadowMapObject(0),AL_PointShadowSide(tShadowMapSide+s).Angle.x,AL_PointShadowSide(tShadowMapSide+s).Angle.y,0
                           if tShadowLod=4
                              set effect technique AL_ShadowMapEffect(0),"Vsm"
                              set effect technique AL_ShadowMapEffect(4),"Vsm"
                           else
                              set effect technique AL_ShadowMapEffect(0),"Evsm"
                              set effect technique AL_ShadowMapEffect(4),"Evsm"
                           endif
                           if AL_PointLight(tLightNum).ShadowQuality=1
                              sync mask 2^AL_ShadowMapCamera(1)
                           else
                              if s=0 or s=2 or s=4
                                 sync mask 2^AL_ShadowMapCamera(1)
                              else
                                 sync mask (2^AL_ShadowMapCamera(1))+(2^AL_ShadowMapCamera(5))
                              endif
                           endif
                           fastsync
                           if AL_PointLight(tLightNum).ShadowQuality=2 then hide object AL_ShadowMapObject(1):exclude object on AL_ShadowMapObject(1)
                        endif
                        if AL_PointShadowSide(tShadowMapSide+s).Update=2
                           AL_PointShadowSide(tShadowMapSide+s).UpdateMode=2
                           if s=tSideUpdated(tIndex)
                              if tIndex=0
                                 tTexture=AL_ShadowMapTexture(5)
                                 AL_ShadowMapTexture(5)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1
                                 AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1=tTexture
                                 if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1=find free image()
                                 tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap1
                              endif
                              if tIndex=1
                                 tTexture=AL_ShadowMapTexture(5)
                                 AL_ShadowMapTexture(5)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2
                                 AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2=tTexture
                                 if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2=find free image()
                                 tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap2
                              endif
                              if tIndex=2
                                 tTexture=AL_ShadowMapTexture(5)
                                 AL_ShadowMapTexture(5)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3
                                 AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3=tTexture
                                 if AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3=0 then AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3=find free image()
                                 tShadowMap=AL_PointShadowMap(AL_PointShadowUpdate).ShadowMap3
                              endif
                              if AL_CurrentShadowMapImage(5)<>tShadowMap or AL_CurrentShadowMapSize(5)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(5)<>tShadowFormat*2
                                 delete camera AL_ShadowMapCamera(5)
                                 AL_CreateCamera(AL_ShadowMapCamera(5),tShadowMap,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                 set camera aspect AL_ShadowMapCamera(5),1
                                 set camera range AL_ShadowMapCamera(5),1,2
                                 texture object AL_PointLight(tLightNum).Object,tIndex+3,tShadowMap
                                 AL_CurrentShadowMapImage(5)=tShadowMap
                                 AL_CurrentShadowMapSize(5)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                 AL_CurrentShadowMapFormat(5)=tShadowFormat*2
                              endif
                              if AL_PointLight(tLightNum).ShadowQuality=2
                                 if AL_CurrentShadowMapImage(4)<>AL_ShadowMapTexture(4) or AL_CurrentShadowMapSize(4)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(4)<>tShadowFormat*2
                                    if AL_ShadowMapTexture(4)=0 then AL_ShadowMapTexture(4)=find free image()
                                    delete camera AL_ShadowMapCamera(4)
                                    AL_CreateCamera(AL_ShadowMapCamera(4),AL_ShadowMapTexture(4),AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*2,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                    set camera aspect AL_ShadowMapCamera(4),1
                                    set camera range AL_ShadowMapCamera(4),1,2
                                    texture object AL_ShadowMapObject(2),0,AL_ShadowMapTexture(4)
                                    texture object AL_ShadowMapObject(3),0,AL_ShadowMapTexture(4)
                                    AL_CurrentShadowMapImage(4)=AL_ShadowMapTexture(4)
                                    AL_CurrentShadowMapSize(4)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                    AL_CurrentShadowMapFormat(4)=tShadowFormat*2
                                 endif
                              endif
                           endif
                           tShadowCamera=2
                           if s=1 or s=3 or s=5 then tShadowCamera=3
                           if AL_CurrentShadowMapImage(tShadowCamera)<>AL_ShadowMapTexture(tShadowCamera) or AL_CurrentShadowMapSize(tShadowCamera)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(tShadowCamera)<>tShadowFormat*2
                              if AL_ShadowMapTexture(tShadowCamera)=0 then AL_ShadowMapTexture(tShadowCamera)=find free image()
                              delete camera AL_ShadowMapCamera(tShadowCamera)
                              AL_CreateCamera(AL_ShadowMapCamera(tShadowCamera),AL_ShadowMapTexture(tShadowCamera),AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                              set camera aspect AL_ShadowMapCamera(tShadowCamera),1
                              AL_CurrentShadowMapImage(tShadowCamera)=AL_ShadowMapTexture(tShadowCamera)
                              AL_CurrentShadowMapSize(tShadowCamera)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                              AL_CurrentShadowMapFormat(tShadowCamera)=tShadowFormat*2
                           endif
                           tSyncMask=0
                           if AL_PointShadowSide(tShadowMapSide+s).LastUpdate=1
                              AL_PointShadowSide(tShadowMapSide+s).UpdateMode=3
                              AL_PointShadowSide(tShadowMapSide+s).LastUpdate=0
                              if AL_CurrentShadowMapImage(1)<>AL_PointShadowSide(tShadowMapSide+s).Static or AL_CurrentShadowMapSize(1)<>AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize or AL_CurrentShadowMapFormat(1)<>tShadowFormat*2
                                 if AL_PointShadowSide(tShadowMapSide+s).Static=0 then AL_PointShadowSide(tShadowMapSide+s).Static=find free image()
                                 delete camera AL_ShadowMapCamera(1)
                                 AL_CreateCamera(AL_ShadowMapCamera(1),AL_PointShadowSide(tShadowMapSide+s).Static,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize,tShadowFormat)
                                 set camera aspect AL_ShadowMapCamera(1),1
                                 texture object AL_PointShadowSide(tShadowMapSide+s).Object,0,AL_PointShadowSide(tShadowMapSide+s).Static
                                 AL_CurrentShadowMapImage(1)=AL_PointShadowSide(tShadowMapSide+s).Static
                                 AL_CurrentShadowMapSize(1)=AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize*AL_PointShadowMap(AL_PointShadowUpdate).ShadowSize
                                 AL_CurrentShadowMapFormat(1)=tShadowFormat*2
                                 AL_ShadowMapObjectTexture(1)=-1
                              endif
                              position camera AL_ShadowMapCamera(1),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z
                              Rotate camera AL_ShadowMapCamera(1),AL_PointShadowSide(tShadowMapSide+s).Angle.x,AL_PointShadowSide(tShadowMapSide+s).Angle.y,0
                              set camera range AL_ShadowMapCamera(1),(AL_PointShadowMap(AL_PointShadowUpdate).Rangef*0.005),AL_PointShadowMap(AL_PointShadowUpdate).Rangef
                              set camera fov AL_ShadowMapCamera(1),tFov
                              tSyncMask=2^AL_ShadowMapCamera(1)
                           endif
                           set current camera AL_ShadowMapCamera(tShadowCamera)
                           position camera AL_ShadowMapCamera(tShadowCamera),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z
                           Rotate camera AL_ShadowMapCamera(tShadowCamera),AL_PointShadowSide(tShadowMapSide+s).Angle.x,AL_PointShadowSide(tShadowMapSide+s).Angle.y,0
                           set camera range AL_ShadowMapCamera(tShadowCamera),(AL_PointShadowMap(AL_PointShadowUpdate).Rangef*0.005),AL_PointShadowMap(AL_PointShadowUpdate).Rangef
                           set camera fov AL_ShadowMapCamera(tShadowCamera),tFov
                           position object AL_ShadowMapObject(0),AL_PointShadowMap(AL_PointShadowUpdate).Positionf.x,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.y,AL_PointShadowMap(AL_PointShadowUpdate).Positionf.z
                           Rotate object AL_ShadowMapObject(0),AL_PointShadowSide(tShadowMapSide+s).Angle.x,AL_PointShadowSide(tShadowMapSide+s).Angle.y,0
                           if tShadowLod=4
                              set effect technique AL_ShadowMapEffect(0),"Vsm"
                              set effect technique AL_ShadowMapEffect(2),"Vsm"
                              set effect technique AL_ShadowMapEffect(3),"Vsm"
                           else
                              set effect technique AL_ShadowMapEffect(0),"Evsm"
                              set effect technique AL_ShadowMapEffect(2),"Evsm"
                              set effect technique AL_ShadowMapEffect(3),"Evsm"
                           endif
                           for o=0 to AL_ObjectAutoUpdateCount
                              tObjectNum=AL_ObjectAutoUpdate(o)-1
                              if AL_Object(tObjectNum).MaskShadow>0 and AL_Object(tObjectNum).DynamicTimer>0
                                 set object mask AL_Object(tObjectNum).Number,(2^AL_ShadowMapCamera(tShadowCamera))
                              endif
                           next o
                           if s=tSideUpdated(tIndex)
                              if AL_PointShadowSide(tShadowMapSide+(tIndex*2)).UpdateSide=1
                                 show object AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object
                                 exclude object off AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object
                                 texture object AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object,1,AL_ShadowMapTexture(2)
                                 if AL_PointLight(tLightNum).ShadowQuality=1
                                    set object mask AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object,2^AL_ShadowMapCamera(5)
                                 else
                                    set object mask AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object,2^AL_ShadowMapCamera(4)
                                    show object AL_ShadowMapObject(2)
                                    exclude object off AL_ShadowMapObject(2)
                                    set effect technique AL_ShadowMapEffect(5),"Evsm"
                                 endif
                              else
                                 show object AL_ShadowMapObject(2)
                                 exclude object off AL_ShadowMapObject(2)
                                 texture object AL_ShadowMapObject(2),1,AL_ShadowMapTexture(5)
                                 set effect technique AL_ShadowMapEffect(5),"DepthMap"
                              endif
                              if AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).UpdateSide=1
                                 show object AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object
                                 exclude object off AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object
                                 texture object AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object,1,AL_ShadowMapTexture(3)
                                 if AL_PointLight(tLightNum).ShadowQuality=1
                                    set object mask AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object,2^AL_ShadowMapCamera(5)
                                 else
                                    set object mask AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object,2^AL_ShadowMapCamera(4)
                                    show object AL_ShadowMapObject(3)
                                    exclude object off AL_ShadowMapObject(3)
                                    set effect technique AL_ShadowMapEffect(6),"Evsm"
                                 endif
                              else
                                 show object AL_ShadowMapObject(3)
                                 exclude object off AL_ShadowMapObject(3)
                                 texture object AL_ShadowMapObject(3),1,AL_ShadowMapTexture(5)
                                 set effect technique AL_ShadowMapEffect(6),"DepthMap"
                              endif
                              if AL_PointLight(tLightNum).ShadowQuality=1
                                 sync mask tSyncMask+(2^AL_ShadowMapCamera(tShadowCamera))+(2^AL_ShadowMapCamera(5))
                              else
                                 sync mask tSyncMask+(2^AL_ShadowMapCamera(tShadowCamera))+(2^AL_ShadowMapCamera(4))+(2^AL_ShadowMapCamera(5))
                              endif
                           else
                              sync mask tSyncMask+(2^AL_ShadowMapCamera(tShadowCamera))
                           endif
                           fastsync
                           for o=0 to AL_ObjectAutoUpdateCount
                               tObjectNum=AL_ObjectAutoUpdate(o)-1
                               if AL_Object(tObjectNum).MaskShadow>0 and AL_Object(tObjectNum).DynamicTimer>0
                                  set object mask AL_Object(tObjectNum).Number,AL_Object(tObjectNum).Mask
                               endif
                           next o
                           if s=tSideUpdated(tIndex)
                              hide object AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object:exclude object on AL_PointShadowSide(tShadowMapSide+(tIndex*2)).Object
                              hide object AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object:exclude object on AL_PointShadowSide(tShadowMapSide+(tIndex*2)+1).Object
                              hide object AL_ShadowMapObject(2):exclude object on AL_ShadowMapObject(2)
                              hide object AL_ShadowMapObject(3):exclude object on AL_ShadowMapObject(3)
                           endif
                        endif
                        AL_PointShadowSide(tShadowMapSide+s).Update=0
                     next s
                  endif
               endif
            endif
            inc AL_PointShadowUpdate
            inc AL_ShadowMapNum
         until AL_ShadowMapNum>AL_PointShadowMapCount-1 or AL_ShadowMapUpdate>AL_MaxPointShadowUpdate-1
      endif
   endif
   undim tSideUpdated()
endfunction
`--------------
` Point Light In Use
`--------------
function AL_PointLightInUse(iLight)
   if AL_Enabled=1 and iLight>-1 and iLight<AL_PointLightCount+1
      if AL_PointLight(iLight).InUse=1
         Exitfunction 1
      endif
   endif
endfunction 0
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`--------------
` Create Directional Light
`--------------
function DirLight_Create(iSpecular as boolean,iSubSurface as boolean,iShadow as integer,iSize as integer)
   if AL_Enabled=1
      if AL_DirLightInUse=0
         global AL_DirLightInUse as boolean
         global AL_DirLightVisible as boolean
         global AL_DirLightEffect as integer
         global AL_DirLightShadowQuality as integer
         global AL_DirLightShadowSize as float
         global AL_DirLightAngle as AL_Vec3Float
         global AL_DirLightDirection as AL_Vec3Float
         global AL_DirLightColor as AL_Vec3Float
         global AL_DirLightRange as float
         AL_DirLightInUse=1
         AL_DirLightEffect=find free effect()
         AL_DirLightLensFlare.x=-1
         load effect AL_Directory+"Lighting/Directional/"+str$(iSpecular)+str$(iSubSurface)+".fx",AL_DirLightEffect,0,1
         texture object AL_DirLightObject,0,AL_Image(1)
         texture object AL_DirLightObject,1,AL_Image(2)
         if AL_SSAOEnabled=0 then texture object AL_DirLightObject,6,AL_Image(7)
         if AL_SSAOEnabled=1 then texture object AL_DirLightObject,6,AL_Image(6)
         set object effect AL_DirLightObject,AL_DirLightEffect
         set object mask AL_DirLightObject,2^AL_Camera(7)
         set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
         set effect constant vector AL_DirLightEffect,"ViewSize",AL_Vector4(1)
         set vector4 AL_Vector4(1),AL_Ambient(1)/255,AL_Ambient(2)/255,AL_Ambient(3)/255,0
         set effect constant vector AL_DirLightEffect,"AmbientColor",AL_Vector4(1)
         if AL_Ambient(4)>0 then texture object AL_DirLightObject,2,AL_Ambient(4)
         if AL_Ambient(4)=0 then set effect technique AL_DirLightEffect,"AmbientDirectional"
         if AL_Ambient(4)>0 then set effect technique AL_DirLightEffect,"AmbientCubeDirectional"
         set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
         set vector4 AL_Vector4(2),AL_Fog(3)/255,AL_Fog(4)/255,AL_Fog(5)/255,0
         set vector4 AL_Vector4(3),AL_Fog(6)/255,AL_Fog(7)/255,AL_Fog(8)/255,0
         set effect constant vector AL_DirLightEffect,"FogRange",AL_Vector4(1)
         set effect constant vector AL_DirLightEffect,"FogColor1",AL_Vector4(2)
         set effect constant vector AL_DirLightEffect,"FogColor2",AL_Vector4(3)
         set vector4 AL_Vector4(1),AL_Fog(9),AL_Fog(10),AL_Fog(11),0
         set vector4 AL_Vector4(2),AL_Fog(14)/255,AL_Fog(15)/255,AL_Fog(16)/255,AL_Fog(17)/255
         set effect constant vector AL_DirLightEffect,"HeightFog",AL_Vector4(1)
         set effect constant vector AL_DirLightEffect,"HeightFogColor",AL_Vector4(2)
         DirLight_SetVisible(1)
         DirLight_SetAngle(45,45,0)
         DirLight_SetRange(5000)
         DirLight_SetColor(255,255,255)
         DirLight_SetSpecularPower(256)
         DirLight_SetShadow(iShadow,iSize)
      endif
   endif
endfunction
`--------------
` Delete Directional Light
`--------------
function DirLight_Delete()
   if AL_Enabled=1
      if AL_DirLightInUse=1
         DirLight_SetVisible(0)
         delete effect AL_DirLightEffect
         hide object AL_DirLightObject
         exclude object on AL_DirLightEffect
         AL_DirLightInUse=0
         AL_DirLightEffect=0
         AL_DirLightObject=0
      endif
   endif
endfunction
`--------------
` Set Directional Light Visible
`--------------
function DirLight_SetVisible(iVisible as boolean)
   if AL_Enabled=1 and AL_DirLightInUse=1
      if AL_DirLightVisible=1 and iVisible<>1
         AL_DirLightVisible=0
         exclude object on AL_DirLightObject
         hide object AL_DirLightObject
         exclude object off AL_AmbientObject
         show object AL_AmbientObject
         if AL_DirLightLensFlare.x>-1 then LensFlare_SetVisible(AL_DirLightLensFlare.x,0)
      endif
      if AL_DirLightVisible=0 and iVisible<>0
         AL_DirLightVisible=1
         exclude object off AL_DirLightObject
         show object AL_DirLightObject
         exclude object on AL_AmbientObject
         hide object AL_AmbientObject
         if AL_DirLightLensFlare.x>-1 then LensFlare_SetVisible(AL_DirLightLensFlare.x,1)
      endif
   endif
endfunction
`--------------
` Set Directional Light Angle
`--------------
function DirLight_SetAngle(iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         AL_DirLightAngle.x=wrapvalue(iAngleX)
         AL_DirLightAngle.y=wrapvalue(iAngleY)
         AL_DirLightAngle.z=wrapvalue(iAngleZ)
         rotate x matrix4 AL_Matrix(1),wrapvalue(iAngleX)/57.295
         rotate y matrix4 AL_Matrix(2),wrapvalue(iAngleY)/57.295
         rotate z matrix4 AL_Matrix(3),wrapvalue(iAngleZ)/57.295
         multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
         multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
         set vector3 AL_Vector3(1),0,0,1
         transform normals vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(4)
         AL_DirLightDirection.x=x vector3(AL_Vector3(1))
         AL_DirLightDirection.y=y vector3(AL_Vector3(1))
         AL_DirLightDirection.z=z vector3(AL_Vector3(1))
         set vector4 AL_Vector4(1),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
         set effect constant vector AL_DirLightEffect,"LightDirection",AL_Vector4(1)
         for e=0 to AL_EffectCount:set effect constant vector AL_Effect(e).Number,"LightDirection",AL_Vector4(1):next e
         for e=0 to AL_AlphaEffectLightingCount:set effect constant vector AL_AlphaEffect(AL_AlphaEffectLighting(e)-1).Number,"LightDirection",AL_Vector4(1):next e
         if AL_ScatteringEnabled>0 then set effect constant vector AL_PostProcessingEffect(3),"LightDirection",AL_Vector4(1)
         if AL_CloudsEnable=1
            set effect constant vector AL_CloudsEffect(1),"LightDir2",AL_Vector4(1)
            set vector4 AL_Vector4(1),AL_DirLightDirection.x*0.75,(AL_DirLightDirection.y*0.5)-0.5,AL_DirLightDirection.z*0.75,0
            set effect constant vector AL_CloudsEffect(1),"LightDir1",AL_Vector4(1)
         endif
         if Water_Enabled=1
            FogArea_SetCaustics(Water_AreaFog,0,AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,Water_TileSize*30)
            set vector4 AL_Vector4(2),(AL_DirLightColor.x/400)*(1-abs(AL_DirLightDirection.y)),(AL_DirLightColor.y/400)*(1-abs(AL_DirLightDirection.y)),(AL_DirLightColor.z/400)*(1-abs(AL_DirLightDirection.y)),0
            for e=0 to Water_Shaders:set effect constant vector Water_Effect(e),"SpecularColor",AL_Vector4(2):next e
         endif
      endif
   endif
endfunction
`--------------
` Set Directional Light Color
`--------------
function DirLight_SetColor(iRed as float,iGreen as float,iBlue as float)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         AL_DirLightColor.x=iRed
         AL_DirLightColor.y=iGreen
         AL_DirLightColor.z=iBlue
         set vector4 AL_Vector4(1),(AL_DirLightColor.x/255)*AL_Ambient(5),(AL_DirLightColor.y/255)*AL_Ambient(6),(AL_DirLightColor.Z/255)*AL_Ambient(7),0
         set effect constant vector AL_DirLightEffect,"LightColor",AL_Vector4(1)
         set vector4 AL_Vector4(1),AL_DirLightColor.x/255,AL_DirLightColor.y/255,AL_DirLightColor.Z/255,0
         for e=0 to AL_EffectCount:set effect constant vector AL_Effect(e).Number,"LightColor",AL_Vector4(1):next e
         for e=0 to AL_AlphaEffectLightingCount:set effect constant vector AL_AlphaEffect(AL_AlphaEffectLighting(e)-1).Number,"LightColor",AL_Vector4(1):next e
         if AL_DirLightLensFlare.x>-1 and AL_TimeOfDayEnabled=0 then LensFlare_SetColor(AL_DirLightLensFlare.x,AL_DirLightColor.x,AL_DirLightColor.y,AL_DirLightColor.z)
         if Water_Enabled=1
            set vector4 AL_Vector4(2),(AL_DirLightColor.x/400)*(1-abs(AL_DirLightDirection.y)),(AL_DirLightColor.y/400)*(1-abs(AL_DirLightDirection.y)),(AL_DirLightColor.z/400)*(1-abs(AL_DirLightDirection.y)),0
            for e=0 to Water_Shaders:set effect constant vector Water_Effect(e),"SpecularColor",AL_Vector4(2):next e
         endif
      endif
   endif
endfunction
`--------------
` Set Directional Light Range
`--------------
function DirLight_SetRange(iRange as float)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         AL_DirLightRange=iRange
         set vector4 AL_Vector4(1),(((AL_DirLightRange/2.5)/2.5)/2.5)/2.22,((AL_DirLightRange/2.5)/2.5)/2.22,(AL_DirLightRange/2.5)/2.22,AL_DirLightRange/2.22
         set effect constant vector AL_DirLightEffect,"LightRange",AL_Vector4(1)
         set vector4 AL_Vector4(1),((AL_DirLightRange/2.5)/2.5)/2.5,(AL_DirLightRange/2.5)/2.5,AL_DirLightRange/2.5,AL_DirLightRange
         set effect constant vector AL_DirLightEffect,"ShadowRange",AL_Vector4(1)
      endif
   endif
endfunction
`--------------
` Set Directional Light Specular Power
`--------------
function DirLight_SetSpecularPower(iSpecular as float)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         set effect constant float AL_DirLightEffect,"SpecularPower",iSpecular
      endif
   endif
endfunction
`--------------
` Set Directional Light Shadow
`--------------
function DirLight_SetShadow(iShadow as integer,iSize as integer)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         AL_DirLightShadowQuality=iShadow
         AL_DirLightShadowSize=iSize
         set effect constant float AL_DirLightEffect,"ShadowSize",(0.5/AL_DirLightShadowSize)+0.5
         if AL_DirLightShadowQuality=0
            if AL_Ambient(4)=0 then set effect technique AL_DirLightEffect,"AmbientDirectional"
            if AL_Ambient(4)>0 then set effect technique AL_DirLightEffect,"AmbientCubeDirectional"
         else
            if AL_Ambient(4)=0 then set effect technique AL_DirLightEffect,"AmbientDirectionalShadow"
            if AL_Ambient(4)>0 then set effect technique AL_DirLightEffect,"AmbientCubeDirectionalShadow"
         endif
      endif
   endif
endfunction
`--------------
` Get Directional Light Visible
`--------------
function DirLight_GetVisible()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightVisible
endfunction tReturn
`--------------
` Get Directional Light Angle X
`--------------
function DirLight_GetAngleX()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightAngle.x
endfunction tReturn
`--------------
` Get Directional Light Angle Y
`--------------
function DirLight_GetAngleY()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightAngle.y
endfunction tReturn
`--------------
` Get Directional Light Angle Z
`--------------
function DirLight_GetAngleZ()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightAngle.z
endfunction tReturn
`--------------
` Get Directional Light Color Red
`--------------
function DirLight_GetColorRed()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightColor.x
endfunction tReturn
`--------------
` Get Directional Light Color Green
`--------------
function DirLight_GetColorGreen()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightColor.y
endfunction tReturn
`--------------
` Get Directional Light Color Blue
`--------------
function DirLight_GetColorBlue()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightColor.z
endfunction tReturn
`--------------
` Get Directional Light Range
`--------------
function DirLight_GetRange()
   local tReturn as float
   if AL_Enabled=1 and AL_DirLightInUse=1 then tReturn=AL_DirLightRange
endfunction tReturn
`--------------
` Render Directional Light
`--------------
function DirLight_Render(iSplit as float,iRange as float)
   local tCPosition as AL_Vec3Float
   local tPosition as AL_Vec3Float
   local tStrSplit as string
   local tCamera as integer
   tStrSplit=str$(iSplit)
   tCamera=iSplit+5
   if iSplit=4 then tCamera=8
   if AL_CurrentShadowMapSize(6)<>AL_DirLightShadowSize
      local tCameras as integer
      tCameras=8
      if AL_DirLightShadowQuality=2 then tCameras=11
       for s=6 to tCameras
         if AL_ShadowMapTexture(s)=0 then AL_ShadowMapTexture(s)=find free image()
         delete camera AL_ShadowMapCamera(s)
         if s=8 or s=11
            AL_CreateCamera(AL_ShadowMapCamera(s),AL_ShadowMapTexture(s),AL_DirLightShadowSize,AL_DirLightShadowSize,36)
         else
            AL_CreateCamera(AL_ShadowMapCamera(s),AL_ShadowMapTexture(s),AL_DirLightShadowSize,AL_DirLightShadowSize,113)
         endif
         set camera aspect AL_ShadowMapCamera(s),1
      next s
      set camera range AL_ShadowMapCamera(9),1,2
      set camera range AL_ShadowMapCamera(10),1,2
      set camera range AL_ShadowMapCamera(11),1,2
      if AL_DirLightShadowQuality=1
         texture object AL_DirLightObject,3,AL_ShadowMapTexture(6)
         texture object AL_DirLightObject,4,AL_ShadowMapTexture(7)
         texture object AL_DirLightObject,5,AL_ShadowMapTexture(8)
      else
         texture object AL_ShadowMapObject(4),0,AL_ShadowMapTexture(6)
         texture object AL_ShadowMapObject(5),0,AL_ShadowMapTexture(7)
         texture object AL_ShadowMapObject(6),0,AL_ShadowMapTexture(8)
         texture object AL_DirLightObject,3,AL_ShadowMapTexture(9)
         texture object AL_DirLightObject,4,AL_ShadowMapTexture(10)
         texture object AL_DirLightObject,5,AL_ShadowMapTexture(11)
      endif
      AL_CurrentShadowMapSize(6)=AL_DirLightShadowSize
   endif
   tCPosition.x=AL_CameraPos.x+(AL_CameraDir.x*(iRange/(2+tan(AL_CameraData(3))*0.2)))
   tCPosition.y=AL_CameraPos.y+(AL_CameraDir.y*(iRange/(2+tan(AL_CameraData(3))*0.2)))
   tCPosition.z=AL_CameraPos.z+(AL_CameraDir.z*(iRange/(2+tan(AL_CameraData(3))*0.2)))
   set vector3 AL_Vector3(4),int(tCPosition.x/(iRange*0.05))*(iRange*0.05),int(tCPosition.y/(iRange*0.05))*(iRange*0.05),int(tCPosition.z/(iRange*0.05))*(iRange*0.05)
   tPosition.x=x Vector3(AL_Vector3(4))-(AL_DirLightDirection.x*AL_CameraData(2))
   tPosition.y=y Vector3(AL_Vector3(4))-(AL_DirLightDirection.y*AL_CameraData(2))
   tPosition.z=z Vector3(AL_Vector3(4))-(AL_DirLightDirection.z*AL_CameraData(2))
   set vector3 AL_Vector3(1),0,0,0
   set vector3 AL_Vector3(2),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z
   set vector3 AL_Vector3(3),0,1,0
   build lookat lhmatrix4 AL_Matrix(1),AL_Vector3(1),AL_Vector3(2),AL_Vector3(3)
   translate matrix4 AL_Matrix(2),-tPosition.x,-tPosition.y,-tPosition.z
   multiply matrix4 AL_Matrix(2),AL_Matrix(2),AL_Matrix(1)
   build ortho lhmatrix4 AL_Matrix(3),iRange,iRange,(AL_CameraData(2)+(AL_DirLightRange*2))*0.005,(AL_CameraData(2)+(AL_DirLightRange*2))
   multiply matrix4 AL_Matrix(4),AL_Matrix(2),AL_Matrix(3)
   position camera AL_ShadowMapCamera(tCamera),tPosition.x,tPosition.y,tPosition.z
   rotate camera AL_ShadowMapCamera(tCamera),AL_DirLightAngle.x,AL_DirLightAngle.y,AL_DirLightAngle.z
   set camera range AL_ShadowMapCamera(tCamera),(AL_CameraData(2)+(AL_DirLightRange*2))*0.005,(AL_CameraData(2)+(AL_DirLightRange*2))
   set camera fov AL_ShadowMapCamera(tCamera),(iRange/AL_CameraData(2))*55.0
   position object AL_ShadowMapObject(0),tCPosition.x,tCPosition.y,tCPosition.z
   rotate object AL_ShadowMapObject(0),AL_DirLightAngle.x,AL_DirLightAngle.y,AL_DirLightAngle.z
   set vector4 AL_Vector4(1),tCPosition.x,tCPosition.y,tCPosition.z,0
   set vector4 AL_Vector4(2),x Vector3(AL_Vector3(4))-(AL_DirLightDirection.x*(iRange/2)),y Vector3(AL_Vector3(4))-(AL_DirLightDirection.y*(iRange/2)),z Vector3(AL_Vector3(4))-(AL_DirLightDirection.z*(iRange/2)),0
   set vector4 AL_Vector4(3),AL_DirLightDirection.x,AL_DirLightDirection.y,AL_DirLightDirection.z,0
   set vector4 AL_Vector4(4),AL_ShadowBias,-AL_ShadowBias,0,0
   set effect constant vector AL_DirLightEffect,"LightPosition"+tStrSplit,AL_Vector4(1)
   set effect constant vector AL_DirLightEffect,"ShadowPosition"+tStrSplit,AL_Vector4(2)
   set effect constant matrix AL_DirLightEffect,"ShadowProjMatrix"+tStrSplit,AL_Matrix(4)
   for e=0 to AL_EffectCount
      set effect constant float AL_Effect(e).Number,"LightRange",iRange
      set effect constant vector AL_Effect(e).Number,"ShadowPosition",AL_Vector4(2)
      set effect constant vector AL_Effect(e).Number,"LightDirection",AL_Vector4(3)
      set effect constant matrix AL_Effect(e).Number,"OrthoProj",AL_Matrix(4)
      set effect constant vector AL_Effect(e).Number,"ShadowBias",AL_Vector4(4)
      if iSplit=1 or iSplit=2 then set effect technique AL_Effect(e).Number,"DepthMapDirectionalEvsm"
      if iSplit=3 then set effect technique AL_Effect(e).Number,"DepthMapDirectionalVsm"
      if iSplit=4 then set effect technique AL_Effect(e).Number,"DepthMapDirectionalVsmBa"
   next e
   set vector4 AL_Vector4(1),(AL_ShadowOffset/AL_DirLightShadowSize),(AL_ShadowOffset/AL_DirLightShadowSize),0,0
   set effect constant vector AL_ShadowMapEffect(4),"BlurOffset",AL_Vector4(1)
   Terrain_LightDirCull(iRange*2)
   if iSplit=1 or iSplit=2
      set effect technique AL_ShadowMapEffect(0),"Evsm"
      set effect technique AL_ShadowMapEffect(4),"Evsm"
   endif
   if iSplit=3
      set effect technique AL_ShadowMapEffect(0),"Vsm"
      set effect technique AL_ShadowMapEffect(4),"Vsm"
   endif
   if iSplit=4
      set effect technique AL_ShadowMapEffect(0),"VsmBa"
      set effect technique AL_ShadowMapEffect(4),"VsmBa"
   endif
   if AL_DirLightShadowQuality=1
      sync mask 2^AL_ShadowMapCamera(tCamera)
   else
      sync mask (2^AL_ShadowMapCamera(tCamera))+(2^AL_ShadowMapCamera(tCamera+3))
   endif
   fastsync
endfunction
`--------------
` Set Directional Light Power
`--------------
function DirLight_SetPower(iPower as float)
   if AL_Enabled=1
      if AL_DirLightInUse=1
         set effect constant float AL_DirLightEffect,"LightPower",iPower
      endif
   endif
endfunction
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`Post frame target data
type AL_FrameTargetData
   Object as integer
   Effect as integer
endtype
`Post render target data
type AL_RenderTargetData
   UpDate as integer
   Camera as integer
   Image as integer
   Object as integer
   Effect as integer
endtype
`--------------
` Post Processing SetUp
`--------------
function PostProcessing_SetUp(iRefraction as boolean,iDistortion as boolean,iSSAO as boolean,iScatter as boolean,iAntiAsling as boolean,iBloom as boolean,iDOF as boolean)
   if AL_Enabled=1
      global AL_RefractionEnabled as boolean
      global AL_DistortionEnabled as boolean
      global AL_SSAOEnabled as boolean
      global AL_ScatteringEnabled as integer
      global dim AL_PostProcessingObject(3) as integer
      global dim AL_PostProcessingEffect(3) as integer
      AL_DistortionEnabled=iDistortion
      AL_RefractionEnabled=iRefraction
      AL_SSAOEnabled=iSSAO
      AL_ScatteringEnabled=iScatter
   `Refraction (for water effects)
      if AL_RefractionEnabled=1
         AL_Camera(4)=find free camera()
         AL_Image(4)=find free image()
         AL_CreateCamera(AL_Camera(4),AL_Image(4),AL_ViewVec.x,AL_ViewVec.y,36)
         AL_PostProcessingObject(1)=find free object()
         make object plain AL_PostProcessingObject(1),2,2,1
         AL_PostProcessingEffect(1)=find free effect()
         load effect AL_Directory+"Post Processing/Fill Backdrop.fx",AL_PostProcessingEffect(1),0,1
         set object effect AL_PostProcessingObject(1),AL_PostProcessingEffect(1)
         texture object AL_PostProcessingObject(1),0,AL_Image(4)
         set object mask AL_PostProcessingObject(1),2^AL_Camera(9)
         set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
         set effect constant vector AL_PostProcessingEffect(1),"ViewSize",AL_Vector4(1)
         set effect constant vector AL_PostProcessingEffect(1),"ViewVec",AL_Vector4(1)
      endif
   `Distortion & SSAO & light scattering
      if AL_DistortionEnabled=1 or AL_SSAOEnabled=1 or AL_ScatteringEnabled=1
         if AL_SSAOEnabled=1
            AL_PostProcessingObject(2)=find free object()
            make object plain AL_PostProcessingObject(2),2,2,1
            AL_PostProcessingEffect(2)=find free effect()
            load effect AL_Directory+"Post Processing/SSAO.fx",AL_PostProcessingEffect(2),0
            texture object AL_PostProcessingObject(2),0,AL_Image(1)
            texture object AL_PostProcessingObject(2),1,AL_Image(2)
            texture object AL_PostProcessingObject(2),2,AL_Image(8)
            set object effect AL_PostProcessingObject(2),AL_PostProcessingEffect(2)
            set object mask AL_PostProcessingObject(2),2^AL_Camera(5)
            set vector4 AL_Vector4(1),0.5/(AL_PostViewVec.x/4),0.5/(AL_PostViewVec.y/4),1,1
            set effect constant vector AL_PostProcessingEffect(2),"ViewSize",AL_Vector4(1)
            set effect constant vector AL_PostProcessingEffect(2),"ViewVec",AL_Vector4(1)
            texture object AL_AmbientObject,3,AL_Image(6)
            if AL_DirLightInUse=1 then texture object AL_DirLightObject,6,AL_Image(6)
         endif
         AL_PostProcessingObject(3)=find free object()
         make object plain AL_PostProcessingObject(3),2,2,1
         AL_PostProcessingEffect(3)=find free effect()
         load effect AL_Directory+"Post Processing/Light Scattering.fx",AL_PostProcessingEffect(3),0
         texture object AL_PostProcessingObject(3),0,AL_Image(5)
         set object effect AL_PostProcessingObject(3),AL_PostProcessingEffect(3)
         set object mask AL_PostProcessingObject(3),2^AL_Camera(6)
         set vector4 AL_Vector4(1),0.5/(AL_PostViewVec.x/4),0.5/(AL_PostViewVec.y/4),1,1
         set effect constant vector AL_PostProcessingEffect(3),"ViewSize",AL_Vector4(1)
         set effect constant vector AL_PostProcessingEffect(3),"ViewVec",AL_Vector4(1)
      endif
   `Post Filters
      if iAntiAsling=1 or iBloom=1 or iDOF=1 or AL_MotionBlur=1 or AL_DistortionEnabled=1 or AL_ScatteringEnabled=1
         global AL_FrameRender as integer
         global AL_FinalComp as integer
         global AL_Brightpass=-1
         global AL_BloomV=-1
         global AL_BloomH=-1
         global AL_Luminance1=-1
         global AL_Luminance2=-1
         global AL_Luminance3=-1
         global AL_Blur=-1
         AL_FrameRender=PostFilter_SetUp(AL_ViewVec.x,AL_ViewVec.y,36)
         Effect_LockIdentifier(AL_Directory+"Post Processing/Final Comp.fx")
         Effect_SetIdentifier("EnableAA",iAntiAsling)
         Effect_SetIdentifier("EnableBloom",iBloom)
         Effect_SetIdentifier("EnableScatter",iScatter)
         Effect_SetIdentifier("EnableDOF",iDOF)
         Effect_SetIdentifier("EnableMotionBlur",AL_MotionBlur)
         Effect_SetIdentifier("EnableDistortion",iDistortion)
         Effect_UnLockIdentifier()
         AL_FinalComp=PostFilter_AddFrameTarget(AL_Directory+"Post Processing/Final Comp.fx")
         PostFilter_SetFrameTargetImage(AL_FinalComp,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
         if AL_DistortionEnabled=1 or AL_ScatteringEnabled=1
            PostFilter_SetFrameTargetImage(AL_FinalComp,1,AL_Image(2))
            PostFilter_SetFrameTargetImage(AL_FinalComp,2,AL_Image(6))
         endif
         if iBloom=1 or iAntiAsling=1 or iDOF=1
            Effect_LockIdentifier(AL_Directory+"Post Processing/BrightPass.fx")
            Effect_SetIdentifier("EnableBloom",iBloom)
            if iDOF=1 or iAntiAsling=1
               Effect_SetIdentifier("EnableEdge",1)
            else
               Effect_SetIdentifier("EnableEdge",0)
            endif
            Effect_UnLockIdentifier()
            AL_Brightpass=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/BrightPass.fx",AL_PostViewVec.x/4,AL_PostViewVec.y/4,36)
            PostFilter_SetRenderTargetImage(AL_Brightpass,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
            PostFilter_SetRenderTargetImage(AL_Brightpass,1,AL_Image(2))
            PostFilter_SetFrameTargetImage(AL_FinalComp,3,PostFilter_GetRenderTargetImage(AL_Brightpass))
         endif
         if iBloom=1
            AL_Luminance1=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Luminance1.fx",9,9,111)
            PostFilter_SetRenderTargetImage(AL_Luminance1,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
            AL_Luminance2=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Luminance2.fx",3,3,112)
            PostFilter_SetRenderTargetImage(AL_Luminance2,0,PostFilter_GetRenderTargetImage(AL_Luminance1))
            AL_Luminance3=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Luminance3.fx",1,1,111)
            PostFilter_SetRenderTargetImage(AL_Luminance3,0,PostFilter_GetRenderTargetImage(AL_Luminance2))
            PostFilter_SetRenderTargetImage(AL_Luminance2,1,PostFilter_GetRenderTargetImage(AL_Luminance3))
            PostFilter_SetRenderTargetImage(AL_Brightpass,2,PostFilter_GetRenderTargetImage(AL_Luminance3))
            PostFilter_SetFrameTargetImage(AL_FinalComp,5,PostFilter_GetRenderTargetImage(AL_Luminance3))
            AL_BloomH=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Bloom Horizontal.fx",AL_PostViewVec.x/8,AL_PostViewVec.y/8,36)
            PostFilter_SetRenderTargetImage(AL_BloomH,0,PostFilter_GetRenderTargetImage(AL_Brightpass))
            AL_BloomV=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Bloom Vertical.fx",AL_PostViewVec.x/8,AL_PostViewVec.y/8,36)
            PostFilter_SetRenderTargetImage(AL_BloomV,0,PostFilter_GetRenderTargetImage(AL_BloomH))
            PostFilter_SetFrameTargetImage(AL_FinalComp,4,PostFilter_GetRenderTargetImage(AL_BloomV))
         endif
         if iDOF=1 or AL_MotionBlur=1
            Effect_LockIdentifier(AL_Directory+"Post Processing/Blur.fx")
            Effect_SetIdentifier("EnableDOF",iDOF)
            Effect_SetIdentifier("EnableMotionBlur",AL_MotionBlur)
            Effect_UnLockIdentifier()
            AL_Blur=PostFilter_AddRenderTarget(AL_Directory+"Post Processing/Blur.fx",AL_PostViewVec.x/2,AL_PostViewVec.y/2,36)
            PostFilter_SetRenderTargetImage(AL_Blur,0,PostFilter_GetRenderTargetImage(AL_FrameRender))
            PostFilter_SetRenderTargetImage(AL_Blur,1,AL_Image(2))
            if iDOF=1 then PostFilter_SetRenderTargetImage(AL_Blur,2,PostFilter_GetRenderTargetImage(AL_Brightpass))
            PostFilter_SetFrameTargetImage(AL_FinalComp,6,PostFilter_GetRenderTargetImage(AL_Blur))
         endif
      endif
   endif
endfunction
`--------------
` Post Filter SetUp
`--------------
function PostFilter_SetUp(iWidth as integer,iHeight as integer,iD3DFormat as integer)
   if AL_PostFilterEnabled=0
      global AL_PostFilterEnabled as integer
      global AL_FrameTargetCount as integer
      global AL_RenderTargetCount as integer
      global dim AL_FrameTarget(1) as AL_FrameTargetData
      global dim AL_RenderTarget(1) as AL_RenderTargetData
      global AL_PostFilterViewVec as AL_Vec2Float
      AL_PostFilterEnabled=1
      AL_PostFilterViewVec.x=iWidth
      AL_PostFilterViewVec.y=iHeight
      AL_RenderTarget(0).UpDate=1
      AL_RenderTarget(0).Camera=find free camera()
      AL_RenderTarget(0).Image=find free image()
      make camera AL_RenderTarget(0).Camera
      if iD3DFormat=0 then set camera to image AL_RenderTarget(0).Camera,AL_RenderTarget(0).Image,iWidth,iHeight
      if iD3DFormat>0 then set camera to image AL_RenderTarget(0).Camera,AL_RenderTarget(0).Image,iWidth,iHeight,3,iD3DFormat
      backdrop off AL_RenderTarget(0).Camera
      inc AL_RenderTargetCount
   endif
endfunction 0
`--------------
` Post Filter Update
`--------------
function PostFilter_Update()
   if AL_PostFilterEnabled=1
      for t=0 to AL_FrameTargetCount-1
         position object AL_FrameTarget(t).Object,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         rotate object AL_FrameTarget(t).Object,AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      next t
   endif
   if AL_RefractionEnabled=1
      position object AL_PostProcessingObject(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      rotate object AL_PostProcessingObject(1),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
   endif
   if AL_SSAOEnabled=1
      position object AL_PostProcessingObject(2),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      rotate object AL_PostProcessingObject(2),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
   endif
   if AL_SSAOEnabled=1 or AL_ScatteringEnabled>0 or AL_DistortionEnabled=1
      position object AL_PostProcessingObject(3),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      rotate object AL_PostProcessingObject(3),AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
   endif
   if AL_ScatteringEnabled>0 and AL_SkyEnabled=1
      tViewDirScatter as float
      set vector3 AL_Vector3(1),AL_CameraDir.x-AL_DirLightDirection.X,AL_CameraDir.y-AL_DirLightDirection.y,AL_CameraDir.z-AL_DirLightDirection.Z
      tViewDirScatter=(dot product vector3(AL_Vector3(1),AL_Vector3(1))/2)-1
      if AL_SkyVisible=1 and  tViewDirScatter>0
         set vector4 AL_Vector4(1),(AL_DirLightColor.x/255)*tViewDirScatter,(AL_DirLightColor.y/255)*tViewDirScatter,(AL_DirLightColor.z/255)*tViewDirScatter,0
         set effect constant vector AL_FrameTarget(0).Effect,"ScatteringColor",AL_Vector4(1)
         AL_ScatteringEnabled=1
         show object AL_SkyObject(3)
      else
         AL_ScatteringEnabled=2
         set vector4 AL_Vector4(1),0,0,0,0
         set effect constant vector AL_FrameTarget(0).Effect,"ScatteringColor",AL_Vector4(1)
         hide object AL_SkyObject(3)
      endif
   endif
   if AL_SSAOEnabled=0 and AL_ScatteringEnabled=0 and AL_DistortionEnabled=1 then set effect technique AL_PostProcessingEffect(3),"Distortion"
   if AL_SSAOEnabled=0 and AL_ScatteringEnabled=1 then set effect technique AL_PostProcessingEffect(3),"LightScattering"
   if AL_SSAOEnabled=1 and AL_ScatteringEnabled<>1 then set effect technique AL_PostProcessingEffect(3),"SSAO"
   if AL_SSAOEnabled=1 and AL_ScatteringEnabled=1 then set effect technique AL_PostProcessingEffect(3),"SSAOLightScattering"
endfunction
`--------------
` Delete Post Filter
`--------------
function PostFilter_Delete()
   if AL_PostFilterEnabled=1
      for t=0 to AL_FrameTargetCount-1
         if object exist(AL_FrameTarget(t).Object)=1 then delete object AL_FrameTarget(t).Object
         if effect exist(AL_FrameTarget(t).Effect)=1 then delete effect AL_FrameTarget(t).Effect
      next t
      for t=0 to AL_RenderTargetCount-1
         if Camera exist(AL_RenderTarget(t).Camera)=1 then delete camera AL_RenderTarget(t).Camera
         if image exist(AL_RenderTarget(t).Image)=1 then delete image AL_RenderTarget(t).Image
         if object exist(AL_RenderTarget(t).Object)=1 then delete object AL_RenderTarget(t).Object
         if effect exist(AL_RenderTarget(t).Effect)=1 then delete effect AL_RenderTarget(t).Effect
      next t
      FilterEnabled=0
      undim AL_FrameTarget()
      undim AL_RenderTarget()
   endif
endfunction
`--------------
` Add Frame Target
`--------------
function PostFilter_AddFrameTarget(iEffect as string)
   local tReturn as integer
   if AL_PostFilterEnabled=1
      array insert at bottom AL_FrameTarget()
      AL_FrameTarget(AL_FrameTargetCount).Object=find free object()
      AL_FrameTarget(AL_FrameTargetCount).Effect=find free effect()
      make object plain  AL_FrameTarget(AL_FrameTargetCount).Object,2,2,1
      set object mask AL_FrameTarget(AL_FrameTargetCount).Object,2^0
      load effect iEffect,AL_FrameTarget(AL_FrameTargetCount).Effect,0,1
      set vector4 AL_Vector4(1),0.5/AL_PostFilterViewVec.x,0.5/AL_PostFilterViewVec.y,1,1
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewVec",AL_Vector4(1)
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize1",AL_Vector4(1)
      set vector4 AL_Vector4(1),0.5/(AL_PostViewVec.x/2),0.5/(AL_PostViewVec.y/2),1,1
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize2",AL_Vector4(1)
      set vector4 AL_Vector4(1),0.5/(AL_PostViewVec.x/8),0.5/(AL_PostViewVec.y/8),1,1
      set effect constant vector AL_FrameTarget(AL_FrameTargetCount).Effect,"ViewSize3",AL_Vector4(1)
      set object effect AL_FrameTarget(AL_FrameTargetCount).Object,AL_FrameTarget(AL_FrameTargetCount).Effect
      tReturn=AL_FrameTargetCount
      inc AL_FrameTargetCount
   endif
endfunction tReturn
`--------------
` Texture Frame Target
`--------------
function PostFilter_SetFrameTargetImage(iTarget as integer,iStage as integer,iImage as integer)
   if AL_PostFilterEnabled=1 and iTarget>-1 and iTarget<AL_FrameTargetCount
      texture object AL_FrameTarget(iTarget).Object,iStage,iImage
   endif
endfunction
`--------------
` Frame Target Effect
`--------------
function PostFilter_GetFrameTargetEffect(iTarget as integer)
   local tReturn as integer
   if AL_PostFilterEnabled=1 and iTarget>-1 and iTarget<AL_FrameTargetCount
      tReturn=AL_FrameTarget(iTarget).Effect
   endif
endfunction tReturn
`--------------
` Add Render Target
`--------------
function PostFilter_AddRenderTarget(iEffect as string,iWidth as integer,iHeight as integer,iD3DFormat as integer)
   local tReturn as integer
   if AL_PostFilterEnabled=1
      local tViewVec as AL_Vec2Float
      tViewVec.x=iWidth
      tViewVec.y=iHeight
      array insert at bottom AL_RenderTarget()
      AL_RenderTarget(AL_RenderTargetCount).UpDate=1
      AL_RenderTarget(AL_RenderTargetCount).Camera=find free camera()
      AL_RenderTarget(AL_RenderTargetCount).Image=find free image()
      AL_RenderTarget(AL_RenderTargetCount).Object=find free object()
      AL_RenderTarget(AL_RenderTargetCount).Effect=find free effect()
      make camera AL_RenderTarget(AL_RenderTargetCount).Camera
      if iD3DFormat=0 then set camera to image AL_RenderTarget(AL_RenderTargetCount).Camera,AL_RenderTarget(AL_RenderTargetCount).Image,iWidth,iHeight
      if iD3DFormat>0 then set camera to image AL_RenderTarget(AL_RenderTargetCount).Camera,AL_RenderTarget(AL_RenderTargetCount).Image,iWidth,iHeight,3,iD3DFormat
      backdrop off AL_RenderTarget(AL_RenderTargetCount).Camera
      set camera range AL_RenderTarget(AL_RenderTargetCount).Camera,1,10
      position camera AL_RenderTarget(AL_RenderTargetCount).Camera,0,-9999999999,0
      make object plain AL_RenderTarget(AL_RenderTargetCount).Object,2,2,1
      position object AL_RenderTarget(AL_RenderTargetCount).Object,0,-9999999999,0
      load effect iEffect,AL_RenderTarget(AL_RenderTargetCount).Effect,0,1
      set vector4 AL_Vector4(1),0.5/tViewVec.x,0.5/tViewVec.y,1,1
      set effect constant vector AL_RenderTarget(AL_RenderTargetCount).Effect,"ViewSize",AL_Vector4(1)
      set effect constant vector AL_RenderTarget(AL_RenderTargetCount).Effect,"ViewVec",AL_Vector4(1)
      set object effect AL_RenderTarget(AL_RenderTargetCount).Object,AL_RenderTarget(AL_RenderTargetCount).Effect
      set object mask AL_RenderTarget(AL_RenderTargetCount).Object,2^AL_RenderTarget(AL_RenderTargetCount).Camera
      tReturn=AL_RenderTargetCount
      inc AL_RenderTargetCount
   endif
endfunction tReturn
`--------------
` Render Target Enabled
`--------------
function PostFilter_SetRenderTargetEnabled(iTarget as integer,iEnable as boolean)
   AL_RenderTarget(iTarget).UpDate=iEnable
endfunction
`--------------
` Texture Render Target
`--------------
function PostFilter_SetRenderTargetImage(iTarget as integer,iStage as integer,iImage as integer)
   if AL_PostFilterEnabled=1 and iTarget>-1 and iTarget<AL_RenderTargetCount
      texture object AL_RenderTarget(iTarget).Object,iStage,iImage
   endif
endfunction
`--------------
` Render Target Image
`--------------
function PostFilter_GetRenderTargetImage(iTarget as integer)
   local tReturn as integer
   if AL_PostFilterEnabled=1 and iTarget>-1 and iTarget<AL_RenderTargetCount
      tReturn=AL_RenderTarget(iTarget).Image
   endif
endfunction tReturn
`--------------
` Render Target Effect
`--------------
function PostFilter_GetRenderTargetEffect(iTarget as integer)
   local tReturn as integer
   if AL_PostFilterEnabled=1 and iTarget>-1 and iTarget<AL_RenderTargetCount
      tReturn=AL_RenderTarget(iTarget).Effect
   endif
endfunction tReturn
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`--------------
` Make Sky
`--------------
function Sky_Create()
   if AL_SkyEnabled=0
      global AL_SkyEnabled as boolean
      global AL_SkyVisible as integer
      global AL_SkyDynamic as integer
      global AL_SkySunAngle as AL_Vec3Float
      global AL_SkySunDirection as AL_Vec3Float
      global AL_SkyPlanetAngle as AL_Vec3Float
      global dim AL_SkyObject(3) as integer
      global dim AL_SkyEffect(3) as integer
      AL_SkyEnabled=1
      AL_SkyVisible=1
      AL_SkyEffect(1)=find free effect()
      AL_SkyObject(1)=find free object()
      load effect AL_Directory+"Sky/Sky.fx",AL_SkyEffect(1),0,1
      make object sphere AL_SkyObject(1),-100,18,18
      offset limb AL_SkyObject(1),0,0,-50,0
      texture object AL_SkyObject(1),1,AL_Image(2)
      texture object AL_SkyObject(1),2,AL_Image(8)
      set object effect AL_SkyObject(1),AL_SkyEffect(1)
      set object mask AL_SkyObject(1),(2^AL_Camera(3))+(2^AL_Camera(7))
      set object transparency AL_SkyObject(1),2
      AL_SkyEffect(2)=find free effect()
      AL_SkyObject(2)=find free object()
      load effect AL_Directory+"Sky/Sky Geometry.fx",AL_SkyEffect(2),0,1
      make object sphere AL_SkyObject(2),-100,18,18
      set object effect AL_SkyObject(2),AL_SkyEffect(2)
      set object mask AL_SkyObject(2),2^AL_Camera(2)
      AL_SkyObject(3)=find free object()
      AL_SkyEffect(3)=find free effect()
      load effect AL_Directory+"Sky/Sky Scattering.fx",AL_SkyEffect(3),0,1
      make object sphere AL_SkyObject(3),-100,18,18
      texture object AL_SkyObject(3),0,AL_Image(2)
      set object effect AL_SkyObject(3),AL_SkyEffect(3)
      set object mask AL_SkyObject(3),2^AL_Camera(5)
      hide object AL_SkyObject(3)
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_SkyEffect(1),"ViewSize",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(1),"ViewVec",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(3),"ViewSize",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(3),"ViewVec",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_Fog(1),AL_Fog(12),AL_Fog(2),AL_Fog(13)
      set vector4 AL_Vector4(2),AL_Fog(3)/255,AL_Fog(4)/255,AL_Fog(5)/255,0
      set vector4 AL_Vector4(3),AL_Fog(6)/255,AL_Fog(7)/255,AL_Fog(8)/255,0
      set effect constant vector AL_SkyEffect(1),"FogRange",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(1),"FogColor1",AL_Vector4(2)
      set effect constant vector AL_SkyEffect(1),"FogColor2",AL_Vector4(3)
      set effect constant float AL_SkyEffect(1),"CameraRange",AL_CameraData(2)/1000
      set effect constant float AL_SkyEffect(3),"CameraRange",AL_CameraData(2)/1000
      Sky_SetAngle(0,0,0)
      Sky_SetColor1(120,120,120)
      Sky_SetColor2(120,120,120)
      Sky_SetSunColor(120,120,120)
      Sky_SetSunAngle(0,0,0,0.25)
      Sky_SetPlanetColor(120,120,120)
      Sky_SetPlanetAngle(0,0,0,0.01)
      Sky_SetCloudsDensity(2,0.75)
      Sky_SetCloudsScale(2,2)
      Sky_SetCloudsSpeed(0.005,0.005)
      Sky_SetCloudsColor(128,128,128)
      Sky_SetCloudsLightColor(128,128,128)
      Sky_SetDynamic(0)
   endif
endfunction
`--------------
` Update Sky
`--------------
function Sky_Update()
   if AL_SkyEnabled=1 and AL_SkyVisible=1
      position object AL_SkyObject(1),AL_CameraPos.x,AL_CameraPos.y+((AL_CameraData(2)*1.98)/2),AL_CameraPos.z
      scale object AL_SkyObject(1),AL_CameraData(2)*1.98,AL_CameraData(2)*1.98,AL_CameraData(2)*1.98
      position object AL_SkyObject(2),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      scale object AL_SkyObject(2),AL_CameraData(2)*1.98,AL_CameraData(2)*1.98,AL_CameraData(2)*1.98
      position object AL_SkyObject(3),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      scale object AL_SkyObject(3),AL_CameraData(2)*1.98,AL_CameraData(2)*1.98,AL_CameraData(2)*1.98
      if AL_TimeOfDayEnabled=1 and AL_CloudsEnable=1
         set vector4 AL_Vector4(1),(AL_CloudsHeight.x/AL_CameraData(2))*((AL_CloudsHeight.x-AL_CameraPos.y)/AL_CloudsHeight.x),AL_TimeOfDay(11,5).x,0,0
         set effect constant vector AL_SkyEffect(1),"Overcast",AL_Vector4(1)
         set effect constant vector AL_SkyEffect(3),"Overcast",AL_Vector4(1)
      endif
   endif
endfunction
`--------------
` Delete Sky
`--------------
function Sky_Delete()
   if AL_SkyEnabled=1
      if object exist(AL_SkyObject(1))=1 then delete object AL_SkyObject(1)
      if effect exist(AL_SkyEffect(1))=1 then delete effect AL_SkyEffect(1)
      if object exist(AL_SkyObject(2))=1 then delete object AL_SkyObject(2)
      if effect exist(AL_SkyEffect(2))=1 then delete effect AL_SkyEffect(2)
      if object exist(AL_SkyObject(3))=1 then delete object AL_SkyObject(2)
      if effect exist(AL_SkyEffect(3))=1 then delete effect AL_SkyEffect(3)
      AL_SkyEnabled=0
      AL_SkyVisible=0
   endif
endfunction
`--------------
` Set Sky Visible
`--------------
function Sky_SetVisible(iVisible as integer)
   if AL_SkyEnabled=1
      AL_SkyVisible=iVisible
      if iVisible=1
         show object AL_SkyObject(1)
         exclude object off AL_SkyObject(1)
         show object AL_SkyObject(2)
         exclude object off AL_SkyObject(2)
         show object AL_SkyObject(3)
         exclude object off AL_SkyObject(3)
         if AL_CloudsEnable=1
            show object AL_CloudsObject(2)
            exclude object off AL_CloudsObject(2)
            show object AL_CloudsObject(3)
            exclude object off AL_CloudsObject(3)
         endif
      else
         hide object AL_SkyObject(1)
         exclude object on AL_SkyObject(1)
         hide object AL_SkyObject(2)
         exclude object on AL_SkyObject(2)
         hide object AL_SkyObject(3)
         exclude object on AL_SkyObject(3)
         if AL_CloudsEnable=1
            hide object AL_CloudsObject(2)
            exclude object on AL_CloudsObject(2)
            hide object AL_CloudsObject(3)
            exclude object on AL_CloudsObject(3)
         endif
      endif
   endif
endfunction
`--------------
` Set Sky Dynamic
`--------------
function Sky_SetDynamic(iDynamic as integer)
   if AL_Enabled=1 then AL_SkyDynamic=iDynamic
   if AL_SkyEnabled=1 and AL_SkyDynamic=0 then set effect technique AL_SkyEffect(2),"WPosition"
   if AL_SkyEnabled=1 and AL_SkyDynamic=1 then set effect technique AL_SkyEffect(2),"WPositionClip"
endfunction
`--------------
` Set Sky Texture
`--------------
function Sky_SetTexture(iTexture as integer)
   if AL_SkyEnabled=1 then texture object AL_SkyObject(1),0,iTexture
endfunction
`--------------
` Set Sky Angle
`--------------
function Sky_SetAngle(iAngleX as float,iAngleY as float,iAngleZ as float)
   if AL_SkyEnabled=1
      rotate x matrix4 AL_Matrix(1),wrapvalue(iAngleX)/57.295
      rotate y matrix4 AL_Matrix(2),wrapvalue(iAngleY)/57.295
      rotate z matrix4 AL_Matrix(3),wrapvalue(iAngleZ)/57.295
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set effect constant matrix AL_SkyEffect(1),"SkyAngle",AL_Matrix(4)
   endif
endfunction
`--------------
` Set Sky Color1
`--------------
function Sky_SetColor1(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"SkyColor1",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sky Color2
`--------------
function Sky_SetColor2(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"SkyColor2",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sun Texture
`--------------
function Sky_SetSunTexture(iTexture as integer)
   if AL_SkyEnabled=1
      texture object AL_SkyObject(1),3,iTexture
   endif
endfunction
`--------------
` Set Sun Color
`--------------
function Sky_SetSunColor(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"SunColor",AL_Vector4(1)
      if AL_DirLightLensFlare.x>-1 and AL_TimeOfDayEnabled=1 then LensFlare_SetColor(AL_DirLightLensFlare.x,iRed,iGreen,iBlue)
   endif
endfunction
`--------------
` Set Sun Angle
`--------------
function Sky_SetSunAngle(iAngX as float,iAngY as float,iAngZ as float,iSize as float)
   if AL_SkyEnabled=1
      if AL_TimeOfDayEnabled=1
         if AL_SkySunAngle.x<>wrapvalue(iAngX) or AL_SkySunAngle.y<>wrapvalue(iAngY) or AL_SkySunAngle.z<>wrapvalue(iAngZ)
            AL_TimeOfDayEnabled=2
         endif
      endif
      AL_SkySunAngle.x=wrapvalue(iAngX)
      AL_SkySunAngle.y=wrapvalue(iAngY)
      AL_SkySunAngle.z=wrapvalue(iAngZ)
      rotate x matrix4 AL_Matrix(1),iAngX/57.295
      rotate y matrix4 AL_Matrix(2),iAngY/57.295
      rotate z matrix4 AL_Matrix(3),iAngZ/57.295
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set vector3 AL_Vector3(1),0,0,1
      transform normals vector3 AL_Vector3(1),AL_Vector3(1),AL_Matrix(4)
      AL_SkySunDirection.x=-x vector3(AL_Vector3(1))
      AL_SkySunDirection.y=-y vector3(AL_Vector3(1))
      AL_SkySunDirection.z=-z vector3(AL_Vector3(1))
      set vector4 AL_Vector4(2),-AL_SkySunDirection.x,-AL_SkySunDirection.y,-AL_SkySunDirection.z,0
      set effect constant vector AL_SkyEffect(1),"LightDirection",AL_Vector4(2)
      set effect constant vector AL_SkyEffect(3),"LightDirection",AL_Vector4(2)
      set vector3 AL_Vector3(1),0,0,0
      set vector3 AL_Vector3(2),AL_SkySunDirection.x,AL_SkySunDirection.y,AL_SkySunDirection.z
      set vector3 AL_Vector3(3),0,1,0
      build lookat lhmatrix4 AL_Matrix(1),AL_Vector3(1),AL_Vector3(2),AL_Vector3(3)
      build fov lhmatrix4 AL_Matrix(2),iSize,1,1,10000
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
      set effect constant matrix AL_SkyEffect(1),"SunProjMatrix",AL_Matrix(3)
      if AL_TimeOfDayEnabled=2
         AL_TimeOfDayEnabled=1
         if AL_SkySunDirection.y>0
            DirLight_SetAngle(AL_SkySunAngle.x,AL_SkySunAngle.y,AL_SkySunAngle.z)
            if AL_DirLightLensFlare.x>-1 then LensFlare_SetVisible(AL_DirLightLensFlare.x,1)
         else
            DirLight_SetAngle(AL_SkyPlanetAngle.x,AL_SkyPlanetAngle.y,AL_SkyPlanetAngle.z)
            if AL_DirLightLensFlare.x>-1 then LensFlare_SetVisible(AL_DirLightLensFlare.x,0)
         endif
         TimeOfDay_Update()
      endif
   endif
endfunction
`--------------
` Set Planet Texture
`--------------
function Sky_SetPlanetTexture(iTexture as integer)
   if AL_SkyEnabled=1 then texture object AL_SkyObject(1),4,iTexture
endfunction
`--------------
` Set Planet Color
`--------------
function Sky_SetPlanetColor(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"PlanetColor",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Planet Angle
`--------------
function Sky_SetPlanetAngle(iAngX as float,iAngY as float,iAngZ as float,iSize as float)
   if AL_SkyEnabled=1
      if AL_TimeOfDayEnabled=1
         if AL_SkyPlanetAngle.x<>wrapvalue(iAngX) or AL_SkyPlanetAngle.y<>wrapvalue(iAngY) or AL_SkyPlanetAngle.z<>wrapvalue(iAngZ)
            AL_TimeOfDayEnabled=2
         endif
      endif
      AL_SkyPlanetAngle.x=wrapvalue(iAngX)
      AL_SkyPlanetAngle.y=wrapvalue(iAngY)
      AL_SkyPlanetAngle.z=wrapvalue(iAngZ)
      rotate x matrix4 AL_Matrix(1),iAngX/57.3
      rotate y matrix4 AL_Matrix(2),iAngY/57.3
      rotate z matrix4 AL_Matrix(3),iAngZ/57.3
      multiply matrix4 AL_Matrix(4),AL_Matrix(1),AL_Matrix(2)
      multiply matrix4 AL_Matrix(4),AL_Matrix(4),AL_Matrix(3)
      set vector3 AL_Vector3(1),0,0,1
      transform normals vector3 AL_Vector3(2),AL_Vector3(1),AL_Matrix(4)
      set vector3 AL_Vector3(1),0,0,0
      set vector3 AL_Vector3(2),-x vector3(AL_Vector3(2)),-y vector3(AL_Vector3(2)),-z vector3(AL_Vector3(2))
      set vector3 AL_Vector3(3),0,1,0
      build lookat lhmatrix4 AL_Matrix(1),AL_Vector3(1),AL_Vector3(2),AL_Vector3(3)
      build fov lhmatrix4 AL_Matrix(2),iSize,1,1,10000
      multiply matrix4 AL_Matrix(3),AL_Matrix(1),AL_Matrix(2)
      set effect constant matrix AL_SkyEffect(1),"PlanetProjMatrix",AL_Matrix(3)
      if AL_TimeOfDayEnabled=2
         AL_TimeOfDayEnabled=1
         if AL_SkySunDirection.y>0
            DirLight_SetAngle(AL_SkySunAngle.x,AL_SkySunAngle.y,AL_SkySunAngle.z)
         else
            DirLight_SetAngle(AL_SkyPlanetAngle.x,AL_SkyPlanetAngle.y,AL_SkyPlanetAngle.z)
         endif
         TimeOfDay_Update()
      endif
   endif
endfunction
`--------------
` Set Sky Cloud Texture
`--------------
function Sky_SetCloudsTexture(iTexture as integer,iNoise as integer)
   if AL_SkyEnabled=1
      texture object AL_SkyObject(1),5,iTexture
      texture object AL_SkyObject(3),1,iTexture
      texture object AL_SkyObject(1),6,iNoise
   endif
endfunction
`--------------
` Set Sky Cloud Density
`--------------
function Sky_SetCloudsDensity(iDensity as float,iAlpha as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iDensity,iAlpha,0,0
      set effect constant vector AL_SkyEffect(1),"CloudDensity",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(3),"CloudDensity",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sky Cloud Scale
`--------------
function Sky_SetCloudsScale(iUSacle as float,iVSacle as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iUSacle,iVSacle,0,0
      set effect constant vector AL_SkyEffect(1),"CloudScale",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(3),"CloudScale",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sky Cloud Speed
`--------------
function Sky_SetCloudsSpeed(iUSpeed as float,iVSpeed as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iUSpeed,iVSpeed,0,0
      set effect constant vector AL_SkyEffect(1),"CloudSpeed",AL_Vector4(1)
      set effect constant vector AL_SkyEffect(3),"CloudSpeed",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sky Cloud Color
`--------------
function Sky_SetCloudsColor(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"CloudColor",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Sky Cloud Light Color
`--------------
function Sky_SetCloudsLightColor(iRed as float,iGreen as float,iBlue as float)
   if AL_SkyEnabled=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_SkyEffect(1),"LightColor",AL_Vector4(1)
   endif
endfunction
`--------------
` Cloud Setup
`--------------
function Clouds_Setup()
   if AL_CloudsEnable=0
      global AL_CloudsEnable as boolean
      global AL_CloudsCamera as integer
      global AL_CloudsImage as integer
      global AL_CloudsDensity as float
      global AL_CloudsMoved as float
      global AL_CloudsSize as float
      global AL_CloudsHeight as AL_Vec2Float
      global AL_CloudsOldPos as AL_Vec3Float
      global dim AL_CloudsObject(3) as integer
      global dim AL_CloudsEffect(2) as integer
      global dim AL_CloudsRandom(35) as float
      AL_CloudsEnable=1
      AL_CloudsCamera=find free camera()
      AL_CloudsImage=find free image()
      AL_CreateCamera(AL_CloudsCamera,AL_CloudsImage,AL_PostViewVec.x/4,AL_PostViewVec.y/4,20)
      set camera range AL_CloudsCamera,AL_CameraData(1),AL_CameraData(2)
      if AL_CameraData(3)>0 then set camera fov AL_CloudsCamera,AL_CameraData(3)
      if AL_CameraData(4)>0 then set camera aspect AL_CloudsCamera,AL_CameraData(4)
      backdrop on AL_CloudsCamera
      color backdrop AL_CloudsCamera,0
      AL_CloudsEffect(1)=find free effect()
      load effect AL_Directory+"Sky/Clouds.fx",AL_CloudsEffect(1),0,1
      AL_CloudsObject(1)=find free object()
      load object AL_Directory+"Resources/Clouds.dbo",AL_CloudsObject(1)
      set object effect AL_CloudsObject(1),AL_CloudsEffect(1)
      set object mask AL_CloudsObject(1),2^AL_CloudsCamera
      set object transparency AL_CloudsObject(1),1
      AL_CloudsEffect(2)=find free effect()
      load effect AL_Directory+"Sky/Clouds Project.fx",AL_CloudsEffect(2),0,1
      set vector4 AL_Vector4(1),0.5/AL_ViewVec.x,0.5/AL_ViewVec.y,1,1
      set effect constant vector AL_CloudsEffect(2),"ViewSize",AL_Vector4(1)
      AL_CloudsObject(2)=find free object()
      load object AL_Directory+"Resources/Skydome.dbo",AL_CloudsObject(2)
      offset limb AL_CloudsObject(2),0,0,-50,0
      set object effect AL_CloudsObject(2),AL_CloudsEffect(2)
      set object transparency AL_CloudsObject(2),2
      texture object AL_CloudsObject(2),0,AL_Image(2)
      texture object AL_CloudsObject(2),1,AL_CloudsImage
      set object mask AL_CloudsObject(2),(2^AL_Camera(9))+(2^AL_Camera(5))
      AL_CloudsObject(3)=find free object()
      make object sphere AL_CloudsObject(3),-100,10,15
      set object effect AL_CloudsObject(3),AL_CloudsEffect(2)
      set object transparency AL_CloudsObject(3),2
      texture object AL_CloudsObject(3),0,AL_Image(2)
      texture object AL_CloudsObject(3),1,AL_CloudsImage
      set object mask AL_CloudsObject(3),(2^AL_Camera(9))+(2^AL_Camera(5))
      for r=1 to 35
         repeat
            AL_CloudsRandom(r)=rnd(20)
         until (AL_CloudsRandom(r)<AL_CloudsRandom(r-1)-5 or AL_CloudsRandom(r)>AL_CloudsRandom(r-1)+5)
      next r
      Clouds_SetDensity(50)
      Clouds_SetHeight(10000,0.65)
      Clouds_SetScale(1750,20,15,8,8)
      Clouds_SetSpeed(0.009,-0.009,-0.0006,0.0006)
      Clouds_SetColor(140,145,150)
      Clouds_SetLightColor(90,50,20)
   endif
endfunction
`--------------
` Clouds Update
`--------------
function Clouds_Update()
   if AL_CloudsEnable=1
      local tRandom as integer
      local tPos as AL_Vec3Float
      position camera AL_CloudsCamera,AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      rotate camera AL_CloudsCamera,AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
      position object AL_CloudsObject(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
      set vector4 AL_Vector4(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z,0
      set effect constant vector AL_CloudsEffect(1),"CloudPosition",AL_Vector4(1)
      tPos.x=(AL_CameraPos.x-AL_CloudsOldPos.x)*AL_CameraDir.x
      tPos.y=(AL_CameraPos.y-AL_CloudsOldPos.y)*AL_CameraDir.y
      tPos.z=(AL_CameraPos.z-AL_CloudsOldPos.z)*AL_CameraDir.z
      AL_CloudsMoved=AL_CloudsMoved-(tPos.x+tPos.y+tPos.z)
      AL_CloudsOldPos=AL_CameraPos
      if AL_CloudsMoved<0 then AL_CloudsMoved=AL_CloudsSize:inc AL_CloudsRandom(0)
      if AL_CloudsMoved>AL_CloudsSize then AL_CloudsMoved=0:dec AL_CloudsRandom(0)
      if AL_CloudsRandom(0)<0 then AL_CloudsRandom(0)=34
      if AL_CloudsRandom(0)>34 then AL_CloudsRandom(0)=0
      null=get object effect(AL_CloudsObject(1),-1)
      for s=1 to 35
         tRandom=s+AL_CloudsRandom(0)
         if tRandom>35 then tRandom=tRandom-35
         set vector4 AL_Vector4(1),((s-1)+(AL_CloudsMoved/AL_CloudsSize))*(AL_CloudsSize/100)*2,AL_CloudsRandom(tRandom)/20,0,0
         set effect constant vector element "CloudScale",s,AL_Vector4(1)
      next s
      release effect pointer
      if AL_CameraPos.y>AL_CloudsHeight.x-(AL_CloudsSize*AL_CloudsHeight.y) and AL_CameraPos.y<AL_CloudsHeight.x+(AL_CloudsSize*AL_CloudsHeight.y*4.5)
         position object AL_CloudsObject(3),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
         show object AL_CloudsObject(3)
         hide object AL_CloudsObject(2)
      else
         position object AL_CloudsObject(2),AL_CameraPos.x,AL_CloudsHeight.x,AL_CameraPos.z
         if AL_CameraPos.y<AL_CloudsHeight.x-AL_CloudsSize*AL_CloudsHeight.y
            scale object AL_CloudsObject(2),AL_CloudsSize*70,(AL_CloudsSize*70)/((AL_CloudsSize*35)/4000),AL_CloudsSize*70
         else
            scale object AL_CloudsObject(2),AL_CloudsSize*70,-(AL_CloudsSize*70)/((AL_CloudsSize*35)/4000),AL_CloudsSize*70
         endif
         show object AL_CloudsObject(2)
         hide object AL_CloudsObject(3)
      endif
   endif
endfunction
`--------------
` Delete Clouds
`--------------
function Clouds_Delete()
   if AL_CloudsEnable=1
      AL_CloudsEnable=0
      if camera exist(AL_CloudsCamera) then delete camera AL_CloudsCamera
      if image exist(AL_CloudsImage) then delete image AL_CloudsImage
      if object exist(AL_CloudsObject(1)) then delete object AL_CloudsObject(1)
      if object exist(AL_CloudsObject(2)) then delete object AL_CloudsObject(2)
      if object exist(AL_CloudsObject(3)) then delete object AL_CloudsObject(3)
      if effect exist(AL_CloudsEffect(1)) then delete effect AL_CloudsEffect(1)
      if effect exist(AL_CloudsEffect(2)) then delete effect AL_CloudsEffect(2)
   endif
endfunction
`--------------
` Clouds Texture
`--------------
function Clouds_SetTexture(iCloudTexture as integer,iNoiseTexture as integer)
   if AL_CloudsEnable=1
      texture object AL_CloudsObject(1),0,iCloudTexture
      texture object AL_CloudsObject(1),1,iNoiseTexture
   endif
endfunction
`--------------
` Clouds Density
`--------------
function Clouds_SetDensity(iDensity as float)
   if AL_CloudsEnable=1
      local tLightDensity as float
      local tAlpha as float
      local tCloudExp as float
      if AL_CloudsDensity<>iDensity
         AL_CloudsDensity=iDensity
         if AL_TimeOfDayEnabled=1 then AL_TimeOfDayEnabled=2
      endif
      if AL_CloudsDensity>100 then AL_CloudsDensity=100
      if AL_CloudsDensity<1 then AL_CloudsDensity=1
      tLightDensity=5-(AL_CloudsDensity/5)
      if tLightDensity<1 then tLightDensity=1
      tAlpha=AL_CloudsDensity-69
      if tAlpha<0 then tAlpha=0
      tCloudExp=(1-(AL_CloudsDensity/100))*16
      if tCloudExp<1 then tCloudExp=1
      set vector4 AL_Vector4(1),1-(tAlpha/30),AL_CloudsDensity,2+tLightDensity,1+(1-(AL_CloudsDensity/100))
      set effect constant vector AL_CloudsEffect(1),"CloudDensity",AL_Vector4(1)
      set vector4 AL_Vector4(1),tCloudExp,tCloudExp/3,0,0
      set effect constant vector AL_CloudsEffect(1),"CloudExp",AL_Vector4(1)
      if AL_TimeOfDayEnabled=2
         AL_TimeOfDayEnabled=1
         TimeOfDay_Update()
      endif
   endif
endfunction
`--------------
` Clouds Scale
`--------------
function Clouds_SetScale(iSacle as float,iUSacle as float,iVSacle as float,iNoiseUSacle as float,iNoiseVSacle as float)
   if AL_CloudsEnable=1
      AL_CloudsSize=iSacle
      set vector4 AL_Vector4(1),AL_CloudsSize*iUSacle,AL_CloudsSize*iVSacle,0,0
      set effect constant vector AL_CloudsEffect(1),"CloudUvScale",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_CloudsSize*iNoiseUSacle,AL_CloudsSize*iNoiseVSacle,0,0
      set effect constant vector AL_CloudsEffect(1),"NoiseUvScale",AL_Vector4(1)
      if AL_CloudsSize*35<AL_CameraData(2)
         set vector4 AL_Vector4(1),AL_CloudsSize*35,AL_CloudsSize,0,0
      else
         set vector4 AL_Vector4(1),AL_CameraData(2),AL_CloudsSize,0,0
      endif
      set effect constant vector AL_CloudsEffect(1),"CloudFalloff",AL_Vector4(1)
      set vector4 AL_Vector4(1),AL_CloudsHeight.x,AL_CloudsSize*AL_CloudsHeight.y,0,0
      set effect constant vector AL_CloudsEffect(1),"CloudHeight",AL_Vector4(1)
   endif
endfunction
`--------------
` Clouds Height
`--------------
function Clouds_SetHeight(iHeight as float,iHeightSacle as float)
   if AL_CloudsEnable=1
      AL_CloudsHeight.x=iHeight
      AL_CloudsHeight.y=iHeightSacle
      set vector4 AL_Vector4(1),AL_CloudsHeight.x,AL_CloudsSize*AL_CloudsHeight.y,0,0
      set effect constant vector AL_CloudsEffect(1),"CloudHeight",AL_Vector4(1)
   endif
endfunction
`--------------
` Clouds Speed
`--------------
function Clouds_SetSpeed(iUSpeed as float,iVSpeed as float,iNoiseUSpeed as float,iNoiseVSpeed as float)
   if AL_CloudsEnable=1
      set vector4 AL_Vector4(1),iUSpeed,iVSpeed,0,0
      set effect constant vector AL_CloudsEffect(1),"CloudSpeed",AL_Vector4(1)
      set vector4 AL_Vector4(1),iNoiseUSpeed,iNoiseVSpeed,0,0
      set effect constant vector AL_CloudsEffect(1),"NoiseSpeed",AL_Vector4(1)
   endif
endfunction
`--------------
` Clouds Color
`--------------
function Clouds_SetColor(iRed as float,iGreen as float,iBlue as float)
   if AL_CloudsEnable=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_CloudsEffect(2),"CloudColor",AL_Vector4(1)
   endif
endfunction
`--------------
` Clouds Light Color
`--------------
function Clouds_SetLightColor(iRed as float,iGreen as float,iBlue as float)
   if AL_CloudsEnable=1
      set vector4 AL_Vector4(1),iRed/255,iGreen/255,iBlue/255,0
      set effect constant vector AL_CloudsEffect(2),"LightColor",AL_Vector4(1)
   endif
endfunction
`--------------
` Set Up Time Of Day
`--------------
function TimeOfDay_SetUp()
   if AL_TimeOfDayEnabled=0
      global AL_TimeOfDayEnabled as integer
      global dim AL_TimeOfDay(11,15) as AL_Vec3Float
      AL_TimeOfDayEnabled=1
      AL_TimeOfDay(11,4).x=1
      Sky_SetDynamic(1)
   `Day
      TimeOfDay_SetSkyColor(1,50,75,150,100,125,150)
      TimeOfDay_SetFogColor(1,110,115,120,110,120,130,110,115,125)
      TimeOfDay_SetLightColor(1,255,255,255,70,70,70)
      TimeOfDay_SetSunPlanetColor(1,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(1,115,120,125,130,125,120)
      TimeOfDay_SetWaterColor(1,20,40,45,30,70,75,40,60,50,255,255,255)
   `Night
      TimeOfDay_SetSkyColor(2,15,20,15,0,0,0)
      TimeOfDay_SetFogColor(2,14,16,20,26,28,30,18,19,20)
      TimeOfDay_SetLightColor(2,40,40,40,25,25,25)
      TimeOfDay_SetSunPlanetColor(2,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(2,15,20,25,35,40,45)
      TimeOfDay_SetWaterColor(2,20,30,35,20,35,40,30,50,40,255,255,255)
   `Sun set
      TimeOfDay_SetSkyColor(3,170,100,60,100,125,150)
      TimeOfDay_SetFogColor(3,160,155,150,175,140,100,150,140,130)
      TimeOfDay_SetLightColor(3,255,200,160,70,60,50)
      TimeOfDay_SetSunPlanetColor(3,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(3,140,115,100,150,125,110)
      TimeOfDay_SetWaterColor(3,20,40,45,30,70,75,40,60,50,255,230,210)
   `Sun rise
      TimeOfDay_SetSkyColor(4,140,120,100,100,125,150)
      TimeOfDay_SetFogColor(4,160,155,150,165,135,165,150,140,130)
      TimeOfDay_SetLightColor(4,255,220,200,70,60,50)
      TimeOfDay_SetSunPlanetColor(4,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(4,135,125,115,140,125,120)
      TimeOfDay_SetWaterColor(4,20,40,45,30,70,75,40,60,50,255,230,225)
   `Day overcast
      TimeOfDay_SetSkyColor(5,25,38,75,50,62,75)
      TimeOfDay_SetFogColor(5,110,110,110,110,110,110,110,110,110)
      TimeOfDay_SetLightColor(5,120,120,120,50,50,50)
      TimeOfDay_SetSunPlanetColor(5,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(5,80,85,95,110,115,110)
      TimeOfDay_SetWaterColor(5,15,35,40,25,55,60,40,60,50,255,255,255)
   `Night overcast
      TimeOfDay_SetSkyColor(6,15,20,25,0,0,0)
      TimeOfDay_SetFogColor(6,25,25,25,25,25,25,25,25,25)
      TimeOfDay_SetLightColor(6,30,30,30,20,20,20)
      TimeOfDay_SetSunPlanetColor(6,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(6,15,20,25,25,30,35)
      TimeOfDay_SetWaterColor(6,10,20,30,15,30,35,30,50,40,255,255,255)
   `Sun set overcast
      TimeOfDay_SetSkyColor(7,85,50,30,50,62,75)
      TimeOfDay_SetFogColor(7,105,100,95,105,100,95,105,100,95)
      TimeOfDay_SetLightColor(7,120,110,100,55,50,45)
      TimeOfDay_SetSunPlanetColor(7,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(7,115,105,100,130,115,100)
      TimeOfDay_SetWaterColor(7,15,35,40,25,55,60,40,60,50,255,245,235)
   `Sun rise overcast
      TimeOfDay_SetSkyColor(8,70,60,50,50,62,75)
      TimeOfDay_SetFogColor(8,105,100,95,105,100,95,105,100,95)
      TimeOfDay_SetLightColor(8,120,110,100,55,50,45)
      TimeOfDay_SetSunPlanetColor(8,255,255,255,255,255,255)
      TimeOfDay_SetCloudColor(8,110,105,100,120,110,100)
      TimeOfDay_SetWaterColor(8,15,35,40,25,55,60,40,60,50,255,235,245)
   `Update
      TimeOfDay_Update()
   endif
endfunction
`--------------
` Update Time Of Day
`--------------
function TimeOfDay_Update()
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(11,1).x=(AL_SkySunDirection.y-0.15)*3.5
      if AL_TimeOfDay(11,1).x<0 then AL_TimeOfDay(11,1).x=0
      if AL_TimeOfDay(11,1).x>1 then AL_TimeOfDay(11,1).x=1
      AL_TimeOfDay(11,2).x=(-AL_SkySunDirection.y+0.15)*3.5
      if AL_TimeOfDay(11,2).x<0 then AL_TimeOfDay(11,2).x=0
      if AL_TimeOfDay(11,2).x>1 then AL_TimeOfDay(11,2).x=1
      AL_TimeOfDay(11,3).x=(AL_SkySunDirection.y-0.15)*3.5
      if AL_TimeOfDay(11,3).x>0
         AL_TimeOfDay(11,3).x=1-AL_TimeOfDay(11,3).x
      else
         AL_TimeOfDay(11,3).x=-AL_TimeOfDay(11,3).x
         AL_TimeOfDay(11,3).x=1-AL_TimeOfDay(11,3).x
      endif
      if AL_TimeOfDay(11,3).x<0 then AL_TimeOfDay(11,3).x=0
      if AL_TimeOfDay(11,3).x>1 then AL_TimeOfDay(11,3).x=1
      if AL_TimeOfDay(11,1).x=1 then AL_TimeOfDay(11,4).x=1
      if AL_TimeOfDay(11,2).x=1 then AL_TimeOfDay(11,4).x=0
      AL_TimeOfDay(11,5).x=1
      if AL_CloudsEnable=1
         AL_TimeOfDay(11,5).x=AL_CloudsDensity-2
         if AL_TimeOfDay(11,5).x>30 then AL_TimeOfDay(11,5).x=30
         if AL_TimeOfDay(11,5).x<0 then AL_TimeOfDay(11,5).x=0
         AL_TimeOfDay(11,5).x=AL_TimeOfDay(11,5).x/20
      endif
      AL_TimeOfDay(11,6).x=abs(AL_SkySunDirection.y)*10
      if AL_TimeOfDay(11,6).x<0 then AL_TimeOfDay(11,6).x=0
      if AL_TimeOfDay(11,6).x>1 then AL_TimeOfDay(11,6).x=1
      if AL_TimeOfDay(11,1).x<>AL_TimeOfDay(11,1).y or AL_TimeOfDay(11,2).x<>AL_TimeOfDay(11,2).y or AL_TimeOfDay(11,3).x<>AL_TimeOfDay(11,3).y or AL_TimeOfDay(11,4).x<>AL_TimeOfDay(11,4).y or AL_TimeOfDay(11,5).x<>AL_TimeOfDay(11,5).y or AL_TimeOfDay(11,6).x<>AL_TimeOfDay(11,6).y
         for i=1 to 15
            AL_TimeOfDay(9,i).x=((AL_TimeOfDay(1,i).x*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(2,i).x*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(3,i).x*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(4,i).x*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(9,i).y=((AL_TimeOfDay(1,i).y*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(2,i).y*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(3,i).y*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(4,i).y*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(9,i).z=((AL_TimeOfDay(1,i).z*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(2,i).z*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(3,i).z*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(4,i).z*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(10,i).x=((AL_TimeOfDay(5,i).x*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(6,i).x*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(7,i).x*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(8,i).x*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(10,i).y=((AL_TimeOfDay(5,i).y*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(6,i).y*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(7,i).y*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(8,i).y*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(10,i).z=((AL_TimeOfDay(5,i).z*AL_TimeOfDay(11,1).x)+(AL_TimeOfDay(6,i).z*AL_TimeOfDay(11,2).x)+((AL_TimeOfDay(7,i).z*AL_TimeOfDay(11,3).x)*AL_TimeOfDay(11,4).x)+((AL_TimeOfDay(8,i).z*AL_TimeOfDay(11,3).x)*(1-AL_TimeOfDay(11,4).x)))
            AL_TimeOfDay(0,i).x=(AL_TimeOfDay(9,i).x*AL_TimeOfDay(11,5).x)+(AL_TimeOfDay(10,i).x*(1-AL_TimeOfDay(11,5).x))
            AL_TimeOfDay(0,i).y=(AL_TimeOfDay(9,i).y*AL_TimeOfDay(11,5).x)+(AL_TimeOfDay(10,i).y*(1-AL_TimeOfDay(11,5).x))
            AL_TimeOfDay(0,i).z=(AL_TimeOfDay(9,i).z*AL_TimeOfDay(11,5).x)+(AL_TimeOfDay(10,i).z*(1-AL_TimeOfDay(11,5).x))
         next i
         Sky_SetColor1(AL_TimeOfDay(0,1).x,AL_TimeOfDay(0,1).y,AL_TimeOfDay(0,1).z)
         Sky_SetColor2(AL_TimeOfDay(0,2).x,AL_TimeOfDay(0,2).y,AL_TimeOfDay(0,2).z)
         AdvLighting_SetFog(AL_Fog(1),AL_Fog(2),AL_TimeOfDay(0,3).x,AL_TimeOfDay(0,3).y,AL_TimeOfDay(0,3).z,AL_TimeOfDay(0,4).x,AL_TimeOfDay(0,4).y,AL_TimeOfDay(0,4).z)
         AdvLighting_SetHeightFog(AL_Fog(9),AL_Fog(10),AL_Fog(11),AL_Fog(12),AL_Fog(13),AL_TimeOfDay(0,5).x,AL_TimeOfDay(0,5).y,AL_TimeOfDay(0,5).z,AL_Fog(17))
         DirLight_SetColor(AL_TimeOfDay(0,6).x*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,6).y*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,6).z*AL_TimeOfDay(11,6).x)
         AdvLighting_SetAmbient(AL_TimeOfDay(0,7).x,AL_TimeOfDay(0,7).y,AL_TimeOfDay(0,7).z)
         Sky_SetSunColor(AL_TimeOfDay(0,8).x,AL_TimeOfDay(0,8).y,AL_TimeOfDay(0,8).z)
         Sky_SetPlanetColor(AL_TimeOfDay(0,9).x,AL_TimeOfDay(0,9).y,AL_TimeOfDay(0,9).z)
         Sky_SetCloudsColor(AL_TimeOfDay(0,10).x,AL_TimeOfDay(0,10).y,AL_TimeOfDay(0,10).z)
         Sky_SetCloudsLightColor(AL_TimeOfDay(0,11).x*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,11).y*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,11).z*AL_TimeOfDay(11,6).x)
         Clouds_SetColor(AL_TimeOfDay(0,10).x,AL_TimeOfDay(0,10).y,AL_TimeOfDay(0,10).z)
         Clouds_SetLightColor(AL_TimeOfDay(0,11).x*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,11).y*AL_TimeOfDay(11,6).x,AL_TimeOfDay(0,11).z*AL_TimeOfDay(11,6).x)
         Water_SetFogColor(Water_FogRange,Water_FogHeight,AL_TimeOfDay(0,12).x,AL_TimeOfDay(0,12).y,AL_TimeOfDay(0,12).z,AL_TimeOfDay(0,13).x,AL_TimeOfDay(0,13).y,AL_TimeOfDay(0,13).z)
         Water_SetColor(AL_TimeOfDay(0,14).x,AL_TimeOfDay(0,14).y,AL_TimeOfDay(0,14).z,AL_TimeOfDay(0,15).x,AL_TimeOfDay(0,15).y,AL_TimeOfDay(0,15).z)
         for i=1 to 6
            AL_TimeOfDay(11,i).y=AL_TimeOfDay(11,i).x
         next i
      endif
   endif
endfunction
`--------------
` Sky Color
`--------------
function TimeOfDay_SetSkyColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,1).x=iRed1
      AL_TimeOfDay(iIndex,1).y=iGreen1
      AL_TimeOfDay(iIndex,1).z=iBlue1
      AL_TimeOfDay(iIndex,2).x=iRed2
      AL_TimeOfDay(iIndex,2).y=iGreen2
      AL_TimeOfDay(iIndex,2).z=iBlue2
   endif
endfunction
`--------------
` Fog Color
`--------------
function TimeOfDay_SetFogColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float,iRed3 as float,iGreen3 as float,iBlue3 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,3).x=iRed1
      AL_TimeOfDay(iIndex,3).y=iGreen1
      AL_TimeOfDay(iIndex,3).z=iBlue1
      AL_TimeOfDay(iIndex,4).x=iRed2
      AL_TimeOfDay(iIndex,4).y=iGreen2
      AL_TimeOfDay(iIndex,4).z=iBlue2
      AL_TimeOfDay(iIndex,5).x=iRed3
      AL_TimeOfDay(iIndex,5).y=iGreen3
      AL_TimeOfDay(iIndex,5).z=iBlue3
   endif
endfunction
`--------------
` Light Color
`--------------
function TimeOfDay_SetLightColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,6).x=iRed1
      AL_TimeOfDay(iIndex,6).y=iGreen1
      AL_TimeOfDay(iIndex,6).z=iBlue1
      AL_TimeOfDay(iIndex,7).x=iRed2
      AL_TimeOfDay(iIndex,7).y=iGreen2
      AL_TimeOfDay(iIndex,7).z=iBlue2
   endif
endfunction
`--------------
` Sun Color
`--------------
function TimeOfDay_SetSunPlanetColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,8).x=iRed1
      AL_TimeOfDay(iIndex,8).y=iGreen1
      AL_TimeOfDay(iIndex,8).z=iBlue1
      AL_TimeOfDay(iIndex,9).x=iRed2
      AL_TimeOfDay(iIndex,9).y=iGreen2
      AL_TimeOfDay(iIndex,9).z=iBlue2
   endif
endfunction
`--------------
` Cloud Color
`--------------
function TimeOfDay_SetCloudColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,10).x=iRed1
      AL_TimeOfDay(iIndex,10).y=iGreen1
      AL_TimeOfDay(iIndex,10).z=iBlue1
      AL_TimeOfDay(iIndex,11).x=iRed2
      AL_TimeOfDay(iIndex,11).y=iGreen2
      AL_TimeOfDay(iIndex,11).z=iBlue2
   endif
endfunction
`--------------
` Water Color
`--------------
function TimeOfDay_SetWaterColor(iIndex as integer,iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float,iRed3 as float,iGreen3 as float,iBlue3 as float,iRed4 as float,iGreen4 as float,iBlue4 as float)
   if AL_TimeOfDayEnabled=1
      AL_TimeOfDay(iIndex,12).x=iRed1
      AL_TimeOfDay(iIndex,12).y=iGreen1
      AL_TimeOfDay(iIndex,12).z=iBlue1
      AL_TimeOfDay(iIndex,13).x=iRed2
      AL_TimeOfDay(iIndex,13).y=iGreen2
      AL_TimeOfDay(iIndex,13).z=iBlue2
      AL_TimeOfDay(iIndex,14).x=iRed3
      AL_TimeOfDay(iIndex,14).y=iGreen3
      AL_TimeOfDay(iIndex,14).z=iBlue3
      AL_TimeOfDay(iIndex,15).x=iRed4
      AL_TimeOfDay(iIndex,15).y=iGreen4
      AL_TimeOfDay(iIndex,15).z=iBlue4
   endif
endfunction
`====================================================
` Terrain Functions
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`--------------
` Build Empty Terrain
`--------------
terrain_init:
  type Terrain_type_statusData
    enabled as boolean
    initialized as boolean
  endtype
return
global Terrain_FirstLoad = 0
function Terrain_Create(iSizeX as integer,iSizeZ as integer,iHeight as integer)
  if Terrain_Enabled=0
  `Variables
    local tMemblock as integer
    global Terrain_Enabled as integer
    global Terrain_Size as AL_Vec2float
    global Terrain_TextureSize as AL_Vec3float
    global Terrain_TileSize as float
    global Terrain_Height as float
    global Terrain_DetailMapping as boolean
    global Terrain_RayPosition as AL_Vec3float
    global dim Terrain_Texture(3) as integer
    global dim Terrain_AtlasTextureFile(9,1) as string
    Terrain_Enabled=1
    Terrain_Size.x=iSizeX
    Terrain_Size.y=iSizeZ
  `Terrain textures
    tMemblock=find free memblock()
    make memblock tMemblock,12+(iSizeX*iSizeZ*4)
    write memblock dword tMemblock,0,iSizeX
    write memblock dword tMemblock,4,iSizeZ
    write memblock dword tMemblock,8,32
    for x=0 to iSizeX-1
      for z=0 to iSizeZ-1
        Pos=12+(z*(iSizeX*4))+(x*4)
        write memblock byte tMemblock,Pos+2,127
        write memblock byte tMemblock,Pos+1,127
        write memblock byte tMemblock,Pos+0,iHeight
        write memblock byte tMemblock,Pos+3,0
      next z
    next x
    Terrain_Texture(1)=find free image()
    make image from memblock Terrain_Texture(1),tMemblock
    delete memblock tMemblock
    make memblock tMemblock,12+(iSizeX*iSizeZ*4)
    write memblock dword tMemblock,0,iSizeX
    write memblock dword tMemblock,4,iSizeZ
    write memblock dword tMemblock,8,32
    for x=0 to iSizeX-1
      for z=0 to iSizeZ-1
        Pos=12+(z*(iSizeX*4))+(x*4)
        write memblock byte tMemblock,Pos+2,255
        write memblock byte tMemblock,Pos+1,0
        write memblock byte tMemblock,Pos+0,0
        write memblock byte tMemblock,Pos+3,0
      next z
    next x
    Terrain_Texture(2)=find free image()
    make image from memblock Terrain_Texture(2),tMemblock
    delete memblock tMemblock
    make memblock tMemblock,12+(iSizeX*iSizeZ*4)
    write memblock dword tMemblock,0,iSizeX
    write memblock dword tMemblock,4,iSizeZ
    write memblock dword tMemblock,8,32
    for x=0 to iSizeX-1
      for z=0 to iSizeZ-1
        Pos=12+(z*(iSizeX*4))+(x*4)
        write memblock byte tMemblock,Pos+2,128
        write memblock byte tMemblock,Pos+1,128
        write memblock byte tMemblock,Pos+0,128
        write memblock byte tMemblock,Pos+3,0
      next z
    next x
    Terrain_Texture(3)=find free image()
    make image from memblock Terrain_Texture(3),tMemblock
    delete memblock tMemblock
  `Arrays
    global dim Terrain_Object(4) as integer
    global dim Terrain_Effect(8) as integer
    global dim Terrain_ShaderIndex(1,4) as integer
    global dim Terrain_Height(Terrain_Size.x,Terrain_Size.y) as float
    for x=0 to 1024-1
      for z=0 to 1024-1
        Terrain_Height(x,z)=iHeight
      next z
    next x
  `Load terrain objects
    Terrain_Object(1)=find free object()
    load object AL_Directory+"Resources/PlainPZ.dbo",Terrain_Object(1)
    Terrain_Object(2)=find free object()
    load object AL_Directory+"Resources/PlainPX.dbo",Terrain_Object(2)
    Terrain_Object(3)=find free object()
    load object AL_Directory+"Resources/PlainNZ.dbo",Terrain_Object(3)
    Terrain_Object(4)=find free object()
    load object AL_Directory+"Resources/PlainNX.dbo",Terrain_Object(4)
    Terrain_Effect(1)=find free effect()
    load effect AL_Directory+"Terrain/TerrainZ.fx",Terrain_Effect(1),0,0
    Terrain_Effect(2)=find free effect()
    load effect AL_Directory+"Terrain/TerrainZN.fx",Terrain_Effect(2),0,0
    Terrain_Effect(3)=find free effect()
    load effect AL_Directory+"Terrain/TerrainX.fx",Terrain_Effect(3),0,0
    Terrain_Effect(4)=find free effect()
    load effect AL_Directory+"Terrain/TerrainXN.fx",Terrain_Effect(4),0,0
    Terrain_Effect(5)=find free effect()
    load effect AL_Directory+"Terrain/TerrainZ.fx",Terrain_Effect(5),0,0
    Terrain_Effect(6)=find free effect()
    load effect AL_Directory+"Terrain/TerrainZN.fx",Terrain_Effect(6),0,0
    Terrain_Effect(7)=find free effect()
    load effect AL_Directory+"Terrain/TerrainX.fx",Terrain_Effect(7),0,0
    Terrain_Effect(8)=find free effect()
    load effect AL_Directory+"Terrain/TerrainXN.fx",Terrain_Effect(8),0,0
    for t=1 to 4
      Object_Add(Terrain_Object(t))
      Object_SetReflection(Terrain_Object(t),1)
      Effect_Add(Terrain_Effect(((t-1)*2)+1))
      Effect_Add(Terrain_Effect(((t-1)*2)+2))
      set limb effect Terrain_Object(t),0,Terrain_Effect(((t-1)*2)+2)
      set limb effect Terrain_Object(t),1,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),2,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),3,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),4,Terrain_Effect(((t-1)*2)+1)
      texture object Terrain_Object(t),0,Terrain_Texture(1)
      texture object Terrain_Object(t),1,Terrain_Texture(2)
      texture object Terrain_Object(t),2,Terrain_Texture(3)
    next  t
  `Set Terrain
    Terrain_SetScale(100,5000)
    Terrain_SetTextureSize(0.4,0.2)
  endif
endfunction
`--------------
` Build Terrain
`--------------
function Terrain_Load(iHeight as integer,iBlend as integer,iColor as integer)
  if Terrain_Enabled=0
  System_log("terrain.dba", 3, "main", "Start Load Terrain.")
  `Variables
    local tMemblock as integer
    global Terrain_Enabled as integer
    global Terrain_Size as AL_Vec2float
    global Terrain_TextureSize as AL_Vec3float
    global Terrain_TileSize as float
    global Terrain_Height as float
    global Terrain_DetailMapping as boolean
    global Terrain_RayPosition as AL_Vec3float
   if Terrain_FirstLoad = 0
    global dim Terrain_Texture(3) as integer
    global dim Terrain_AtlasTextureFile(9,1) as string
   endif
    Terrain_Enabled=1
    `Terrain textures
    Terrain_Texture(1) = iHeight
    Terrain_Texture(2) = iBlend
    Terrain_Texture(3) = iColor
  `Terrain size
    Terrain_Size.x=image width(Terrain_Texture(1))
    Terrain_Size.y=image height(Terrain_Texture(1))
  `Arrays
    global dim Terrain_Object(4) as integer
    global dim Terrain_Effect(8) as integer
    global dim Terrain_ShaderIndex(1,4) as integer
    global dim Terrain_Height(Terrain_Size.x,Terrain_Size.y) as float
  `Heightmap data
    tMemblock=find free memblock()
    make memblock from image tMemblock,Terrain_Texture(1)
    for x=0 to Terrain_Size.x-1
      for y=0 to Terrain_Size.y-1
        Pos=12+(y*(Terrain_Size.x*4))+(x*4)
        ff#=memblock byte(tMemblock,Pos+3)
        Terrain_Height(x,y)=memblock byte(tMemblock,Pos+0)+(ff#/255)
      next y
    next x
    delete memblock tMemblock
  `Load terrain objects
    Terrain_Object(1)=find free object()
      load object AL_Directory+"Resources/PlainPZ.dbo",Terrain_Object(1)
    Terrain_Object(2)=find free object()
      load object AL_Directory+"Resources/PlainPX.dbo",Terrain_Object(2)
    Terrain_Object(3)=find free object()
      load object AL_Directory+"Resources/PlainNZ.dbo",Terrain_Object(3)
    Terrain_Object(4)=find free object()
      load object AL_Directory+"Resources/PlainNX.dbo",Terrain_Object(4)
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainZ.fx", 0)
        Terrain_Effect(1) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainZN.fx", 0)
        Terrain_Effect(2) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainX.fx", 0)
        Terrain_Effect(3) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainXN.fx", 0)
        Terrain_Effect(4) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainZ.fx", 0)
        Terrain_Effect(5) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainZN.fx", 0)
        Terrain_Effect(6) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainX.fx", 0)
        Terrain_Effect(7) = tEffectNum
      tEffectNum = Media_getEffectNumber(AL_Directory+"Terrain/TerrainXN.fx", 0)
        Terrain_Effect(8) = tEffectNum
    for t=1 to 4
      Object_Add(Terrain_Object(t))
      Object_SetReflection(Terrain_Object(t),1)
      Effect_Add(Terrain_Effect(((t-1)*2)+1))
      Effect_Add(Terrain_Effect(((t-1)*2)+2))
      set limb effect Terrain_Object(t),0,Terrain_Effect(((t-1)*2)+2)
      set limb effect Terrain_Object(t),1,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),2,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),3,Terrain_Effect(((t-1)*2)+1)
      set limb effect Terrain_Object(t),4,Terrain_Effect(((t-1)*2)+1)
      texture object Terrain_Object(t),0,Terrain_Texture(1)
      texture object Terrain_Object(t),1,Terrain_Texture(2)
      texture object Terrain_Object(t),2,Terrain_Texture(3)
    next  t
  `Set Terrain
    Terrain_SetScale(100,5000)
    Terrain_SetTextureSize(0.4,0.2)
  endif
  Terrain_FirstLoad = 1
endfunction
`--------------
` Delete Terrain
`--------------
function Terrain_Delete()
  if Terrain_Enabled > 0
    for t=1 to 4
      set pixel shader off Terrain_Object(t)
      set vertex shader off Terrain_Object(t)
      Effect_Remove(Terrain_Effect(((t-1)*2)+1))
      Effect_Remove(Terrain_Effect(((t-1)*2)+2))
      Object_Remove(Terrain_Object(t))
      delete object Terrain_Object(t)
      System_log("terrain.dba", 1, "main", " > unloaded terrain object " + str$(t))
    next t
    System_log("terrain.dba", 1, "main", " > unloaded terrain.")
    Terrain_Enabled=0
    undim Terrain_Object()
    undim Terrain_Effect()
    undim Terrain_ShaderIndex()
    undim Terrain_Height()
  System_log("terrain.dba", 1, "main", "  1")
    System_log("terrain.dba", 1, "main", " > unloaded terrain arrays")
  endif
endfunction
`--------------
` Terrain Set Visible
`--------------
function Terrain_SetVisible(iVisible as boolean)
  if iVisible=0 and Terrain_Enabled=1
    Terrain_Enabled=2
    for t=1 to 4
      hide object Terrain_Object(t)
      exclude object on Terrain_Object(t)
    next t
  endif
  if iVisible=1 and Terrain_Enabled=2
    Terrain_Enabled=1
    for t=1 to 4
      show object Terrain_Object(t)
      exclude object off Terrain_Object(t)
    next t
  endif
endfunction
`--------------
` Set Terrain Scale
`--------------
function Terrain_SetScale(iTileSize as float,iHeight as float)
  if Terrain_Enabled>0
    Terrain_TileSize=iTileSize
    Terrain_Height=iHeight
    set vector4 AL_Vector4(1),Terrain_Size.x,Terrain_Size.y,Terrain_TileSize/100,Terrain_TileSize
    for e=1 to 8
       set effect constant vector Terrain_Effect(e),"TerrainSize",AL_Vector4(1)
    next e
    set vector4 AL_Vector4(1),Terrain_TileSize*Terrain_Size.x,Terrain_TileSize*Terrain_Size.y,(0.5/Terrain_Size.x),(0.5/Terrain_Size.y)
    for e=1 to 8
       set effect constant vector Terrain_Effect(e),"TerrainTileSize",AL_Vector4(1)
       set effect constant float Terrain_Effect(e),"TerrainHeight",Terrain_Height
    next e
  endif
endfunction
`--------------
` Texture Terrain
`--------------
function Terrain_SetTexture(iAtlas1 as integer,iAtlas2 as integer,iAtlas3 as integer,iAtlas4 as integer,iAtlasNormal as integer)
  if Terrain_Enabled>0
    for t=1 to 4
      texture object Terrain_Object(t),3,iAtlas1
      texture object Terrain_Object(t),4,iAtlas2
      texture object Terrain_Object(t),5,iAtlas3
      texture object Terrain_Object(t),6,iAtlas4
      texture object Terrain_Object(t),7,iAtlasNormal
    next t
    Terrain_TextureSize.x=image width(iAtlas1)/2
    set vector4 AL_Vector4(1),Terrain_TextureSize.x,Terrain_TextureSize.x*(Terrain_TextureSize.z/Terrain_TextureSize.y),1/((Terrain_TextureSize.x+31)/Terrain_TextureSize.x),0
    for t=1 to 8
      set effect constant vector Terrain_Effect(t),"TextureSize",AL_Vector4(1)
    next t
  endif
endfunction
`--------------
` Set Terrain Layer UV
`--------------
function Terrain_SetTextureSize(iUv as float,iVerticalUv as float)
  if Terrain_Enabled>0
    Terrain_TextureSize.y=iUv
    Terrain_TextureSize.z=iVerticalUv
    set vector4 AL_Vector4(1),Terrain_TextureSize.y,Terrain_TextureSize.y,Terrain_TextureSize.z,Terrain_TextureSize.z
    for t=1 to 8
      set effect constant vector Terrain_Effect(t),"TileUVScale",AL_Vector4(1)
    next t
    set vector4 AL_Vector4(1),Terrain_TextureSize.x,Terrain_TextureSize.x*(Terrain_TextureSize.z/Terrain_TextureSize.y),1/((Terrain_TextureSize.x+31)/Terrain_TextureSize.x),0
    for t=1 to 8
      set effect constant vector Terrain_Effect(t),"TextureSize",AL_Vector4(1)
    next t
  endif
endfunction
`--------------
` Add Atlas Texture
`--------------
function Terrain_AddAtlasTexture(iBase as string,iNormal as string,iStage as integer)
  if Terrain_Enabled=1
    Terrain_AtlasTextureFile(iStage,0)=iBase
    Terrain_AtlasTextureFile(iStage,1)=iNormal
  endif
endfunction
`--------------
` Build Atlas Texture
`--------------
function Terrain_BuildAtlasTexture(iAtlas1 as integer,iAtlas2 as integer,iAtlas3 as integer,iAtlas4 as integer,iAtlasNormal as integer)
  if Terrain_Enabled=1
    local tFxy as AL_Vec2Float
    local tIxy as AL_Vec2Integer
    local tStage as integer
    local tImage as integer
    local dim tMemblock(4) as integer
    local dim tImageSize(3) as AL_Vec2Float
    tImage=find free image()
    for t=0 to 3
      for f=0 to 1
        if tMemblock(1)=0 then tMemblock(1)=find free memblock()
        load image Terrain_AtlasTextureFile(tStage,0),tImage
        make memblock from image tMemblock(1),tImage
        delete image tImage
        tImageSize(1).x=memblock dword(tMemblock(1),0)
        tImageSize(1).y=memblock dword(tMemblock(1),4)
        if tMemblock(2)=0 then tMemblock(2)=find free memblock()
        load image Terrain_AtlasTextureFile(tStage,1),tImage
        make memblock from image tMemblock(2),tImage
        delete image tImage
        tImageSize(2).x=memblock dword(tMemblock(2),0)
        tImageSize(2).y=memblock dword(tMemblock(2),4)
        if f=0
          tImageSize(3).x=tImageSize(1).x*2
          tImageSize(3).y=tImageSize(1).y
          if tMemblock(3)=0 then tMemblock(3)=find free memblock()
          make memblock tMemblock(3),12+(tImageSize(3).x*tImageSize(3).y*4)
          write memblock dword tMemblock(3),0,tImageSize(3).x
          write memblock dword tMemblock(3),4,tImageSize(3).y
          write memblock dword tMemblock(3),8,32
        endif
        if tStage=0
          if tMemblock(4)=0 then tMemblock(4)=find free memblock()
          make memblock tMemblock(4),12+(tImageSize(3).x*tImageSize(3).y*4)
          write memblock dword tMemblock(4),0,tImageSize(3).x
          write memblock dword tMemblock(4),4,tImageSize(3).y
          write memblock dword tMemblock(4),8,32
        endif
        for x=0 to tImageSize(1).x-1
           for y=0 to tImageSize(1).y-1
              tIxy.x=x+(f*(tImageSize(3).x/2))
              tIxy.y=y
              Pos1=12+(tIxy.y*(tImageSize(3).x*4))+(tIxy.x*4)
              tFxy.x=x
              if f=1 then tFxy.x=tImageSize(1).x-x
              tFxy.y=y
              tFxy.x=(tFxy.x*((tImageSize(1).x+32)/tImageSize(1).x))
              tIxy.x=(wrapvalue((tFxy.x/tImageSize(1).x)*360)/360)*tImageSize(1).x
              tIxy.y=(wrapvalue((tFxy.y/tImageSize(1).y)*360)/360)*tImageSize(1).y
              Pos2=12+(tIxy.y*(tImageSize(1).x*4))+(tIxy.x*4)
              tFxy.x=x
              if f=1 then tFxy.x=tImageSize(2).x-x
              tFxy.y=y
              tFxy.x=(tFxy.x*((tImageSize(2).x+32)/tImageSize(2).x))
              tIxy.x=(wrapvalue((tFxy.x/tImageSize(2).x)*360)/360)*tImageSize(2).x
              tIxy.y=(wrapvalue((tFxy.y/tImageSize(2).y)*360)/360)*tImageSize(2).y
              Pos3=12+(tIxy.y*(tImageSize(2).x*4))+(tIxy.x*4)
              write memblock byte tMemblock(3),Pos1+2,memblock byte(tMemblock(1),Pos2+2)
              write memblock byte tMemblock(3),Pos1+1,memblock byte(tMemblock(1),Pos2+1)
              write memblock byte tMemblock(3),Pos1+0,memblock byte(tMemblock(1),Pos2+0)
              write memblock byte tMemblock(3),Pos1+3,memblock byte(tMemblock(2),Pos3+2)
              tIxy.x=x
              if tStage>3 then tIxy.x=x+(tImageSize(3).x/2)
              tIxy.y=y
              Pos1=12+(tIxy.y*(tImageSize(3).x*4))+(tIxy.x*4)
              tFxy.x=x
              if tStage>3 then tFxy.x=tImageSize(2).x-x
              tFxy.y=y
              tFxy.x=(tFxy.x*((tImageSize(2).x+32)/tImageSize(2).x))
              tIxy.x=(wrapvalue((tFxy.x/tImageSize(2).x)*360)/360)*tImageSize(2).x
              tIxy.y=(wrapvalue((tFxy.y/tImageSize(2).y)*360)/360)*tImageSize(2).y
              Pos2=12+(tIxy.y*(tImageSize(2).x*4))+(tIxy.x*4)
              if tStage=0 or tStage=4 then write memblock byte tMemblock(4),Pos1+2,memblock byte(tMemblock(2),Pos2+1)
              if tStage=1 or tStage=5 then write memblock byte tMemblock(4),Pos1+1,memblock byte(tMemblock(2),Pos2+1)
              if tStage=2 or tStage=6 then write memblock byte tMemblock(4),Pos1+0,memblock byte(tMemblock(2),Pos2+1)
              if tStage=3 or tStage=7 then write memblock byte tMemblock(4),Pos1+3,memblock byte(tMemblock(2),Pos2+1)
           next y
        next x
        delete memblock tMemblock(1)
        delete memblock tMemblock(2)
        inc tStage
      next f
      if t=0
        if image exist(iAtlas1)=1 then delete image iAtlas1
        make image from memblock iAtlas1,tMemblock(3)
      endif
      if t=1
        if image exist(iAtlas2)=1 then delete image iAtlas2
        make image from memblock iAtlas2,tMemblock(3)
      endif
      if t=2
        if image exist(iAtlas3)=1 then delete image iAtlas3
        make image from memblock iAtlas3,tMemblock(3)
      endif
      if t=3
        if image exist(iAtlas4)=1 then delete image iAtlas4
        make image from memblock iAtlas4,tMemblock(3)
      endif
      delete memblock tMemblock(3)
    next t
    if image exist(iAtlasNormal)=1 then delete image iAtlasNormal
    make image from memblock iAtlasNormal,tMemblock(4)
    delete memblock tMemblock(4)
  endif
endfunction
`--------------
` Get Terrain Height
`--------------
function Terrain_GetHeight(iPosX as float,iPosZ as float)
  if Terrain_Enabled>0
    local tFloatxy as AL_Vec3Float
    local rHeight as float
    rHeight=0
    Ix=int(iPosX/Terrain_TileSize)
    Iz=int(iPosZ/Terrain_TileSize)
    Ix2=int(iPosX/(Terrain_TileSize*2))*2
    Iz2=int(iPosZ/(Terrain_TileSize*2))*2
    if Ix>-1 and Iz>-1 and Ix<Terrain_Size.x and Iz<Terrain_Size.y
      tFloatxy.x=(iPosX-(Ix*Terrain_TileSize))/Terrain_TileSize
      tFloatxy.z=(iPosZ-(Iz*Terrain_TileSize))/Terrain_TileSize
      if (Ix2-Ix)=0 and (Iz2-Iz)=0
        if (((1-tFloatxy.z)+tFloatxy.x)-(tFloatxy.z+(1-tFloatxy.x)))>0
          rHeight=Terrain_HeightWrap(Ix+1,Iz)+((Terrain_HeightWrap(Ix,Iz)-Terrain_HeightWrap(Ix+1,Iz))*(1-tFloatxy.x))+((Terrain_HeightWrap(Ix+1,Iz+1)-Terrain_HeightWrap(Ix+1,Iz))*tFloatxy.z)
        else
          rHeight=Terrain_HeightWrap(Ix,Iz+1)+((Terrain_HeightWrap(Ix+1,Iz+1)-Terrain_HeightWrap(Ix,Iz+1))*tFloatxy.x)+((Terrain_HeightWrap(Ix,Iz)-Terrain_HeightWrap(Ix,Iz+1))*(1-tFloatxy.z))
        endif
      endif
      if (Ix2-Ix)=-1 and (Iz2-Iz)=-1
        if (((1-tFloatxy.z)+tFloatxy.x)-(tFloatxy.z+(1-tFloatxy.x)))>0
          rHeight=Terrain_HeightWrap(Ix+1,Iz)+((Terrain_HeightWrap(Ix,Iz)-Terrain_HeightWrap(Ix+1,Iz))*(1-tFloatxy.x))+((Terrain_HeightWrap(Ix+1,Iz+1)-Terrain_HeightWrap(Ix+1,Iz))*tFloatxy.z)
        else
          rHeight=Terrain_HeightWrap(Ix,Iz+1)+((Terrain_HeightWrap(Ix+1,Iz+1)-Terrain_HeightWrap(Ix,Iz+1))*tFloatxy.x)+((Terrain_HeightWrap(Ix,Iz)-Terrain_HeightWrap(Ix,Iz+1))*(1-tFloatxy.z))
        endif
      endif
      if (Ix2-Ix)=-1 and (Iz2-Iz)=0
        if (((1-tFloatxy.x)-tFloatxy.z)-(tFloatxy.z-(1-tFloatxy.x)))>0
          rHeight=Terrain_HeightWrap(Ix,Iz)+((Terrain_HeightWrap(Ix+1,Iz)-Terrain_HeightWrap(Ix,Iz))*tFloatxy.x)+((Terrain_HeightWrap(Ix,Iz+1)-Terrain_HeightWrap(Ix,Iz))*tFloatxy.z)
        else
          rHeight=Terrain_HeightWrap(Ix+1,Iz+1)+((Terrain_HeightWrap(Ix+1,Iz)-Terrain_HeightWrap(Ix+1,Iz+1))*(1-tFloatxy.z))+((Terrain_HeightWrap(Ix,Iz+1)-Terrain_HeightWrap(Ix+1,Iz+1))*(1-tFloatxy.x))
        endif
      endif
      if (Ix2-Ix)=0 and (Iz2-Iz)=-1
        if (((1-tFloatxy.x)-tFloatxy.z)-(tFloatxy.z-(1-tFloatxy.x)))>0
          rHeight=Terrain_HeightWrap(Ix,Iz)+((Terrain_HeightWrap(Ix+1,Iz)-Terrain_HeightWrap(Ix,Iz))*tFloatxy.x)+((Terrain_HeightWrap(Ix,Iz+1)-Terrain_HeightWrap(Ix,Iz))*tFloatxy.z)
        else
          rHeight=Terrain_HeightWrap(Ix+1,Iz+1)+((Terrain_HeightWrap(Ix+1,Iz)-Terrain_HeightWrap(Ix+1,Iz+1))*(1-tFloatxy.z))+((Terrain_HeightWrap(Ix,Iz+1)-Terrain_HeightWrap(Ix+1,Iz+1))*(1-tFloatxy.x))
        endif
      endif
    endif
    rHeight=(rHeight*(Terrain_Height/255))+Terrain_PositionY
  endif
endfunction rHeight
`--------------
` Height Wrap
`--------------
function Terrain_HeightWrap(ix as float,iz as float)
  local tReturn as float
  x=(wrapvalue((ix/Terrain_Size.x)*360)/360)*Terrain_Size.x
  z=(wrapvalue((iz/Terrain_Size.y)*360)/360)*Terrain_Size.y
  tReturn=Terrain_Height(x,z)
endfunction tReturn
`--------------
` Cast ray on terrain
`--------------
function Terrain_Ray(iPosX as float,iPosY as float,iPosZ as float,iToPosX as float,iToPosY as float,iToPosZ as float)
  local tRays as integer
  local tAccuracy as integer
  local tFromPos as AL_Vec3Float
  local tToPos as AL_Vec3Float
  local tTestPos as AL_Vec3Float
  tRays=30
  `tAccuracy=15
  tAccuracy=25
  tFromPos.x=iPosX
  tFromPos.y=iPosY
  tFromPos.z=iPosZ
  tToPos.x=iToPosX
  tToPos.y=iToPosY
  tToPos.z=iToPosZ
  repeat
    for r=1 to tRays
      tTestPos.x=tFromPos.x+(r*((tToPos.x-tFromPos.x)/tRays))
      tTestPos.y=tFromPos.y+(r*((tToPos.y-tFromPos.y)/tRays))
      tTestPos.z=tFromPos.z+(r*((tToPos.z-tFromPos.z)/tRays))
      if tTestPos.y<Terrain_GetHeight(tTestPos.x,tTestPos.z)
        tFromPos.x=tFromPos.x+((r-1)*((tToPos.x-tFromPos.x)/tRays))
        tFromPos.y=tFromPos.y+((r-1)*((tToPos.y-tFromPos.y)/tRays))
        tFromPos.z=tFromPos.z+((r-1)*((tToPos.z-tFromPos.z)/tRays))
        tToPos=tTestPos
        exit
      endif
    next r
    if r>tRays-1 then Acc=tAccuracy:tdis=1
    set vector3 AL_Vector3(1),tFromPos.x-tToPos.x,tFromPos.y-tToPos.y,tFromPos.z-tToPos.z
    if length vector3(AL_Vector3(1))<5 then Acc=tAccuracy
    inc Acc
  until Acc>tAccuracy
  Terrain_RayPosition.x=tToPos.x
  Terrain_RayPosition.y=Terrain_GetHeight(tToPos.x,tToPos.z)
  Terrain_RayPosition.z=tToPos.z
  set vector3 AL_Vector3(1),iPosX-Terrain_RayPosition.x,iPosY-Terrain_RayPosition.y,iPosZ-Terrain_RayPosition.z
  Dist#=length vector3(AL_Vector3(1))
endfunction Dist#
`--------------
` Update Terrain
`--------------
function Terrain_Update()
  if Terrain_Enabled=1
    local tSize as float
    local tPosition as AL_Vec3Float
    local tWrap as AL_Vec2Float
    local tWrapMod as AL_Vec2Integer
    tSize=Terrain_TileSize
    position object Terrain_Object(1),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
    position object Terrain_Object(2),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
    position object Terrain_Object(3),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
    position object Terrain_Object(4),AL_CameraPos.x,AL_CameraPos.y,AL_CameraPos.z
    for t=1 to 4
      Terrain_ShaderIndex(1,t)=0
    next t
    for t=1 to 5
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      tWrap.x=(wrapvalue(((AL_CameraPos.x+tSize)/(tSize*2))*360)/360)*(tSize*2)
      tWrap.y=(wrapvalue(((AL_CameraPos.z+tSize)/(tSize*2))*360)/360)*(tSize*2)
      tWrapMod.x=int(tWrap.x/(tSize/2))
      tWrapMod.y=int(tWrap.y/(tSize/2))
      tWrap.x=1-(tWrap.x/(tSize*2))
      tWrap.y=1-(tWrap.y/(tSize*2))
      null=get object effect(Terrain_Object(1),t-1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1),AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize/2),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-tSize,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize/2),0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-((tSize*2)-(tSize/2)),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-tSize,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize*2),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+4,AL_Vector4(1)
      Terrain_ShaderIndex(0,0)=0
      if tWrapMod.x=0 or tWrapMod.x=3 then Terrain_ShaderIndex(0,0)=1
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2),AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.y>0 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.y>0 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+4,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+5,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y>0 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+6,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.y>0 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+7,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y>0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+8,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+9,AL_Vector4(1)
      set vector4 AL_Vector4(1),tWrap.y,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      Terrain_ShaderIndex(0,1)=0
      Terrain_ShaderIndex(0,2)=0
      Terrain_ShaderIndex(0,3)=0
      Terrain_ShaderIndex(0,4)=0
      if tWrapMod.y=0
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=1
      endif
      if tWrapMod.y=1 or tWrapMod.y=2
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=1:Terrain_ShaderIndex(0,3)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=1:Terrain_ShaderIndex(0,4)=1
      endif
      if tWrapMod.y=3
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=-2
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,1)=-2
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,2)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=-2
      endif
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,1),Terrain_ShaderIndex(0,2),Terrain_ShaderIndex(0,3),Terrain_ShaderIndex(0,4)
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      Terrain_ShaderIndex(0,1)=0
      Terrain_ShaderIndex(0,2)=0
      Terrain_ShaderIndex(0,3)=0
      Terrain_ShaderIndex(0,4)=0
      if tWrapMod.y=0
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,1)=1
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,2)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=1
      endif
      if tWrapMod.y=1 or tWrapMod.y=2
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=1:Terrain_ShaderIndex(0,3)=1
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=-2
      endif
      if tWrapMod.y=3
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=-2
      endif
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,1),Terrain_ShaderIndex(0,2),Terrain_ShaderIndex(0,3),Terrain_ShaderIndex(0,4)
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      release effect pointer
      null=get object effect(Terrain_Object(2),t-1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1),AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-(tSize/2),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-tSize,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x-(tSize/2),0,tPosition.y,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-((tSize*2)-(tSize/2)),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x-tSize,0,tPosition.y,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-(tSize*2),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+4,AL_Vector4(1)
      Terrain_ShaderIndex(0,0)=1
      if tWrapMod.y=0 or tWrapMod.y=3 then Terrain_ShaderIndex(0,0)=0
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2),AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.x>0 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.x>0 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+4,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+5,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x>0 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x=3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+6,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.x>0 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+7,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x>0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+8,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+9,AL_Vector4(1)
      set vector4 AL_Vector4(1),tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      release effect pointer
      null=get object effect(Terrain_Object(3),t-1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1),AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize/2),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+tSize,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize/2),0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+((tSize*2)-(tSize/2)),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+tSize,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize*2),0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+4,AL_Vector4(1)
      Terrain_ShaderIndex(0,0)=0
      if tWrapMod.x=0 or tWrapMod.x=3 then Terrain_ShaderIndex(0,0)=1
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2),AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.y<3 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.y<3 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+4,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+5,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y<3 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+6,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.y<3 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+7,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.y<3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+8,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+9,AL_Vector4(1)
      set vector4 AL_Vector4(1),1-tWrap.y,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      set vector4 AL_Vector4(1),tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      Terrain_ShaderIndex(0,1)=0
      Terrain_ShaderIndex(0,2)=0
      Terrain_ShaderIndex(0,3)=0
      Terrain_ShaderIndex(0,4)=0
      if tWrapMod.y=0
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=-2
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,1)=-2
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,2)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=-2
      endif
      if tWrapMod.y=1 or tWrapMod.y=2
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=1:Terrain_ShaderIndex(0,4)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=1:Terrain_ShaderIndex(0,3)=1
      endif
      if tWrapMod.y=3
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=1
      endif
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,1),Terrain_ShaderIndex(0,2),Terrain_ShaderIndex(0,3),Terrain_ShaderIndex(0,4)
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      Terrain_ShaderIndex(0,1)=0
      Terrain_ShaderIndex(0,2)=0
      Terrain_ShaderIndex(0,3)=0
      Terrain_ShaderIndex(0,4)=0
      if tWrapMod.y=0
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=-2
      endif
      if tWrapMod.y=1 or tWrapMod.y=2
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,1)=-2
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,2)=-2
      endif
      if tWrapMod.y=3
        if tWrapMod.x=0 then Terrain_ShaderIndex(0,2)=1
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,1)=1
        if tWrapMod.x=1 or tWrapMod.x=2 then Terrain_ShaderIndex(0,2)=1
        if tWrapMod.x=3 then Terrain_ShaderIndex(0,1)=1
      endif
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,1),Terrain_ShaderIndex(0,2),Terrain_ShaderIndex(0,3),Terrain_ShaderIndex(0,4)
      set effect constant vector element "TerrainIndex4",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      release effect pointer
      null=get object effect(Terrain_Object(4),t-1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1),AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+(tSize/2),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+tSize,0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x+(tSize/2),0,tPosition.y,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+((tSize*2)-(tSize/2)),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
      if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x+tSize,0,tPosition.y,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+(tSize*2),0,tPosition.y,0
      set effect constant vector element "TerrainIndex1",Terrain_ShaderIndex(1,1)+4,AL_Vector4(1)
      Terrain_ShaderIndex(0,0)=1
      if tWrapMod.y=0 or tWrapMod.y=3 then Terrain_ShaderIndex(0,0)=0
      set vector4 AL_Vector4(1),0,0,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2),AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+1,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+2,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,0,0,0
      if tWrapMod.x<3 then set vector4 AL_Vector4(1),0,1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+3,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,0,0
      if tWrapMod.x<3 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+4,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+5,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x<3 then set vector4 AL_Vector4(1),1-Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x=0 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+6,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,0
      if tWrapMod.x<3 then set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+7,AL_Vector4(1)
      set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),1,0,0
      if tWrapMod.x<3 then set vector4 AL_Vector4(1),Terrain_ShaderIndex(0,0),0,1,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+8,AL_Vector4(1)
      set vector4 AL_Vector4(1),0,1,0,1
      set effect constant vector element "TerrainIndex2",Terrain_ShaderIndex(1,2)+9,AL_Vector4(1)
      set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Terrain_TileSize*2),0,0
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3),AL_Vector4(1)
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+1,AL_Vector4(1)
      set effect constant vector element "TerrainIndex3",Terrain_ShaderIndex(1,3)+2,AL_Vector4(1)
      release effect pointer
      inc Terrain_ShaderIndex(1,1),5
      inc Terrain_ShaderIndex(1,2),10
      inc Terrain_ShaderIndex(1,3),3
    next t
  endif
endfunction
`--------------
` Frustum Culling
`--------------
function Terrain_FrustumCull()
  if Terrain_Enabled=1
    local tSize as float
    local tOldPosZ as float
    local tCull as float
    local tPosition as AL_Vec3Float
    tSize=Terrain_TileSize
    for t=1 to 5
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      tCull=tPosition.z/1.5
      if Terrain_Height/1.5>tCull then tCull=Terrain_Height/1.5
      if AL_GetSphereInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y+tPosition.z)-(tSize*8),tCull)=1
        if AL_GetBoxInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y+tPosition.z),tPosition.z,Terrain_Height/2,Terrain_TileSize)=1 or AL_GetBoxInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y+tOldPosZ),tOldPosZ+Terrain_TileSize,Terrain_Height/2,Terrain_TileSize)=1
          show limb Terrain_Object(1),t-1
          exclude limb off Terrain_Object(1),t-1
        else
          hide limb Terrain_Object(1),t-1
          exclude limb on Terrain_Object(1),t-1
        endif
      else
        hide limb Terrain_Object(1),t-1
        exclude limb on Terrain_Object(1),t-1
      endif
      if AL_GetSphereInFrustum(0,(tPosition.x+tPosition.z)-(tSize*8),Terrain_Height/2,tPosition.y,tCull)=1
        if AL_GetBoxInFrustum(0,(tPosition.x+tPosition.z),Terrain_Height/2,tPosition.y,Terrain_TileSize,Terrain_Height,tPosition.z)=1 or AL_GetBoxInFrustum(0,(tPosition.x+tOldPosZ),Terrain_Height/2,tPosition.y,Terrain_TileSize,Terrain_Height,tOldPosZ+Terrain_TileSize)=1
          show limb Terrain_Object(2),t-1
          exclude limb off Terrain_Object(2),t-1
        else
          hide limb Terrain_Object(2),t-1
          exclude limb on Terrain_Object(2),t-1
        endif
      else
        hide limb Terrain_Object(2),t-1
        exclude limb on Terrain_Object(2),t-1
      endif
      if AL_GetSphereInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y-tPosition.z)+(tSize*8),tCull)=1
        if AL_GetBoxInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y-tPosition.z),tPosition.z,Terrain_Height/2,Terrain_TileSize)=1 or AL_GetBoxInFrustum(0,tPosition.x,Terrain_Height/2,(tPosition.y-tOldPosZ),tOldPosZ+Terrain_TileSize,Terrain_Height/2,Terrain_TileSize)=1
          show limb Terrain_Object(3),t-1
          exclude limb off Terrain_Object(3),t-1
        else
          hide limb Terrain_Object(3),t-1
          exclude limb on Terrain_Object(3),t-1
        endif
      else
        hide limb Terrain_Object(3),t-1
        exclude limb on Terrain_Object(3),t-1
      endif
      if AL_GetSphereInFrustum(0,(tPosition.x-tPosition.z)+(tSize*8),Terrain_Height/2,tPosition.y,tCull)=1
        if AL_GetBoxInFrustum(0,(tPosition.x-tPosition.z),Terrain_Height/2,tPosition.y,Terrain_TileSize,Terrain_Height/2,tPosition.z)=1 or AL_GetBoxInFrustum(0,(tPosition.x-tOldPosZ),Terrain_Height/2,tPosition.y,Terrain_TileSize,Terrain_Height/2,tOldPosZ+Terrain_TileSize)=1
          show limb Terrain_Object(4),t-1
          exclude limb off Terrain_Object(4),t-1
        else
          hide limb Terrain_Object(4),t-1
          exclude limb on Terrain_Object(4),t-1
        endif
      else
        hide limb Terrain_Object(4),t-1
        exclude limb on Terrain_Object(4),t-1
      endif
    next t
  endif
endfunction
`--------------
` Light Culling
`--------------
function Terrain_LightCull(iPosX as float,iPosY as float,iPosZ as float,iRange as float)
  if Terrain_Enabled=1
    local tSize as float
    local tOldPosZ as float
    local tPosition as AL_Vec3Float
    tSize=Terrain_TileSize
    for x=1 to 4
      for t=1 to 5
        hide limb Terrain_Object(x),t-1
        exclude limb on Terrain_Object(x),t-1
      next t
    next x
    for t=1 to 5
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      if AL_BoxCollision(iPosX,iPosY,iPosZ,tPosition.x,Terrain_Height/2,tPosition.y+(tPosition.z-(tSize*8)),(tPosition.z*2)+iRange,Terrain_Height+iRange,(tSize*16)+iRange)=1
        if Terrain_LightGroundHeigth(iPosX,iPosY,iPosZ,iRange/2)=1
          show limb Terrain_Object(1),t-1
          exclude limb off Terrain_Object(1),t-1
        endif
      endif
      if AL_BoxCollision(iPosX,iPosY,iPosZ,tPosition.x+(tPosition.z-(tSize*8)),Terrain_Height/2,tPosition.y,(tSize*16)+iRange,Terrain_Height+iRange,(tPosition.z*2)+iRange)=1
        if Terrain_LightGroundHeigth(iPosX,iPosY,iPosZ,iRange/2)=1
          show limb Terrain_Object(2),t-1
          exclude limb off Terrain_Object(2),t-1
        endif
      endif
      if AL_BoxCollision(iPosX,iPosY,iPosZ,tPosition.x,Terrain_Height/2,tPosition.y-(tPosition.z-(tSize*8)),(tPosition.z*2)+iRange,Terrain_Height+iRange,(tSize*16)+iRange)=1
        if Terrain_LightGroundHeigth(iPosX,iPosY,iPosZ,iRange/2)=1
          show limb Terrain_Object(3),t-1
          exclude limb off Terrain_Object(3),t-1
        endif
      endif
      if AL_BoxCollision(iPosX,iPosY,iPosZ,tPosition.x-(tPosition.z-(tSize*8)),Terrain_Height/2,tPosition.y,(tSize*16)+iRange,Terrain_Height+iRange,(tPosition.z*2)+iRange)=1
        if Terrain_LightGroundHeigth(iPosX,iPosY,iPosZ,iRange/2)=1
          show limb Terrain_Object(4),t-1
          exclude limb off Terrain_Object(4),t-1
        endif
      endif
    next t
  endif
endfunction
`--------------
` Directional Light Culling
`--------------
function Terrain_LightDirCull(iRange as float)
  if Terrain_Enabled=1
    local tSize as float
    local tScale as float
    local tOldPosZ as float
    local tPosition as AL_Vec3Float
    local tPos as AL_Vec3Float
    tSize=Terrain_TileSize
    tScale=iRange
    for x=1 to 4
      for t=1 to 5
        hide limb Terrain_Object(x),t-1
        exclude limb on Terrain_Object(x),t-1
      next t
    next x
    for t=1 to 5
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      for x=0 to floor(AL_CameraData(2)/tScale)
        tPos.x=x Vector3(AL_Vector3(4))-(AL_DirLightDirection.x*tScale*x)
        tPos.y=y Vector3(AL_Vector3(4))-(AL_DirLightDirection.y*tScale*x)
        tPos.z=z Vector3(AL_Vector3(4))-(AL_DirLightDirection.z*tScale*x)
        if AL_BoxCollision(tPos.x,tPos.y,tPos.z,tPosition.x,Terrain_Height/2,(tPosition.y+(tPosition.z-(tSize*8))),(tPosition.z*2)+tScale,Terrain_Height+tScale,(tSize*16)+tScale)=1
          show limb Terrain_Object(1),t-1
          exclude limb off Terrain_Object(1),t-1
        endif
        if AL_BoxCollision(tPos.x,tPos.y,tPos.z,(tPosition.x+(tPosition.z-(tSize*8))),Terrain_Height/2,tPosition.y,(tSize*16)+tScale,Terrain_Height+tScale,(tPosition.z*2)+tScale)=1
          show limb Terrain_Object(2),t-1
          exclude limb off Terrain_Object(2),t-1
        endif
        if AL_BoxCollision(tPos.x,tPos.y,tPos.z,tPosition.x,Terrain_Height/2,(tPosition.y-(tPosition.z-(tSize*8))),(tPosition.z*2)+tScale,Terrain_Height+tScale,(tSize*16)+tScale)=1
          show limb Terrain_Object(3),t-1
          exclude limb off Terrain_Object(3),t-1
        endif
        if AL_BoxCollision(tPos.x,tPos.y,tPos.z,(tPosition.x-(tPosition.z-(tSize*8))),Terrain_Height/2,tPosition.y,(tSize*16)+tScale,Terrain_Height+tScale,(tPosition.z*2)+tScale)=1
          show limb Terrain_Object(4),t-1
          exclude limb off Terrain_Object(4),t-1
        endif
      next x
    next t
  endif
endfunction
`--------------
` Spot Light Update From Terrain
`--------------
function Terrain_LightSpotUpdate(iSpotShadowUpdate as integer)
  if Terrain_Enabled=1
    local tLight as integer
    local tSize as float
    local tOldPosZ as float
    local tPosition as AL_Vec3Float
    tLight=AL_SpotShadowMap(iSpotShadowUpdate).Number
    tSize=Terrain_TileSize
    for t=1 to 3
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      if AL_SpotShadowMap(iSpotShadowUpdate).Update=1
        if AL_BoxCollision(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,tPosition.x,Terrain_Height/2,tPosition.y+(tPosition.z-(tSize/2)),(tPosition.z*2)+(AL_SpotLight(tLight).Range*2),Terrain_Height+(AL_SpotLight(tLight).Range*2),tSize+(AL_SpotLight(tLight).Range*2))=1
          if AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainP.y<>int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainP.y=int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range)=1
              AL_SpotShadowMap(iSpotShadowUpdate).Update=1
            endif
          endif
        endif
      endif
      if AL_SpotShadowMap(iSpotShadowUpdate).Update=1
        if AL_BoxCollision(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,tPosition.x+(tPosition.z-(tSize/2)),Terrain_Height/2,tPosition.y,tSize+(AL_SpotLight(tLight).Range*2),Terrain_Height+(AL_SpotLight(tLight).Range*2),(tPosition.z*2)+(AL_SpotLight(tLight).Range*2))=1
          if AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainP.x<>int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainP.x=int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range)=1
              AL_SpotShadowMap(iSpotShadowUpdate).Update=1
            endif
          endif
        endif
      endif
      if AL_SpotShadowMap(iSpotShadowUpdate).Update=1
        if AL_BoxCollision(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,tPosition.x,Terrain_Height/2,tPosition.y-(tPosition.z-(tSize/2)),(tPosition.z*2)+(AL_SpotLight(tLight).Range*2),Terrain_Height+(AL_SpotLight(tLight).Range*2),tSize+(AL_SpotLight(tLight).Range*2))=1
          if AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainN.y<>int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainN.y=int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range)=1
              AL_SpotShadowMap(iSpotShadowUpdate).Update=1
            endif
          endif
        endif
      endif
      if AL_SpotShadowMap(iSpotShadowUpdate).Update=1
        if AL_BoxCollision(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,tPosition.x-(tPosition.z-(tSize/2)),Terrain_Height/2,tPosition.y,tSize+(AL_SpotLight(tLight).Range*2),Terrain_Height+(AL_SpotLight(tLight).Range*2),(tPosition.z*2)+(AL_SpotLight(tLight).Range*2))=1
          if AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainN.x<>int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            AL_SpotShadowMap(iSpotShadowUpdate).UpdateFromTerrainN.x=int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_SpotLight(tLight).Position.x,AL_SpotLight(tLight).Position.y,AL_SpotLight(tLight).Position.z,AL_SpotLight(tLight).Range)=1
              AL_SpotShadowMap(iSpotShadowUpdate).Update=1
            endif
          endif
        endif
      endif
    next t
  endif
endfunction
`--------------
` Point Light Update From Terrain
`--------------
function Terrain_LightPointUpdate(iPointShadowUpdate as integer)
  if Terrain_Enabled=1
    local tLight as integer
    local tSide as integer
    local tSize as float
    local tOldPosZ as float
    local tPosition as AL_Vec3Float
    tLight=AL_PointShadowMap(iPointShadowUpdate).Number
    tSide=iPointShadowUpdate*6
    tSize=Terrain_TileSize
    for t=1 to 3
      tSize=tSize*2
      tPosition.x=int((abs(AL_CameraPos.x)+(tSize/2))/tSize)*tSize
      tPosition.y=int((abs(AL_CameraPos.z)+(tSize/2))/tSize)*tSize
      tOldPosZ=tPosition.z
      tPosition.z=tPosition.z+(tSize*16)
      if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
      if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
      if AL_PointShadowSide(tSide).Update<>1
        if AL_BoxCollision(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,tPosition.x,Terrain_Height/2,tPosition.y+(tPosition.z-(tSize/2)),(tPosition.z*2)+(AL_PointLight(tLight).Range*2),Terrain_Height+(AL_PointLight(tLight).Range*2),tSize+(AL_PointLight(tLight).Range*2))=1
          if AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainP.y<>int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainP.y=int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
              for s=0 to 5:AL_PointShadowSide(tSide+s).Update=1:next s
            endif
          endif
        endif
      endif
      if AL_PointShadowSide(tSide).Update<>1
        if AL_BoxCollision(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,tPosition.x+(tPosition.z-(tSize/2)),Terrain_Height/2,tPosition.y,tSize+(AL_PointLight(tLight).Range*2),Terrain_Height+(AL_PointLight(tLight).Range*2),(tPosition.z*2)+(AL_PointLight(tLight).Range*2))=1
          if AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainP.x<>int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainP.x=int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
              for s=0 to 5:AL_PointShadowSide(tSide+s).Update=1:next s
            endif
          endif
        endif
      endif
      if AL_PointShadowSide(tSide).Update<>1
        if AL_BoxCollision(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,tPosition.x,Terrain_Height/2,tPosition.y-(tPosition.z-(tSize/2)),(tPosition.z*2)+(AL_PointLight(tLight).Range*2),Terrain_Height+(AL_PointLight(tLight).Range*2),tSize+(AL_PointLight(tLight).Range*2))=1
          if AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainN.y<>int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainN.y=int(AL_CameraPos.z/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
              for s=0 to 5:AL_PointShadowSide(tSide+s).Update=1:next s
            endif
          endif
        endif
      endif
      if AL_PointShadowSide(tSide).Update<>1
        if AL_BoxCollision(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,tPosition.x-(tPosition.z-(tSize/2)),Terrain_Height/2,tPosition.y,tSize+(AL_PointLight(tLight).Range*2),Terrain_Height+(AL_PointLight(tLight).Range*2),(tPosition.z*2)+(AL_PointLight(tLight).Range*2))=1
          if AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainN.x<>int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            AL_PointShadowMap(iPointShadowUpdate).UpdateFromTerrainN.x=int(AL_CameraPos.x/(tSize*0.25))*(tSize*0.25)
            if Terrain_LightGroundHeigth(AL_PointLight(tLight).Position.x,AL_PointLight(tLight).Position.y,AL_PointLight(tLight).Position.z,AL_PointLight(tLight).Range)=1
              for s=0 to 5:AL_PointShadowSide(tSide+s).Update=1:next s
            endif
          endif
        endif
      endif
    next t
  endif
endfunction
`--------------
` Light ground heigth
`--------------
function Terrain_LightGroundHeigth(iPosX as float,iPosY as float,iPosZ as float,iRange as float)
  for x=-1 to 1
    for z=-1 to 1
      if (iPosY-Terrain_GetHeight(iPosX+(x*iRange),iPosZ+(z*iRange)))-iRange<0
        exitfunction 1
      endif
    next z
  next x
endfunction 0
`====================================================
` Water Functions
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`--------------
` Build Water
`--------------
function Water_Create(iWaves as boolean,iCaustics as boolean,iReflection as boolean,iDetailMap as boolean,iSpecular as boolean,iChromaticAberration as boolean)
   if Water_Enabled=0
   `Variables
      global Water_Enabled as boolean
      global Water_Shaders as integer
      global Water_AreaFog as integer
      global Water_Mode as boolean
      global Water_Reflection as boolean
      global Water_Size as float
      global Water_TileSize as float
      global Water_Height as float
      global Water_WaveHeight as float
      global Water_FogRange as float
      global Water_FogHeight as float
      global Water_FogColor as AL_Vec3float
      Water_Enabled=1
      if iWaves=0 then Water_Shaders=1
      if iWaves=1 then Water_Shaders=4
      Water_Reflection=iReflection
      Water_Size=400
   `Arrays
      global dim Water_Object(5) as integer
      global dim Water_Effect(5) as integer
      global dim Water_Image(3) as integer
      global dim Water_ShaderIndex(1,4) as integer
   `Load textures
      Water_Image(1)=find free image()
      load image AL_Directory+"Resources/Waves.dds",Water_Image(1)
      Water_Image(2)=find free image()
      load image AL_Directory+"Resources/Detail Waves.dds",Water_Image(2)
      Water_Image(3)=find free image()
      load image AL_Directory+"Resources/Screen Distort.dds",Water_Image(3)
   `Load objects
      Effect_LockIdentifier(AL_Directory+"Alpha/Water/Water1.fx")
      Effect_SetIdentifier("EnableReflection",iReflection)
      Effect_SetIdentifier("EnableSpecular",iSpecular)
      Effect_UnLockIdentifier()
      Water_Object(0)=find free object()
      load object AL_Directory+"Resources/Water Edge.dbo",Water_Object(0)
      Water_Effect(0)=find free effect()
      load effect AL_Directory+"Alpha/Water/Water1.fx",Water_Effect(0),0,0
      if Water_Shaders=4
         Effect_LockIdentifier(AL_Directory+"Alpha/Water/WaterX.fx")
         Effect_SetIdentifier("EnableReflection",iReflection)
         Effect_SetIdentifier("EnableDetailMap",iDetailMap)
         Effect_SetIdentifier("EnableSpecular",iSpecular)
         Effect_SetIdentifier("EnableChromaticAberration",iChromaticAberration)
         Effect_UnLockIdentifier()
         Effect_LockIdentifier(AL_Directory+"Alpha/Water/WaterZ.fx")
         Effect_SetIdentifier("EnableReflection",iReflection)
         Effect_SetIdentifier("EnableDetailMap",iDetailMap)
         Effect_SetIdentifier("EnableSpecular",iSpecular)
         Effect_SetIdentifier("EnableChromaticAberration",iChromaticAberration)
         Effect_UnLockIdentifier()
         Water_Object(1)=find free object()
         load object AL_Directory+"Resources/PlainPZ.dbo",Water_Object(1)
         Water_Effect(1)=find free effect()
         load effect AL_Directory+"Alpha/Water/WaterZ.fx",Water_Effect(1),0,0
         Water_Object(2)=find free object()
         load object AL_Directory+"Resources/PlainPX.dbo",Water_Object(2)
         Water_Effect(2)=find free effect()
         load effect AL_Directory+"Alpha/Water/WaterX.fx",Water_Effect(2),0,0
         Water_Object(3)=find free object()
         load object AL_Directory+"Resources/PlainNZ.dbo",Water_Object(3)
         Water_Effect(3)=find free effect()
         load effect AL_Directory+"Alpha/Water/WaterZ.fx",Water_Effect(3),0,0
         Water_Object(4)=find free object()
         load object AL_Directory+"Resources/PlainNX.dbo",Water_Object(4)
         Water_Effect(4)=find free effect()
         load effect AL_Directory+"Alpha/Water/WaterX.fx",Water_Effect(4),0,0
      else
         Effect_LockIdentifier(AL_Directory+"Alpha/Water/Water2.fx")
         Effect_SetIdentifier("EnableReflection",iReflection)
         Effect_SetIdentifier("EnableDetailMap",iDetailMap)
         Effect_SetIdentifier("EnableSpecular",iSpecular)
         Effect_SetIdentifier("EnableChromaticAberration",iChromaticAberration)
         Effect_UnLockIdentifier()
         Water_Object(1)=find free object()
         make object plain Water_Object(1),100,100
         rotate limb Water_Object(1),0,90,0,0
         make mesh from object 1,Water_Object(1)
         delete object Water_Object(1)
         make object Water_Object(1),1,0
         Water_Effect(1)=find free effect()
         load effect AL_Directory+"Alpha/Water/Water2.fx",Water_Effect(1),0,0
      endif
      for t=0 to Water_Shaders
         if t>0 and Water_Shaders=4 then remove limb Water_Object(t),4:remove limb Water_Object(t),3
         set object effect Water_Object(t),Water_Effect(t)
         texture object Water_Object(t),1,Water_Image(1)
         texture object Water_Object(t),2,Water_Image(1)
         texture object Water_Object(t),3,Water_Image(2)
         texture object Water_Object(t),4,AL_Image(4)
         texture object Water_Object(t),5,AL_Image(3)
         AlphaEffect_Add(Water_Effect(t))
         AlphaObject_Add(Water_Object(t))
      next t
      Water_Effect(5)=find free effect()
      load effect AL_Directory+"Alpha/Water/Underwater.fx",Water_Effect(5),0,1
      Water_Object(5)=find free object()
      make object plain Water_Object(5),2,2,1
      set object effect Water_Object(5),Water_Effect(5)
      texture object Water_Object(5),0,Water_Image(3)
      set object mask Water_Object(5),2^AL_Camera(5)
   `Water fog
      if iCaustics=1
         Water_AreaFog=FogArea_Create(1)
         FogArea_SetCaustics(Water_AreaFog,Water_Image(2),0,1,0,600)
      else
         Water_AreaFog=FogArea_Create(0)
      endif
   `Set Water
      Water_SetVisible(1)
      Water_SetScale(16,725,40)
      Water_SetFogColor(1500,100,20,35,50,20,35,50)
   endif
endfunction
`--------------
` Set Water Visible
`--------------
function Water_SetVisible(iVisible as boolean)
   if iVisible=0 and Water_Enabled=1
      Water_Enabled=2
      Water_Mode=0
      for t=0 to Water_Shaders
         hide object Water_Object(t)
         exclude object on Water_Object(t)
      next t
      FogArea_Visible(Water_AreaFog,0)
   endif
   if iVisible=1 and Water_Enabled=2
      Water_Enabled=1
      for t=0 to Water_Shaders
         show object Water_Object(t)
         exclude object off Water_Object(t)
      next t
      FogArea_Visible(Water_AreaFog,1)
   endif
endfunction
`--------------
` Set Water Scale
`--------------
function Water_SetScale(iTileSize as float,iHeight as float,iWaveHeight as float)
   if Water_Enabled>0
      Water_TileSize=iTileSize
      Water_Height=iHeight
      Water_WaveHeight=iWaveHeight
      set vector4 AL_Vector4(1),Water_Size,Water_Size,Water_TileSize/100,Water_TileSize*32
      set vector4 AL_Vector4(2),Water_TileSize*Water_Size,Water_TileSize*Water_Size,(0.5/Water_Size),(0.5/Water_Size)
      set vector4 AL_Vector4(3),Water_Height,Water_WaveHeight,(AL_CameraData(2)/100.0)*2,Water_TileSize*224
      for e=0 to Water_Shaders
         set effect constant vector Water_Effect(e),"WaterTileSize",AL_Vector4(2)
         set effect constant vector Water_Effect(e),"WaterSize",AL_Vector4(1)
         set effect constant vector Water_Effect(e),"WaterHeight",AL_Vector4(3)
      next e
      for e=0 to AL_EffectCount
         set effect constant float AL_Effect(e).Number,"ClipHeight",Water_Height-(Water_WaveHeight * 0.5)
      next e
   endif
endfunction
`--------------
` Set Water Color
`--------------
function Water_SetColor(iRed1 as float,iGreen1 as float,iBlue1 as float,iRed2 as float,iGreen2 as float,iBlue2 as float)
   if Water_Enabled>0
      set vector4 AL_Vector4(1),iRed1/255,iGreen1/255,iBlue1/255,0
      set vector4 AL_Vector4(2),iRed2/255,iGreen2/255,iBlue2/255,0
      for e=0 to Water_Shaders
         set effect constant vector Water_Effect(e),"WaterColor",AL_Vector4(1)
         set effect constant vector Water_Effect(e),"ReflectColor",AL_Vector4(2)
      next e
   endif
endfunction
`--------------
` Set Fog Color
`--------------
function Water_SetFogColor(iRange as float,iHeight as float,iRed1 as integer,iGreen1 as integer,iBlue1 as integer,iRed2 as integer,iGreen2 as integer,iBlue2 as integer)
   if Water_Enabled>0
      Water_FogRange=iRange
      Water_FogHeight=iHeight
      FogArea_SetColor(Water_AreaFog,iRed1,iGreen1,iBlue1,255)
      FogArea_SetColor2(Water_AreaFog,iRed2,iGreen2,iBlue2)
      FogArea_SetRange(Water_AreaFog,Water_FogRange,Water_FogHeight,Water_FogHeight)
      set vector4 AL_Vector4(1),Water_FogColor.x/255,Water_FogColor.y/255,Water_FogColor.z/255,Water_FogRange*10
      for e=0 to Water_Shaders
         set effect constant vector Water_Effect(e),"WaterFogColor",AL_Vector4(1)
      next e
   endif
endfunction
`--------------
` Update Water
`--------------
function Water_Update()
   if Water_Enabled=1
      local tSize as float
      local tSizeM as float
      local tPosition as AL_Vec3Float
      local tOldPosZ as float
      local tWrap as AL_Vec2Float
      local tWrapMod as AL_Vec2Integer
      local tCull as float
      tSize=Water_TileSize
      if AL_CameraPos.y>Water_Height-(Water_WaveHeight*0.25)
         position camera AL_Camera(3),AL_CameraPos.x,Water_Height-(AL_CameraPos.y-Water_Height),AL_CameraPos.z
         Rotate camera AL_Camera(3),-AL_CameraAng.x,AL_CameraAng.y,AL_CameraAng.z
         if Water_Mode=0
            Water_Mode=1
            for e=0 to Water_Shaders:set effect technique Water_Effect(e),"AboveWater":next e
            hide object Water_Object(5):exclude object on Water_Object(5)
            if AL_CloudsEnable=1
               set object mask AL_CloudsObject(2),(2^AL_Camera(9))+(2^AL_Camera(5))
               set object mask AL_CloudsObject(3),(2^AL_Camera(9))+(2^AL_Camera(5))
            endif
         endif
         FogArea_SetOrientation(Water_AreaFog,AL_CameraPos.x,-10,AL_CameraPos.z,-90,0,0,AL_CameraData(2),AL_CameraData(2),10+Water_Height-(Water_WaveHeight*0.666))
      else
         if Water_Mode=1
            Water_Mode=0
            for e=0 to Water_Shaders:set effect technique Water_Effect(e),"UnderWater":next e
            show object Water_Object(5):exclude object off Water_Object(5)
            if AL_CloudsEnable=1
               set object mask AL_CloudsObject(2),(2^AL_Camera(7))+(2^AL_Camera(5))
               set object mask AL_CloudsObject(3),(2^AL_Camera(7))+(2^AL_Camera(5))
            endif
         endif
         position object Water_Object(5),camera position x(),camera position y(),camera position z()
         rotate object Water_Object(5),camera angle x(),camera angle y(),camera angle z()
         FogArea_SetOrientation(waterfog,AL_CameraPos.x,-50,AL_CameraPos.z,-90,0,0,Water_FogRange*2,Water_FogRange*2,50+Water_Height)
      endif
      for t=0 to Water_Shaders
         position object Water_Object(t),AL_CameraPos.x,0,AL_CameraPos.z
         scale object Water_Object(t),AL_CameraData(2),Water_Height,AL_CameraData(2)
         Water_ShaderIndex(1,t)=0
      next t
      if Water_Shaders=4
         for t=1 to 3
            tSize=tSize*2
            tSizeM=1
            tPosition.x=int((abs(AL_CameraPos.x)+(tSize * 0.5))/tSize)*tSize
            tPosition.y=int((abs(AL_CameraPos.z)+(tSize * 0.5))/tSize)*tSize
            tOldPosZ=tPosition.z
            tPosition.z=tPosition.z+(tSize*16)
            if AL_CameraPos.x<0 then tPosition.x=-tPosition.x
            if AL_CameraPos.z<0 then tPosition.y=-tPosition.y
            tWrap.x=(wrapvalue(((AL_CameraPos.x+tSize)/(tSize*2))*360)/360)*(tSize*2)
            tWrap.y=(wrapvalue(((AL_CameraPos.z+tSize)/(tSize*2))*360)/360)*(tSize*2)
            tWrapMod.x=int(tWrap.x/(tSize * 0.5))
            tWrapMod.y=int(tWrap.y/(tSize * 0.5))
            tWrap.x=1-(tWrap.x/(tSize*2))
            tWrap.y=1-(tWrap.y/(tSize*2))
            tCull=tPosition.z
            if Water_WaveHeight>tCull then tCull=Water_WaveHeight
            if AL_GetSphereInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y+tPosition.z)-(tSize*8),tCull)=1
               if AL_GetBoxInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y+tPosition.z),tPosition.z,Water_WaveHeight*10,Water_TileSize)=1 or AL_GetBoxInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y+tOldPosZ),tOldPosZ+Water_TileSize,Water_WaveHeight*10,Water_TileSize)=1
                  show limb Water_Object(1),t-1
                  exclude limb off Water_Object(1),t-1
                  null=get object effect(Water_Object(1),t-1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1),AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize * 0.5),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-tSize,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize * 0.5),0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-((tSize*2)-(tSize * 0.5)),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-tSize,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y-(tSize*2),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+4,AL_Vector4(1)
                  Water_ShaderIndex(0,0)=0
                  if tWrapMod.x=0 or tWrapMod.x=3 then Water_ShaderIndex(0,0)=1
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2),AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.y>0 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.y>0 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+4,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+5,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y>0 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+6,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.y>0 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+7,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y>0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+8,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+9,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tWrap.y,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3),AL_Vector4(1)
                  set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3),AL_Vector4(1)
                  Water_ShaderIndex(0,1)=0
                  Water_ShaderIndex(0,2)=0
                  Water_ShaderIndex(0,3)=0
                  Water_ShaderIndex(0,4)=0
                  if tWrapMod.y=0
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=1
                  endif
                  if tWrapMod.y=1 or tWrapMod.y=2
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=1:Water_ShaderIndex(0,3)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=1:Water_ShaderIndex(0,4)=1
                  endif
                  if tWrapMod.y=3
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=-2
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,1)=-2
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,2)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=-2
                  endif
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,1),Water_ShaderIndex(0,2),Water_ShaderIndex(0,3),Water_ShaderIndex(0,4)
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  Water_ShaderIndex(0,1)=0
                  Water_ShaderIndex(0,2)=0
                  Water_ShaderIndex(0,3)=0
                  Water_ShaderIndex(0,4)=0
                  if tWrapMod.y=0
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,1)=1
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,2)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=1
                  endif
                  if tWrapMod.y=1 or tWrapMod.y=2
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=1:Water_ShaderIndex(0,3)=1
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=-2
                  endif
                  if tWrapMod.y=3
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=-2
                  endif
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,1),Water_ShaderIndex(0,2),Water_ShaderIndex(0,3),Water_ShaderIndex(0,4)
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  release effect pointer
               else
                  hide limb Water_Object(1),t-1
                  exclude limb on Water_Object(1),t-1
               endif
            else
               hide limb Water_Object(1),t-1
               exclude limb on Water_Object(1),t-1
            endif
            if AL_GetSphereInFrustum(0,(tPosition.x+tPosition.z)-(tSize*8),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,tCull)=1
               if AL_GetBoxInFrustum(0,(tPosition.x+tPosition.z),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,Water_TileSize,Water_WaveHeight*10,tPosition.z)=1 or AL_GetBoxInFrustum(0,(tPosition.x+tOldPosZ),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,Water_TileSize,Water_WaveHeight*10,tOldPosZ+Water_TileSize)=1
                  show limb Water_Object(2),t-1
                  exclude limb off Water_Object(2),t-1
                  null=get object effect(Water_Object(2),t-1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1),AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-(tSize * 0.5),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-tSize,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x-(tSize * 0.5),0,tPosition.y,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-((tSize*2)-(tSize * 0.5)),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x-tSize,0,tPosition.y,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),tPosition.x-(tSize*2),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+4,AL_Vector4(1)
                  Water_ShaderIndex(0,0)=1
                  if tWrapMod.y=0 or tWrapMod.y=3 then Water_ShaderIndex(0,0)=0
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2),AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.x>0 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.x>0 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+4,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+5,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x>0 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x=3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+6,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.x>0 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+7,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x>0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+8,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+9,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3),AL_Vector4(1)
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  release effect pointer
               else
                  hide limb Water_Object(2),t-1
                  exclude limb on Water_Object(2),t-1
               endif
            else
               hide limb Water_Object(2),t-1
               exclude limb on Water_Object(2),t-1
            endif
            if AL_GetSphereInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y-tPosition.z)+(tSize*8),tCull)=1
               if AL_GetBoxInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y-tPosition.z),tPosition.z,Water_WaveHeight*10,Water_TileSize)=1 or AL_GetBoxInFrustum(0,tPosition.x,Water_Height+(Water_WaveHeight * 0.5),(tPosition.y-tOldPosZ),tOldPosZ+Water_TileSize,Water_WaveHeight*10,Water_TileSize)=1
                  show limb Water_Object(3),t-1
                  exclude limb off Water_Object(3),t-1
                  null=get object effect(Water_Object(3),t-1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1),AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize * 0.5),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,Blend#
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+tSize,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,Blend#
                  if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize * 0.5),0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+((tSize*2)-(tSize * 0.5)),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,Blend#
                  if tWrapMod.y=1 or tWrapMod.y=2 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+tSize,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y+(tSize*2),0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+4,AL_Vector4(1)
                  Water_ShaderIndex(0,0)=0
                  if tWrapMod.x=0 or tWrapMod.x=3 then Water_ShaderIndex(0,0)=1
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2),AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.y<3 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.y<3 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+4,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+5,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y<3 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+6,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.y<3 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+7,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.y<3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+8,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+9,AL_Vector4(1)
                  set vector4 AL_Vector4(1),1-tWrap.y,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3),AL_Vector4(1)
                  set vector4 AL_Vector4(1),tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3),AL_Vector4(1)
                  Water_ShaderIndex(0,1)=0
                  Water_ShaderIndex(0,2)=0
                  Water_ShaderIndex(0,3)=0
                  Water_ShaderIndex(0,4)=0
                  if tWrapMod.y=0
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=-2
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,1)=-2
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,2)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=-2
                  endif
                  if tWrapMod.y=1 or tWrapMod.y=2
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=1:Water_ShaderIndex(0,4)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=1:Water_ShaderIndex(0,3)=1
                  endif
                  if tWrapMod.y=3
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=1
                  endif
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,1),Water_ShaderIndex(0,2),Water_ShaderIndex(0,3),Water_ShaderIndex(0,4)
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  Water_ShaderIndex(0,1)=0
                  Water_ShaderIndex(0,2)=0
                  Water_ShaderIndex(0,3)=0
                  Water_ShaderIndex(0,4)=0
                  if tWrapMod.y=0
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=-2
                  endif
                  if tWrapMod.y=1 or tWrapMod.y=2
                     if tWrapMod.x=0 then Water_ShaderIndex(0,1)=-2
                     if tWrapMod.x=3 then Water_ShaderIndex(0,2)=-2
                  endif
                  if tWrapMod.y=3
                     if tWrapMod.x=0 then Water_ShaderIndex(0,2)=1
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,1)=1
                     if tWrapMod.x=1 or tWrapMod.x=2 then Water_ShaderIndex(0,2)=1
                     if tWrapMod.x=3 then Water_ShaderIndex(0,1)=1
                  endif
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,1),Water_ShaderIndex(0,2),Water_ShaderIndex(0,3),Water_ShaderIndex(0,4)
                  set effect constant vector element "WaterIndex4",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  release effect pointer
               else
                  hide limb Water_Object(3),t-1
                  exclude limb on Water_Object(3),t-1
               endif
            else
               hide limb Water_Object(3),t-1
               exclude limb on Water_Object(3),t-1
            endif
            if AL_GetSphereInFrustum(0,(tPosition.x-tPosition.z)+(tSize*8),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,tCull)=1
               if AL_GetBoxInFrustum(0,(tPosition.x-tPosition.z),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,Water_TileSize,Water_WaveHeight*10,tPosition.z)=1 or AL_GetBoxInFrustum(0,(tPosition.x-tOldPosZ),Water_Height+(Water_WaveHeight * 0.5),tPosition.y,Water_TileSize,Water_WaveHeight*10,tOldPosZ+Water_TileSize)=1
                  show limb Water_Object(4),t-1
                  exclude limb off Water_Object(4),t-1
                  null=get object effect(Water_Object(4),t-1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1),AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+(tSize * 0.5),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+tSize,0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x+(tSize * 0.5),0,tPosition.y,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+((tSize*2)-(tSize * 0.5)),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),tPosition.x,0,tPosition.y,0
                  if tWrapMod.x=1 or tWrapMod.x=2 then set vector4 AL_Vector4(1),tPosition.x+tSize,0,tPosition.y,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),tPosition.x+(tSize*2),0,tPosition.y,0
                  set effect constant vector element "WaterIndex1",Water_ShaderIndex(1,1)+4,AL_Vector4(1)
                  Water_ShaderIndex(0,0)=1
                  if tWrapMod.y=0 or tWrapMod.y=3 then Water_ShaderIndex(0,0)=0
                  set vector4 AL_Vector4(1),0,0,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2),AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+1,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+2,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,0,0,0
                  if tWrapMod.x<3 then set vector4 AL_Vector4(1),0,1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+3,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,0,0
                  if tWrapMod.x<3 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+4,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+5,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x<3 then set vector4 AL_Vector4(1),1-Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x=0 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+6,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,0
                  if tWrapMod.x<3 then set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+7,AL_Vector4(1)
                  set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),1,0,0
                  if tWrapMod.x<3 then set vector4 AL_Vector4(1),Water_ShaderIndex(0,0),0,1,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+8,AL_Vector4(1)
                  set vector4 AL_Vector4(1),0,1,0,1
                  set effect constant vector element "WaterIndex2",Water_ShaderIndex(1,2)+9,AL_Vector4(1)
                  set vector4 AL_Vector4(1),1-tWrap.x,tSize/(Water_TileSize*2),0,0
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3),AL_Vector4(1)
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+1,AL_Vector4(1)
                  set effect constant vector element "WaterIndex3",Water_ShaderIndex(1,3)+2,AL_Vector4(1)
                  release effect pointer
               else
                  hide limb Water_Object(4),t-1
                  exclude limb on Water_Object(4),t-1
               endif
            else
               hide limb Water_Object(4),t-1
               exclude limb on Water_Object(4),t-1
            endif
            inc Water_ShaderIndex(1,1),5
            inc Water_ShaderIndex(1,2),10
            inc Water_ShaderIndex(1,3),3
         next t
      endif
   endif
endfunction
`====================================================
` By EVOLVED
` www.evolved-software.com
`====================================================
`Material data
type AL_MaterialsData
   TextureName as string
   DetailMapping as boolean
   ShaderPath as string
   TexturePath0 as string
   TextureType0 as integer
   TexturePath1 as string
   TextureType1 as integer
   TexturePath2 as string
   TextureType2 as integer
   TexturePath3 as string
   TextureType3 as integer
   TexturePath4 as string
   TextureType4 as integer
   TexturePath5 as string
   TextureType5 as integer
endtype
`Material data
type AL_MaterialData
   Name as string
   Number as integer
   DetailMapping as boolean
endtype
`--------------
` Load Material
`--------------
function Materials_Load(iFile as string)
   if file exist(iFile)=1
      if AL_MaterialsEnabled=0
         global AL_MaterialsEnabled as boolean
         global AL_MaterialTextureDivide as float
         global AL_MaterialsCount as integer
         global AL_MaterialShaderCount as integer
         global AL_MaterialTextureCount as integer
         global AL_MaterialDetailMapping as boolean
         global dim AL_Materials() as AL_MaterialsData
         global dim AL_MaterialShader(1) as AL_MaterialData
         global dim AL_MaterialTexture(1) as AL_MaterialData
         AL_MaterialTextureDivide=1
         AL_MaterialsEnabled=1
      endif
      local tName as string
      local tKeyValue as string
      local tKey as string
      local tValue as string
      local tFile as integer
      tFile=find free file()
      open to read tFile,iFile
      repeat
      read string tFile,tName
      if Materials_GetKeyValue(tName)=1
      if Materials_ExtractKey(tName)="texturename"
         array insert at bottom AL_Materials()
         AL_Materials(AL_MaterialsCount).TextureName=Materials_ExtractValue(tName)
         read string tFile,tKeyValue
            if tKeyValue="{"
               repeat
               read string tFile,tKeyValue
               tKeyValue=lower$(tKeyValue)
               if Materials_GetKeyValue(tKeyValue)=1
                  tKey=Materials_ExtractKey(tKeyValue)
                  tValue=Materials_ExtractValue(tKeyValue)
                  if lower$(right$(tValue,12))<>"lightmap.png" and tValue<>""
                     if tKey="shader"
                        AL_Materials(AL_MaterialsCount).ShaderPath=tValue
                     endif
                     if tKey="stage0"
                        AL_Materials(AL_MaterialsCount).TexturePath0=tValue
                        AL_Materials(AL_MaterialsCount).TextureType0=0
                     endif
                     if tKey="stage0cube"
                        AL_Materials(AL_MaterialsCount).TexturePath0=tValue
                        AL_Materials(AL_MaterialsCount).TextureType0=2
                     endif
                     if tKey="stage0volume"
                        AL_Materials(AL_MaterialsCount).TexturePath0=tValue
                        AL_Materials(AL_MaterialsCount).TextureType0=3
                     endif
                     if tKey="stage1"
                        AL_Materials(AL_MaterialsCount).TexturePath1=tValue
                        AL_Materials(AL_MaterialsCount).TextureType1=0
                     endif
                     if tKey="stage1cube"
                        AL_Materials(AL_MaterialsCount).TexturePath1=tValue
                        AL_Materials(AL_MaterialsCount).TextureType1=2
                     endif
                     if tKey="stage1volume"
                        AL_Materials(AL_MaterialsCount).TexturePath1=tValue
                        AL_Materials(AL_MaterialsCount).TextureType1=3
                     endif
                     if tKey="stage2"
                        AL_Materials(AL_MaterialsCount).TexturePath2=tValue
                        AL_Materials(AL_MaterialsCount).TextureType2=0
                     endif
                     if tKey="stage2cube"
                        AL_Materials(AL_MaterialsCount).TexturePath2=tValue
                        AL_Materials(AL_MaterialsCount).TextureType2=2
                     endif
                     if tKey="stage2volume"
                        AL_Materials(AL_MaterialsCount).TexturePath2=tValue
                        AL_Materials(AL_MaterialsCount).TextureType2=3
                     endif
                     if tKey="stage3"
                        AL_Materials(AL_MaterialsCount).TexturePath3=tValue
                        AL_Materials(AL_MaterialsCount).TextureType3=0
                     endif
                     if tKey="stage3cube"
                        AL_Materials(AL_MaterialsCount).TexturePath3=tValue
                        AL_Materials(AL_MaterialsCount).TextureType3=2
                     endif
                     if tKey="stage3volume"
                        AL_Materials(AL_MaterialsCount).TexturePath3=tValue
                        AL_Materials(AL_MaterialsCount).TextureType3=3
                     endif
                     if tKey="stage4"
                        AL_Materials(AL_MaterialsCount).TexturePath4=tValue
                        AL_Materials(AL_MaterialsCount).TextureType4=0
                     endif
                     if tKey="stage4cube"
                        AL_Materials(AL_MaterialsCount).TexturePath4=tValue
                        AL_Materials(AL_MaterialsCount).TextureType4=2
                     endif
                     if tKey="stage4volume"
                        AL_Materials(AL_MaterialsCount).TexturePath4=tValue
                        AL_Materials(AL_MaterialsCount).TextureType4=3
                     endif
                     if tKey="stage5"
                        AL_Materials(AL_MaterialsCount).TexturePath5=tValue
                        AL_Materials(AL_MaterialsCount).TextureType5=0
                     endif
                     if tKey="stage5cube"
                        AL_Materials(AL_MaterialsCount).TexturePath5=tValue
                        AL_Materials(AL_MaterialsCount).TextureType5=2
                     endif
                     if tKey="stage5volume"
                        AL_Materials(AL_MaterialsCount).TexturePath5=tValue
                        AL_Materials(AL_MaterialsCount).TextureType5=3
                     endif
                  endif
               endif
               if tKeyValue="detailmapping=1" then AL_Materials(AL_MaterialsCount).DetailMapping=1
               until tKeyValue="" or tKeyValue="}"
            endif
         inc AL_MaterialsCount
      endif
      endif
      until tName=""
      close file tFile
   endif
endfunction
`--------------
` Get key/Val
`--------------
function Materials_GetKeyValue(iStr as string)
   for s=0 to len(iStr)
      if mid$(iStr,s)="=" then exitfunction 1
   next s
endfunction 0
`--------------
` Extract key
`--------------
function Materials_ExtractKey(iStr as string)
   local tMid as integer
   repeat
      inc tMid
   until mid$(iStr,tMid)="=" or mid$(iStr,tMid)=";" or mid$(iStr,tMid)=""
   rStr as string
   rStr=left$(iStr,tMid-1)
   if right$(rStr,1)=";" then rStr=left$(rStr,len(rStr)-1)
endfunction rStr
`--------------
` Extract Value
`--------------
function Materials_ExtractValue(iStr as string)
   local tMid as integer
   repeat
      inc tMid
   until mid$(iStr,tMid)="=" or mid$(iStr,tMid)=";" or mid$(iStr,tMid)=""
   rStr as string
   rStr=Right$(iStr,(len(iStr)-1)-(tMid-1))
   if right$(rStr,1)=";" then rStr=left$(rStr,len(rStr)-1)
endfunction rStr
`--------------
` Extract Parameter
`--------------
function Materials_ExtractParameter(iStr as string,i as integer)
   local tMid as integer
   local tStr as string
   for t=0 to i
      tStr=""
      repeat
         tStr=tStr+mid$(iStr,tMid)
         inc tMid
      until mid$(iStr,tMid)="," or mid$(iStr,tMid)=";" or mid$(iStr,tMid)=""
      tMid=tMid+1
   next t
   rfloat as float
   rfloat=val(tStr)
endfunction rfloat
`--------------
` Delete Materials
`--------------
function Materials_Delete()
   if AL_MaterialsEnabled=1
      for s=AL_MaterialShaderStart to AL_MaterialShaderEnd-1
         if effect exist(s)=1
            Effect_Remove(s)
            delete effect s
         endif
      next s
      for t=AL_MaterialTextureStart to AL_MaterialTextureEnd-1
         if image exist(t)=1 then delete image t
      next t
      AL_MaterialsEnabled=0
      AL_MaterialsCount=0
      AL_MaterialShaderStart=0
      AL_MaterialShaderEnd=0
      AL_MaterialTextureStart=0
      AL_MaterialTextureEnd=0
      AL_MaterialDetailMapping=0
      undim AL_Materials()
      undim AL_MaterialShader()
      undim AL_MaterialTexture()
   endif
endfunction
`--------------
` Apply Materials to Object
`--------------
function Materials_Apply(iObject as integer)
   if AL_MaterialsEnabled=1
      local tLimb as integer
      repeat
         Materials_ApplyToLimb(iObject,tLimb)
         inc tLimb
      until limb exist(iObject,tLimb)=0
   endif
endfunction
`--------------
` Apply Materials To Limb
`--------------
function Materials_ApplyToLimb(iObject as integer,iLimb as integer)
   if AL_MaterialsEnabled=1
      local tName as string
      local tMid as integer
      tName=limb texture name(iObject,iLimb)
      tMid=0
      repeat
         inc tMid
      until mid$(tName,len(tName)-tMid)="/" or mid$(tName,len(tName)-tMid)="\" or mid$(tName,len(tName)-tMid)=""
      tName=lower$(Right$(tName,tMid))
      for m=0 to AL_MaterialsCount-1
         if AL_Materials(m).TextureName=Tname
            if AL_Materials(m).ShaderPath<>""
               Shader=0
               for s=0 to AL_MaterialShaderCount-1
                   if AL_MaterialShader(s).Name=AL_Materials(m).ShaderPath
                      set limb effect iObject,iLimb,AL_MaterialShader(s).Number
                      Shader=1
                      exit
                   endif
               next s
               if Shader=0
                  array insert at bottom AL_MaterialShader()
                  AL_MaterialShader(AL_MaterialShaderCount).Name=AL_Materials(m).ShaderPath
                  AL_MaterialShader(AL_MaterialShaderCount).Number=find free effect()
                  AL_MaterialShader(AL_MaterialShaderCount).DetailMapping=AL_Materials(m).DetailMapping
                  load effect AL_MaterialShader(AL_MaterialShaderCount).Name,AL_MaterialShader(AL_MaterialShaderCount).Number,0
                  Effect_Add(AL_MaterialShader(AL_MaterialShaderCount).Number)
                  if AL_MaterialDetailMapping=1
                     if AL_MaterialShader(AL_MaterialShaderCount).DetailMapping=1
                        Effect_SetDetailMapping(AL_MaterialShader(AL_MaterialShaderCount).Number,1)
                     endif
                  endif
                  set limb effect iObject,iLimb,AL_MaterialShader(AL_MaterialShaderCount).Number
                  inc AL_MaterialShaderCount
               endif
            endif
            if AL_Materials(m).TexturePath0<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath0
                      texture limb iObject,iLimb,0,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath0
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType0,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,0,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
            if AL_Materials(m).TexturePath1<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath1
                      texture limb iObject,iLimb,1,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath1
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType1,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,1,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
            if AL_Materials(m).TexturePath2<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath2
                      texture limb iObject,iLimb,2,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath2
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType2,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,2,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
            if AL_Materials(m).TexturePath3<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath3
                      texture limb iObject,iLimb,3,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath3
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType3,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,3,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
            if AL_Materials(m).TexturePath4<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath4
                      texture limb iObject,iLimb,4,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath4
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType4,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,4,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
            if AL_Materials(m).TexturePath5<>""
               Texture=0
               for t=0 to  AL_MaterialTextureCount-1
                   if AL_MaterialTexture(t).Name=AL_Materials(m).TexturePath5
                      texture limb iObject,iLimb,5,AL_MaterialTexture(t).Number
                      Texture=1
                      exit
                   endif
               next t
               if Texture=0
                  array insert at bottom AL_MaterialTexture()
                  AL_MaterialTexture(AL_MaterialTextureCount).Name=AL_Materials(m).TexturePath5
                  AL_MaterialTexture(AL_MaterialTextureCount).Number=find free image()
                  load image AL_MaterialTexture(AL_MaterialTextureCount).Name,AL_MaterialTexture(AL_MaterialTextureCount).Number,AL_Materials(m).TextureType5,AL_MaterialTextureDivide
                  texture limb iObject,iLimb,5,AL_MaterialTexture(AL_MaterialTextureCount).Number
                  inc AL_MaterialTextureCount
               endif
            endif
         endif
      next m
   endif
endfunction
`--------------
` Materials Detail Mapping
`--------------
function Materials_DetailMapping(iDetail as boolean)
   if AL_MaterialsEnabled=1
      if iDetail=1
         AL_MaterialDetailMapping=1
         for s=0 to AL_MaterialShaderCount-1
            if AL_MaterialShader(s).DetailMapping=1
               Effect_SetDetailMapping(AL_MaterialShader(s).Number,1)
            endif
         next s
      else
         AL_MaterialDetailMapping=0
         for s=0 to AL_MaterialShaderCount-1
            if AL_MaterialShader(s).DetailMapping=1
               Effect_SetDetailMapping(AL_MaterialShader(s).Number,0)
            endif
         next s
      endif
   endif
endfunction
`--------------
` Save Static Cube Map
`--------------
function Materials_SaveStaticCubeMap(iPosX as float,iPosY as float,iPosZ as float,iSize as integer,iFace1 as string,iFace2 as string,iFace3 as string,iFace4 as string,iFace5 as string,iFace6 as string)
   if AL_Enabled=1
      local tImage as integer
      local dim tCameraData(10) as float
      for e=0 to AL_FrameTargetCount-1
         if effect exist(AL_FrameTarget(e).Effect)=1 then set effect technique AL_FrameTarget(e).Effect,"Disable"
      next e
      tCameraData(1)=AL_CameraData(1)
      tCameraData(2)=AL_CameraData(2)
      tCameraData(3)=AL_CameraData(3)
      tCameraData(4)=AL_CameraData(4)
      tCameraData(5)=Camera position x(AL_CurrentCamera)
      tCameraData(6)=Camera position y(AL_CurrentCamera)
      tCameraData(7)=Camera position z(AL_CurrentCamera)
      tCameraData(8)=Camera angle x(AL_CurrentCamera)
      tCameraData(9)=Camera angle y(AL_CurrentCamera)
      tCameraData(10)=Camera angle z(AL_CurrentCamera)
      tImage=find free image()
      AdvLighting_SetCamera(tCameraData(1),tCameraData(2),90,1)
      set camera to image AL_Camera(8),tImage,iSize,iSize
      set camera aspect AL_Camera(8),1
      position camera AL_CurrentCamera,iPosX,iPosY,iPosZ
      point camera AL_CurrentCamera,iPosX+1,iPosY,iPosZ
      AdvLighting_Update()
      save image iFace1,tImage
      point camera AL_CurrentCamera,iPosX-1,iPosY,iPosZ
      AdvLighting_Update()
      save image iFace2,tImage
      point camera AL_CurrentCamera,iPosX,iPosY+1,iPosZ
      AdvLighting_Update()
      save image iFace3,tImage
      point camera AL_CurrentCamera,iPosX,iPosY-1,iPosZ
      AdvLighting_Update()
      save image iFace4,tImage
      point camera AL_CurrentCamera,iPosX,iPosY,iPosZ+1
      AdvLighting_Update()
      save image iFace5,tImage
      point camera AL_CurrentCamera,iPosX,iPosY,iPosZ-1
      AdvLighting_Update()
      save image iFace6,tImage
      delete camera AL_Camera(8)
      make camera AL_Camera(8)
      backdrop off AL_Camera(8)
      if AL_Camera(7)=AL_Camera(8) then backdrop on AL_Camera(7):color backdrop AL_Camera(7),0
      position camera AL_CurrentCamera,tCameraData(5),tCameraData(6),tCameraData(7)
      rotate camera AL_CurrentCamera,tCameraData(8),tCameraData(9),tCameraData(10)
      AdvLighting_SetCamera(tCameraData(1),tCameraData(2),tCameraData(3),tCameraData(4))
      delete image tImage
      for e=0 to AL_FrameTargetCount-1
         if effect exist(AL_FrameTarget(e).Effect)=1 then set effect technique AL_FrameTarget(e).Effect,"FinalComp"
      next e
   endif
endfunction
