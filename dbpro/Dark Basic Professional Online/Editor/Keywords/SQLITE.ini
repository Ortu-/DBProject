 
SQLITE OPEN DATABASE=SQLITE\SQLITE OPEN DATABASE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, DatabaseFilename STRING, Username STRING, Password STRING)
SQLITE CLOSE DATABASE=SQLITE\SQLITE CLOSE DATABASE.txt= a function returning an INTEGER value from (DatabaseID INTEGER,[ flagVacuumTheDatabase INTEGER])
SQLITE SAVE DATABASE=SQLITE\SQLITE SAVE DATABASE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, DatabaseFileName STRING, Username STRING, Password STRING)
SQLITE VACUUM DATABASE=SQLITE\SQLITE VACUUM DATABASE.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE DATABASE EXIST=SQLITE\SQLITE DATABASE EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE CURRENT DATABASE=SQLITE\SQLITE CURRENT DATABASE.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE GET LAST ERROR$=SQLITE\SQLITE GET LAST ERROR.txt= a function returning a STRING value from <*no parameters*>
SQLITE SET FOREIGN KEY CONSTRAINTS ON=SQLITE\SQLITE SET FOREIGN KEY CONSTRAINTS ON.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE SET FOREIGN KEY CONSTRAINTS OFF=SQLITE\SQLITE SET FOREIGN KEY CONSTRAINTS OFF.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE ARE FOREIGN KEY CONSTRAINTS ON=SQLITE\SQLITE ARE FOREIGN KEY CONSTRAINTS ON.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE TABLE EXIST=SQLITE\SQLITE TABLE EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE TABLE COUNT=SQLITE\SQLITE TABLE COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE GET TABLES FIELDSTRING$=SQLITE\SQLITE GET TABLES FIELDSTRING.txt= a function returning a STRING value from (DatabaseID INTEGER)
SQLITE GET TABLE NAME$=SQLITE\SQLITE GET TABLE NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, NumberOfTableUpToTableCount INTEGER)
SQLITE GET TABLE CREATION SQL$=SQLITE\SQLITE GET TABLE CREATION SQL.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING)
SQLITE TRUNCATE TABLE=SQLITE\SQLITE TRUNCATE TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE EMPTY TABLE=SQLITE\SQLITE EMPTY TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE DROP TABLE=SQLITE\SQLITE DROP TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE DELETE TABLE=SQLITE\SQLITE DELETE TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE CREATE TABLE=SQLITE\SQLITE CREATE TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnsDefinitionsAndConstraints STRING)
SQLITE RENAME TABLE=SQLITE\SQLITE RENAME TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, OriginalTableName STRING, NewTableName STRING)
SQLITE COPY TABLE=SQLITE\SQLITE COPY TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, NewTableName STRING)
SQLITE EXPORT TABLE AS CSV=SQLITE\SQLITE EXPORT TABLE AS CSV.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, CSVFileName STRING,[ DetailFlag INTEGER])
SQLITE IMPORT TABLE FROM CSV=SQLITE\SQLITE IMPORT TABLE FROM CSV.txt= a function returning an INTEGER value from (DatabaseID INTEGER, CSVFileName STRING, NewTableName STRING,[ WithForeignKeysFlag INTEGER])
SQLITE TABLE ROW COUNT=SQLITE\SQLITE TABLE ROW COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE TABLE NAMED COLUMN EXIST=SQLITE\SQLITE TABLE NAMED COLUMN EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE DROP NAMED COLUMN=SQLITE\SQLITE DROP NAMED COLUMN.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE DELETE NAMED COLUMN=SQLITE\SQLITE DELETE NAMED COLUMN.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE RENAME COLUMN IN TABLE=SQLITE\SQLITE RENAME COLUMN IN TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, NewColumnName STRING)
SQLITE INSERT COLUMN INTO TABLE=SQLITE\SQLITE INSERT COLUMN INTO TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, BeforeOrAfter INTEGER, InsertionIndex INTEGER, ColumnType STRING, PrimaryKeyFlag INTEGER, NotNullFlag INTEGER, DefaultValue STRING)
SQLITE INSERT COLUMN AT TABLE START=SQLITE\SQLITE INSERT COLUMN AT TABLE START.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, ColumnType STRING, PrimaryKeyFlag INTEGER, NotNullFlag INTEGER, DefaultValue STRING)
SQLITE INSERT COLUMN AT TABLE END=SQLITE\SQLITE INSERT COLUMN AT TABLE END.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, ColumnType STRING, PrimaryKeyFlag INTEGER, NotNullFlag INTEGER, DefaultValue STRING)
SQLITE ADD COLUMN TO TABLE=SQLITE\SQLITE ADD COLUMN TO TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnDefinitionAndConstraint STRING)
SQLITE TABLE COLUMN NAME$=SQLITE\SQLITE TABLE COLUMN NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER)
SQLITE TABLE COLUMN INDEX=SQLITE\SQLITE TABLE COLUMN INDEX.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE TABLE COLUMN DEFINITION$=SQLITE\SQLITE TABLE COLUMN DEFINITION.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER)
SQLITE TABLE COLUMN SIZE=SQLITE\SQLITE TABLE COLUMN SIZE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER)
SQLITE TABLE COLUMN COUNT=SQLITE\SQLITE TABLE COLUMN COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE TABLE BLOB COLUMN COUNT=SQLITE\SQLITE TABLE BLOB COLUMN COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE TABLE BLOB COLUMN EXIST=SQLITE\SQLITE TABLE BLOB COLUMN EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE TABLE BLOB COLUMN POSITION=SQLITE\SQLITE TABLE BLOB COLUMN POSITION.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, NamedBlobColumn STRING)
SQLITE TABLE BLOB COLUMN NAME$=SQLITE\SQLITE TABLE BLOB COLUMN NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, NumberedBlobColumn INTEGER)
SQLITE TABLE PRIMARY KEY COUNT=SQLITE\SQLITE TABLE PRIMARY KEY COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE TABLE FOREIGN KEY COUNT=SQLITE\SQLITE TABLE FOREIGN KEY COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE SET NAMED COLUMN TYPE=SQLITE\SQLITE SET NAMED COLUMN TYPE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, NewType STRING)
SQLITE IS NAMED COLUMN PRIMARY KEY=SQLITE\SQLITE IS NAMED COLUMN PRIMARY KEY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE SET NAMED COLUMN PRIMARY KEY=SQLITE\SQLITE SET NAMED COLUMN PRIMARY KEY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, OnOff INTEGER)
SQLITE GET NAMED COLUMN NOTNULL=SQLITE\SQLITE GET NAMED COLUMN NOTNULL.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE SET NAMED COLUMN NOTNULL=SQLITE\SQLITE SET NAMED COLUMN NOTNULL.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, OnOff INTEGER)
SQLITE GET NAMED COLUMN DEFAULT VALUE EXIST=SQLITE\SQLITE GET NAMED COLUMN DEFAULT VALUE EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE GET NAMED COLUMN DEFAULT VALUE$=SQLITE\SQLITE GET NAMED COLUMN DEFAULT VALUE.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE SET NAMED COLUMN DEFAULT VALUE=SQLITE\SQLITE SET NAMED COLUMN DEFAULT VALUE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, NewDefaultValue STRING)
SQLITE DOES NAMED COLUMN HAVE FOREIGN KEY=SQLITE\SQLITE DOES NAMED COLUMN HAVE FOREIGN KEY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE GET NAMED COLUMN FK TABLE$=SQLITE\SQLITE GET NAMED COLUMN FK TABLE.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE GET NAMED COLUMN FK COLUMN$=SQLITE\SQLITE GET NAMED COLUMN FK COLUMN.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE REMOVE FK FROM NAMED COLUMN=SQLITE\SQLITE REMOVE FK FROM NAMED COLUMN.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE SET FK ON NAMED COLUMN=SQLITE\SQLITE SET FK ON NAMED COLUMN.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, ForeignTableName STRING, ForeignTableColumnName STRING)
SQLITE TABLE AS PRINTSTRING$=SQLITE\SQLITE TABLE AS PRINTSTRING.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, RightSetColumnLength INTEGER,[ FirstRow INTEGER,[ EndRow INTEGER])
SQLITE TABLE CREATE FIELDSTRING OF COLUMNS$=SQLITE\SQLITE TABLE CREATE FIELDSTRING OF COLUMNS.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING,[ DelimeterForFieldString STRING])
SQLITE TABLE CELL STRING$=SQLITE\SQLITE TABLE CELL STRING.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE TABLE CELL INTEGER=SQLITE\SQLITE TABLE CELL INTEGER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE TABLE CELL FLOAT=SQLITE\SQLITE TABLE CELL FLOAT.txt= a function returning a FLOAT value from (DatabaseID INTEGER, TableName STRING, ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE CHANGE TABLE CELL STRING=SQLITE\SQLITE CHANGE TABLE CELL STRING.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnNameA INTEGER, OriginalCellString STRING, NewCellString STRING,[ WhereColumnB STRING,[ HasAStringValueOfC STRING,[ AndColumnC STRING,[ HasStringValueOfD STRING])
SQLITE CHANGE TABLE CELL INTEGER=SQLITE\SQLITE CHANGE TABLE CELL INTEGER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, OriginalCellInteger INTEGER, NewCellInteger INTEGER,[ WhereAnotherColumnNamed STRING,[ HasAnIntegerValueOf INTEGER])
SQLITE CHANGE TABLE CELL FLOAT=SQLITE\SQLITE CHANGE TABLE CELL FLOAT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING, OriginalCellFloat FLOAT, NewCellFloat FLOAT,[ WhereAnotherColumnNamed STRING,[ HasAFloatValueOf FLOAT])
SQLITE CHANGE TABLE CELL BLOB TO FILE=SQLITE\SQLITE CHANGE TABLE CELL BLOB TO FILE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, BlobColumnName STRING, NameOfFileToSetInBlob STRING, WhereColumnB1 STRING, HasValueB2 STRING, AndWhereColumnC1 INTEGER, HasValueC2 STRING)
SQLITE GET TABLE CELL STRING$=SQLITE\SQLITE GET TABLE CELL STRING.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, FindInColumnA STRING, WhereColumnB1 STRING, HasValueB2 STRING,[ AndWhereColumnC1 STRING,[ HasValueC2 STRING])
SQLITE GET TABLE CELL INTEGER=SQLITE\SQLITE GET TABLE CELL INTEGER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, FindInColumnA STRING, WhereColumnB1 STRING, HasValueB2 STRING,[ AndWhereColumnC1 STRING,[ HasValueC2 STRING])
SQLITE GET TABLE CELL FLOAT=SQLITE\SQLITE GET TABLE CELL FLOAT.txt= a function returning a FLOAT value from (DatabaseID INTEGER, TableName STRING, FindInColumnA STRING, WhereColumnB1 STRING, HasValueB2 STRING,[ AndWhereColumnC1 STRING,[ HasValueC2 STRING])
SQLITE TURN TABLE CELL BLOB INTO FILE=SQLITE\SQLITE TURN TABLE CELL BLOB INTO FILE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, FileNameToCreateFromBlob STRING, FindInColumnA STRING, WhereColumnB1 STRING, HasValueB2 STRING,[ AndWhereColumnC1 STRING,[ HasValueC2 STRING])
SQLITE BEGIN SQL QUERY=SQLITE\SQLITE BEGIN SQL QUERY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, SQLQuery STRING)
SQLITE BEGIN SQL QUERY SQLITEMASTER=SQLITE\SQLITE BEGIN SQL QUERY SQLITEMASTER.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE BEGIN SQL QUERY TABLELIST=SQLITE\SQLITE BEGIN SQL QUERY TABLELIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE BEGIN SQL QUERY DATABASE INDEXLIST=SQLITE\SQLITE BEGIN SQL QUERY DATABASE INDEXLIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE BEGIN SQL QUERY PRAGMA TABLEINFO=SQLITE\SQLITE BEGIN SQL QUERY PRAGMA TABLEINFO.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE BEGIN SQL QUERY PRAGMA INDEXLIST=SQLITE\SQLITE BEGIN SQL QUERY PRAGMA INDEXLIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE BEGIN SQL QUERY PRAGMA INDEXINFO=SQLITE\SQLITE BEGIN SQL QUERY PRAGMA INDEXINFO.txt= a function returning an INTEGER value from (DatabaseID INTEGER, IndexName STRING)
SQLITE BEGIN SQL QUERY PRAGMA FOREIGNKEYLIST=SQLITE\SQLITE BEGIN SQL QUERY PRAGMA FOREIGNKEYLIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE BEGIN SQL QUERY SPECIFIC=SQLITE\SQLITE BEGIN SQL QUERY SPECIFIC.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnName1 STRING, ColumnValue1 STRING,[ ColumnName2 STRING,[ ColumnValue2 STRING,[ ColumnName3 STRING,[ ColumnValue3 STRING])
SQLITE FURTHER SQL QUERY=SQLITE\SQLITE FURTHER SQL QUERY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, AdditionalSQLQuery STRING)
SQLITE GET LAST SQL QUERY$=SQLITE\SQLITE GET LAST SQL QUERY.txt= a function returning a STRING value from <*no parameters*>
SQLITE MAKE TABLE FROM SQL QUERY RECORDS=SQLITE\SQLITE MAKE TABLE FROM SQL QUERY RECORDS.txt= a function returning an INTEGER value from (DatabaseID INTEGER, NewTableName STRING)
SQLITE QUERY RECORDS COUNT=SQLITE\SQLITE QUERY RECORDS COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE QUERY COLUMNS COUNT=SQLITE\SQLITE QUERY COLUMNS COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE QUERY COLUMN NAME$=SQLITE\SQLITE QUERY COLUMN NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE FIRST RECORD ROW=SQLITE\SQLITE FIRST RECORD ROW.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE PREVIOUS RECORD ROW=SQLITE\SQLITE PREVIOUS RECORD ROW.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE NEXT RECORD ROW=SQLITE\SQLITE NEXT RECORD ROW.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE GOTO RECORD ROW=SQLITE\SQLITE GOTO RECORD ROW.txt= a function returning an INTEGER value from (DatabaseID INTEGER, RowToGoTo INTEGER)
SQLITE GOTO RECORD ROW WHERE=SQLITE\SQLITE GOTO RECORD ROW WHERE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, WhereColumnNameA STRING, EqualsValueA STRING)
SQLITE LAST RECORD ROW=SQLITE\SQLITE LAST RECORD ROW.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE RECORDSET COLUMN NAME$=SQLITE\SQLITE RECORDSET COLUMN NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORDSET COLUMN NUMBER=SQLITE\SQLITE RECORDSET COLUMN NUMBER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnName STRING)
SQLITE RECORDSET COLUMN TYPE$=SQLITE\SQLITE RECORDSET COLUMN TYPE.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORDSET COLUMN SIZE=SQLITE\SQLITE RECORDSET COLUMN SIZE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORDSET COLUMN SIZE BY COLUMN NAME=SQLITE\SQLITE RECORDSET COLUMN SIZE BY COLUMN NAME.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnName STRING)
SQLITE RECORDSET COLUMN COUNT=SQLITE\SQLITE RECORDSET COLUMN COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE RECORDSET ROW COUNT=SQLITE\SQLITE RECORDSET ROW COUNT.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE RECORD ROW STRING$=SQLITE\SQLITE RECORD ROW STRING.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORD ROW STRING BY COLUMN NAME$=SQLITE\SQLITE RECORD ROW STRING BY COLUMN NAME.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnName STRING)
SQLITE RECORDSET AS PRINTSTRING$=SQLITE\SQLITE RECORDSET AS PRINTSTRING.txt= a function returning a STRING value from (DatabaseID INTEGER, RightSetColumnLength INTEGER,[ FirstRow INTEGER,[ EndRow INTEGER])
SQLITE RECORD CURRENT ROW FIELDSTRING$=SQLITE\SQLITE RECORD CURRENT ROW FIELDSTRING.txt= a function returning a STRING value from (DatabaseID INTEGER,[ DelimeterForFieldString STRING])
SQLITE RECORD ROW INTEGER=SQLITE\SQLITE RECORD ROW INTEGER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORD ROW INTEGER BY COLUMN NAME=SQLITE\SQLITE RECORD ROW INTEGER BY COLUMN NAME.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnName STRING)
SQLITE RECORD ROW FLOAT=SQLITE\SQLITE RECORD ROW FLOAT.txt= a function returning a FLOAT value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE RECORD ROW FLOAT BY COLUMN NAME=SQLITE\SQLITE RECORD ROW FLOAT BY COLUMN NAME.txt= a function returning a FLOAT value from (DatabaseID INTEGER, ColumnName STRING)
SQLITE RECORD ROW FILE FROM BLOB=SQLITE\SQLITE RECORD ROW FILE FROM BLOB.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnNumber INTEGER, FileNameToCreateFromBlob STRING)
SQLITE RECORD ROW FILE FROM BLOB BY COLUMN NAME=SQLITE\SQLITE RECORD ROW FILE FROM BLOB BY COLUMN NAME.txt= a function returning an INTEGER value from (DatabaseID INTEGER, ColumnName STRING, FileNameToCreateFromBlob STRING)
SQLITE FINISH SQL QUERY=SQLITE\SQLITE FINISH SQL QUERY.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE SQL QUERY AND RECORD STRING$=SQLITE\SQLITE SQL QUERY AND RECORD STRING.txt= a function returning a STRING value from (DatabaseID INTEGER, SQLQuery STRING,[ ColumnNumber INTEGER,[ RowNumber INTEGER])
SQLITE SQL QUERY AND RECORD INTEGER=SQLITE\SQLITE SQL QUERY AND RECORD INTEGER.txt= a function returning an INTEGER value from (DatabaseID INTEGER, SQLQuery STRING,[ ColumnNumber INTEGER,[ RowNumber INTEGER])
SQLITE SQL QUERY AND RECORD FLOAT=SQLITE\SQLITE SQL QUERY AND RECORD FLOAT.txt= a function returning a FLOAT value from (DatabaseID INTEGER, SQLQuery STRING,[ ColumnNumber INTEGER,[ RowNumber INTEGER])
SQLITE SQL QUERY AND RECORD BLOB TO FILE=SQLITE\SQLITE SQL QUERY AND RECORD BLOB TO FILE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, SQLQuery STRING, FileNameToCreateFromBlob STRING)
SQLITE UPDATING SQL STATEMENT=SQLITE\SQLITE UPDATING SQL STATEMENT.txt= a function returning an INTEGER value from (DatabaseID INTEGER, UpdatingSQLStatement STRING)
SQLITE LAST UPDATING SQL STATEMENT$=SQLITE\SQLITE LAST UPDATING SQL STATEMENT.txt= a function returning a STRING value from (DatabaseID INTEGER, ColumnNumber INTEGER)
SQLITE ROWS AFFECTED BY UPDATE=SQLITE\SQLITE ROWS AFFECTED BY UPDATE.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE SET COLUMN VALUE WHERE=SQLITE\SQLITE SET COLUMN VALUE WHERE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, ColumnToBeEffected STRING, NewValue STRING, WhereColumnA STRING, EqualsValueA STRING,[ AndWhereColumnB STRING,[ EqualsValueB STRING])
SQLITE INSERT FILES AS BLOBS=SQLITE\SQLITE INSERT FILES AS BLOBS.txt= a function returning an INTEGER value from (DatabaseID INTEGER, InsertSQLStatement STRING, NameOfFileToInsert1 STRING,[ NameOfFileToInsert2 STRING,[ NameOfFileToInsert3 STRING,[ NameOfFileToInsert4 STRING])
SQLITE SET FILE AS BLOB=SQLITE\SQLITE SET FILE AS BLOB.txt= a function returning an INTEGER value from (DatabaseID INTEGER, SetSQLStatement STRING, NameOfFileToSetInBlob STRING)
SQLITE BEGIN TRANSACTION=SQLITE\SQLITE BEGIN TRANSACTION.txt= a function returning an INTEGER value from )
SQLITE ADD TO TRANSACTION=SQLITE\SQLITE ADD TO TRANSACTION.txt= a function returning an INTEGER value from (SQLStatementToAddToTransaction STRING)
SQLITE GET CURRENT TRANSACTION STRING$=SQLITE\SQLITE GET CURRENT TRANSACTION STRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE COMMIT TRANSACTION=SQLITE\SQLITE COMMIT TRANSACTION.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE INSERT ROW INTO TABLE=SQLITE\SQLITE INSERT ROW INTO TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, SpecifiedNamedColumns STRING, SpecifiedValuesForThoseColumns STRING)
SQLITE DELETE ROWS FROM TABLE=SQLITE\SQLITE DELETE ROWS FROM TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, WhereConditions STRING)
SQLITE CREATE INDEX=SQLITE\SQLITE CREATE INDEX.txt= a function returning an INTEGER value from (DatabaseID INTEGER, IndexName STRING, TableName STRING, ColumnName STRING)
SQLITE INDEX EXIST=SQLITE\SQLITE INDEX EXIST.txt= a function returning an INTEGER value from (DatabaseID INTEGER, IndexName STRING, TableName STRING)
SQLITE GET INDEX OF COLUMN$=SQLITE\SQLITE GET INDEX OF COLUMN.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, ColumnName STRING)
SQLITE GET INDEX CREATION SQL$=SQLITE\SQLITE GET INDEX CREATION SQL.txt= a function returning a STRING value from (DatabaseID INTEGER, TableName STRING, IndexName STRING)
SQLITE DROP INDEX=SQLITE\SQLITE DROP INDEX.txt= a function returning an INTEGER value from (DatabaseID INTEGER, IndexName STRING)
SQLITE DELETE INDEX=SQLITE\SQLITE DELETE INDEX.txt= a function returning an INTEGER value from (DatabaseID INTEGER, IndexName STRING)
SQLITE MAKE SUPERSTRING FROM TABLE=SQLITE\SQLITE MAKE SUPERSTRING FROM TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE MAKE SUPERSTRING FROM RECORDSET=SQLITE\SQLITE MAKE SUPERSTRING FROM RECORDSET.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE SUPERSTRING EXIST=SQLITE\SQLITE SUPERSTRING EXIST.txt= a function returning an INTEGER value from )
SQLITE GET SUPERSTRING$=SQLITE\SQLITE GET SUPERSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE CLEAR SUPERSTRING=SQLITE\SQLITE CLEAR SUPERSTRING.txt= a function returning an INTEGER value from )
SQLITE SUPERSTRING COLUMN COUNT=SQLITE\SQLITE SUPERSTRING COLUMN COUNT.txt= a function returning an INTEGER value from )
SQLITE SUPERSTRING ROW COUNT=SQLITE\SQLITE SUPERSTRING ROW COUNT.txt= a function returning an INTEGER value from )
SQLITE SUPERSTRING GET COLUMN NAME$=SQLITE\SQLITE SUPERSTRING GET COLUMN NAME.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE SUPERSTRING GET COLUMN TYPE$=SQLITE\SQLITE SUPERSTRING GET COLUMN TYPE.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE SUPERSTRING GET COLUMN NAME WITH TYPE$=SQLITE\SQLITE SUPERSTRING GET COLUMN NAME WITH TYPE.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE SUPERSTRING COLUMN NAMES FIELDSTRING$=SQLITE\SQLITE SUPERSTRING COLUMN NAMES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE SUPERSTRING COLUMN TYPES FIELDSTRING$=SQLITE\SQLITE SUPERSTRING COLUMN TYPES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE SUPERSTRING COLUMN NAMES AND TYPES FIELDSTRING$=SQLITE\SQLITE SUPERSTRING COLUMN NAMES AND TYPES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE SUPERSTRING GET STRING$=SQLITE\SQLITE SUPERSTRING GET STRING.txt= a function returning a STRING value from (Column INTEGER, Row INTEGER)
SQLITE SUPERSTRING SET STRING=SQLITE\SQLITE SUPERSTRING SET STRING.txt= a function returning an INTEGER value from (Column INTEGER, Row INTEGER, NewStringValue STRING)
SQLITE SUPERSTRING GET INTEGER=SQLITE\SQLITE SUPERSTRING GET INTEGER.txt= a function returning an INTEGER value from (Column INTEGER, Row INTEGER)
SQLITE SUPERSTRING SET INTEGER=SQLITE\SQLITE SUPERSTRING SET INTEGER.txt= a function returning an INTEGER value from (Column INTEGER, Row INTEGER, NewIntegerValue INTEGER)
SQLITE SUPERSTRING GET FLOAT=SQLITE\SQLITE SUPERSTRING GET FLOAT.txt= a function returning a FLOAT value from (Column INTEGER, Row INTEGER)
SQLITE SUPERSTRING SET FLOAT=SQLITE\SQLITE SUPERSTRING SET FLOAT.txt= a function returning an INTEGER value from (Column INTEGER, Row INTEGER, NewFloatValue INTEGER)
SQLITE MAKE TABLE FROM SUPERSTRING=SQLITE\SQLITE MAKE TABLE FROM SUPERSTRING.txt= a function returning an INTEGER value from (DatabaseID INTEGER, NewTableName STRING)
SQLITE MAKE ARRAY FROM TABLE=SQLITE\SQLITE MAKE ARRAY FROM TABLE.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING)
SQLITE MAKE ARRAY FROM RECORDSET=SQLITE\SQLITE MAKE ARRAY FROM RECORDSET.txt= a function returning an INTEGER value from (DatabaseID INTEGER)
SQLITE ARRAY EXIST=SQLITE\SQLITE ARRAY EXIST.txt= a function returning an INTEGER value from )
SQLITE ARRAY COLUMN COUNT=SQLITE\SQLITE ARRAY COLUMN COUNT.txt= a function returning an INTEGER value from )
SQLITE ARRAY ROW COUNT=SQLITE\SQLITE ARRAY ROW COUNT.txt= a function returning an INTEGER value from )
SQLITE ARRAY GET COLUMN NAME$=SQLITE\SQLITE ARRAY GET COLUMN NAME.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE ARRAY GET COLUMN TYPE$=SQLITE\SQLITE ARRAY GET COLUMN TYPE.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE ARRAY GET COLUMN NAME WITH TYPE$=SQLITE\SQLITE ARRAY GET COLUMN NAME WITH TYPE.txt= a function returning a STRING value from (ColumnNumber INTEGER)
SQLITE ARRAY COLUMN NAMES FIELDSTRING$=SQLITE\SQLITE ARRAY COLUMN NAMES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE ARRAY COLUMN TYPES FIELDSTRING$=SQLITE\SQLITE ARRAY COLUMN TYPES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE ARRAY COLUMN NAMES AND TYPES FIELDSTRING$=SQLITE\SQLITE ARRAY COLUMN NAMES AND TYPES FIELDSTRING.txt= a function returning a STRING value from <*no parameters*>
SQLITE ARRAY STRING$=SQLITE\SQLITE ARRAY STRING.txt= a function returning a STRING value from (ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE ARRAY SET STRING=SQLITE\SQLITE ARRAY SET STRING.txt= a function returning an INTEGER value from (ColumnNumber INTEGER, RowNumber INTEGER, NewString STRING)
SQLITE ARRAY INTEGER=SQLITE\SQLITE ARRAY INTEGER.txt= a function returning an INTEGER value from (ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE ARRAY SET INTEGER=SQLITE\SQLITE ARRAY SET INTEGER.txt= a function returning an INTEGER value from (ColumnNumber INTEGER, RowNumber INTEGER, NewInteger INTEGER)
SQLITE ARRAY FLOAT=SQLITE\SQLITE ARRAY FLOAT.txt= a function returning a FLOAT value from (ColumnNumber INTEGER, RowNumber INTEGER)
SQLITE ARRAY SET FLOAT=SQLITE\SQLITE ARRAY SET FLOAT.txt= a function returning an INTEGER value from (ColumnNumber INTEGER, RowNumber INTEGER, NewFloat INTEGER)
SQLITE MAKE TABLE FROM ARRAY=SQLITE\SQLITE MAKE TABLE FROM ARRAY.txt= a function returning an INTEGER value from (DatabaseID INTEGER, NewTableName STRING,[ NumberedColumnAsPrimaryKey INTEGER,[ NamesColumnsToBeIndexed STRING])
SQLITE EXPORT ARRAY AS CSV=SQLITE\SQLITE EXPORT ARRAY AS CSV.txt= a function returning an INTEGER value from (CSVFileName STRING)
SQLITE CLEAR SQLITE ARRAY=SQLITE\SQLITE CLEAR SQLITE ARRAY.txt= a command with <*no parameters*>
SQLITE DELETE SQLITE ARRAY=SQLITE\SQLITE DELETE SQLITE ARRAY.txt= a command with <*no parameters*>
SQLITE EXPORT TABLE AS XML=SQLITE\SQLITE EXPORT TABLE AS XML.txt= a function returning an INTEGER value from (DatabaseID INTEGER, TableName STRING, FileNameForXML STRING)
SQLITE EXPORT DATABASE AS XML=SQLITE\SQLITE EXPORT DATABASE AS XML.txt= a function returning an INTEGER value from (DatabaseID INTEGER, FileNameForXML STRING)
